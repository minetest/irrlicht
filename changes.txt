--------------------------
Changes in ogl-es (not yet released - will be merged with trunk at some point)

- Add support for (experimental) WebGL1 driver for emscripten (still work in process)
- Add support for emscripten. Thanks @labsin for the patch.
- Add IVideoDriver::getAmbientLight function so shaders can access global ambient light easier
- Merge material changes for COGLES1MaterialRenderer_LIGHTMAP and COpenGLMaterialRenderer_TRANSPARENT_ALPHA_CHANNEL which had been done in OGL in trunk (r2740) to ensure materials look the same on all platforms.
- Added support for PVR textures. Loader offer support for compressed DXT1-5, PVRTC/PVRTC-II, ETC1/ETC2 texture formats.

--------------------------
Changes in 1.9 (not yet released)
- IBillboardSceneNode got functions to access meshbuffers. So uv-coordinates can now be modified directly (previously only possible via texture matrix).
- vector3d scalar operator/ and operator/= no longer multiply by the inverse but use the expected division. 
  Costs some speed, but fixes floating point troubles caused by this optimization (like x/x no longer being 1.0).
- Add equals and set_data functions to core::array for easier working with blocks of data.
- SIrrlichtCreationParameters::IgnoreInput set to false works again on X11. 
  Thanks @ Victor Gaydov for report + patch + very good test cases! (bug #401)
  This had been broken since Irrlicht 1.6
- Add steer parameter to CSceneNodeAnimatorFollowSpline which allows rotating node toward direction of movement. 
  Thanks @ Bate for the patch (patch #175)
- Add a workaround for XWarpPointer bug that causes mouse to jump when users have set a Coordinate Transformation Matrix for their mouse on X11.
  This was mentioned in bug #450 by vikaig.
  The fix needs compiling with _IRR_LINUX_X11_XINPUT2_ enabled (so far disabled by default)
- Add IGeometryCreator::createTorusMesh to create donuts.
- Don't try loading broken image files twice with same loader anymore.
- Make CImageLoaderJPG thread safe. Thanks @ Edoardo Lolletti for report and patch (patch #324)
- Add ETCF_SUPPORT_VERTEXT_TEXTURE flag which can be used to enable vertex texture sampling support in Direct3D 9.
  Note that this was enabled for a long time in 1.9 svn, but is now disabled by default.
- CGUIListBox now serializes the state of "Selected". Feature wish by chronologicaldot (http://irrlicht.sourceforge.net/forum/viewtopic.php?f=2&t=52719)
- Bugfix: Changing focus with tab-keys now also work when elements are inside a modal screen.
- COBJMeshFileLoader using a bit more exact color conversion for 0-1 to 0-255 range (same now as SColorf::toSColor uses).
- Speedup for COBJMeshWriter
- Add blinkMode parameter to IGUIEnvironment::addModalScreen, so blinking can be suppressed
- Speedup: Avoid string copy in CXMLReaderImpl::getAttributeByName
- Fix bug in rect::clipAgainst that had caused rects completely outside to the left-top of the rect to be clipped against ending up with both corners outside.
  It still worked for UI in most cases as the resulting rectangle still had an area of 0.
- Add getAlign functions to IGUIElement
- Add optional multitouch support to X11 (but disabled in IrrCompileConfig by default). Thanks @TheBrokenRail for a patch proposal based on example code from esjeon (patch #322).
- Slightly changed close window handling on X11 (optimized and avoids problems on some shells). Thanks @TheBrokenRail for a patch (was part of patch #322).
- Add getActiveColor functions to IGUIStaticText and IGUIButton (get currently used color).
- Add IGUIEnvironment::addToDeletionQueue to allow save removal of gui elements while iterating over them (like the same named function in ISceneManager).
- IGUIEnvironment::drawAll has now a parameter to allow disabling automatic resize to screensize. Makes it easier to use partial screens with full alignment support.
- No longer try to set WM_QUIT when using an external Window on Win32. 
  Thx @Marko Mahnic for the patch (https://sourceforge.net/p/irrlicht/bugs/449)
- ply meshloader now also supports textures with uv-labels named texture_u/texture_v. 
  Thx @acy for bugreport and test-model (http://irrlicht.sourceforge.net/forum/viewtopic.php?f=4&t=52646)
- Fix potential reading/writing 1 byte behind it's own buffer in PLY loader.
  Thanks @wolfgang for report and patch (http://irrlicht.sourceforge.net/forum/viewtopic.php?f=7&t=52627&p=305573#p305573)
- ICursorControl::isVisible is now always returning the flag set in setVisible. 
  This changes the behaviour on Win32 somewhat when Windows returned a CURSOR_SUPPRESSED state (touch-screen input).
  Previously we set IsVisible it to false when CURSOR_SUPPRESSED was set.
  Also we handle the CURSOR_SUPPRESSED state slightly different now and still try to hide cursors once when requested.
- Improvements to B3D writer for speed, readability and handling of low framerate animations.
  Thanks @JLouisB for the patch (For more info, see: http://irrlicht.sourceforge.net/forum/viewtopic.php?f=2&t=50067&start=15)
- Add another render pass ESNRP_GUI which is drawn last and is p.E. useful for rendering gui nodes in the scenemanager.
- BurningVideo: 0.52
  - 10 year anniversary update
  - Lighting model reworked. moved to eyespace like openGL. [Specular Highlights, Fog, Sphere/Reflection Map] 
  - increased internal s4DVertex to support 4 Textures and 4 Colors [switchable]
  - Textures are handled as sRGB during Mipmap Generation. More accurate, less visual disruption
  - 2D is drawn as 3D like hardware drivers. [switchable]. enables viewport scaling, material2D, scissor
  - Texture Spatial Resolution Limiting working. [lower memory consumption,SOFTWARE_DRIVER_2_TEXTURE_MAXSIZE]
  - NormalMap for 1 Light accurate. still all lights are accumulated
  - SuperTuxKart 8.0.1 playable
  - Internal Backbuffer Scaling and Interlacing
  - Known Problems
    - Depthbuffer range not equal to Hardware Drivers. Problems with Orthographic Stencil Shadows
	- Triangle MipMap Selection. Wrong for TextureAtlas and Billboards
- Fix CPLYMeshFileLoader checking for wrong vertex count when switching between 16/32 bit. Thanks @randomMesh for reporting.
- Fix bug that AnimatedMeshSceneNode ignored ReadOnlyMaterials flag when checking materials for transparent render passes.
- Unify checks if materials should use transparent render pass with new IVideoDriver::needsTransparentRenderPass function.
- Material.ZWriteEnable is now of type E_ZWRITE instead of bool. This allows now setting materials to always "on" independent of material type and transparency.
  This breaks compiling. To have old values replace false with EZW_OFF and true with EWZ_AUTO.
- Materials EMT_REFLECTION_2_LAYER and EMT_TRANSPARENT_REFLECTION_2_LAYER on OpenGL are now same as in D3D9. Before GL used a sphere-map for those instead of reflection.
- Bugfix: CGUIToolBar automatic placement no longer outside of screen when there are modals screens when creating it.
  Or when there are other window elements going over full window-size.
  Thanks to Stephen Lynx for the bugreport and to Sérgio Augusto Vianna for writing a test case with a bug example.
  Changes: a) Never move the toolbar below it's parents lower border. b) No longer check all element-types, but only try to be below other toolbars or menues.
- Add a normalType parameter to IGeometryCreator::createCylinderMesh
- Add a normalsUpdate parameter to IMeshManipulator::transform to allow updating the normals with the inverse-transpose of the transformation matrix.
- Bugfix: quaternion::slerp now uses lerpN instead of lerp to keep result normalized.
- Add function quaternion::lerpN which is like lerp but normalizes the result.
- Add function ISceneManager::createShadowVolumeSceneNode to allow custom ISceneNode's to use shadows.
- CGUITabControl serialization changed to allow using custom tabs (before only CGUITab could be serialized). 
  There was a lot of rewriting involved, including some minor interface changes (IGUITab*  can now be added directly for example).
  See http://irrlicht.sourceforge.net/forum/viewtopic.php?f=7&t=52344 for a thread about this.
  Thanks @chronologicaldot for bringing this up, writing a patch proposal and even writing test.
- CGUITabControl no longer eats EMIE_LMOUSE_PRESSED_DOWN (doesn't seem to need it, was just done for a planned feature which is not implemented yet).
- Removing a tab in CGUITabControl will now also remove the tab-element. Fixes problems like tabs still being around & visible when you removed the active tab.
- Add example 28.CubeMapping. 
  Based originally on EnvCubeMap example from irrSpintz engine. 
  Including a cubemap texture from Emil Persson, aka Humus from http://www.humus.name
- IGeometryCreator::createCubeMesh has a new parameter to allow creating different types of cube meshes. 
  Added a new cube-mesh with meshbuffers per side.
  Also single buffer cube-mesh now normalizes it's normals.
- Bugfix: CBillboardTextSceneNode no longer disregards IsVisible flag
- FPS-camera rotation now smoother. 
  First bug was that it would sometimes skip back because it worked with wrong values for the screen-center position.
  Second (and bigger) bug was that it ignored all cursor-movement which happened between device->run() and the point where
  the animator did run. Tiny side-effect your camera will now rotate generally faster.
- Fix ms3d loader to work on big endian systems which need floats to be aligned in memory. Thanks @ kas1e, Corto and Salas for the patch (http://irrlicht.sourceforge.net/forum/viewtopic.php?f=7&t=52538).
- Bugfix: COBJMeshFileLoder no longer overwrites transparency value with 1.0 when it's set before the diffuse color value in the mtl file. Thanks @Boshen for bugreport (#445).
- Bugfix: OpenGL no longer antialiasing stencil buffer when driver has antialiasing disabled.
- Add IShadowVolumeSceneNode::setOptimization to allow disabling optimizations for meshes were contour shadows fail.
- Stencil shadows work now also with directional light
- Add example 27.PostProcessing written by Boshen Guan
- Drivers can now try to create textures from images in more exotic color formats (like floating point formats).  It depends on the driver how much that works (so far mainly OpenGL can handle it somewhat).
- Fix OpenGL to no longer switch colors red and blue in 24-bit RGB format. But warnings added to documentation to avoid 24-bit textures as they are generally just trouble.
- No longer try to convert ECF_R5G6B5 to ECF_A1R5G5B5 on OpenGL (just made texture-loading seem to fail).
- Add parameter SIrrlichtCreationParameters.WindowResizable. Mainly to work around troubles with SDL+OpenGL on some platforms where resizing later can be tricky/impossible.
- Add operator[]  to vector2d and vector3d
- Bugfix: IrrlichtDevice::isWindowMinimized no longer returns true when it's maximized on Windows.
- Ignore degenerated faces in obj file loader when they would generate triangles where 2 vertices use identical indices.
- Add CMatrix4::transformVec4 to transform vectors with 4 elements (thx @ devsh)
- Add ITexture::getOriginalColorFormat to access color format of images used to create a texture
- Add IMemoryReadFile interface which allows direct access to memory block used as file.
- Add IReadFile::getType() interface to all users to find out what kind of class implements that interface.
- .dae/Collada reader/writer now handle whitespace in texture-filenames with escape characters (handle them as xs:anyURI).
- Add function string::insert.
- EditBox now still allows overwriting characters when the text-length is at max.
- Bugfix: CMatrix4::transformPlane was calculating the wrong plane-normal before. 
- SViewFrustum::recalculateBoundingBox no longer includes camera position in the bounding-box. Only using frustum corners now. Thx @DevSH for bugreport & patch.
- Camera uses now OGL projection matrices with OpenGL driver. Fixes wrong near-plane values with OpenGL (showed too much before).
- Add a flag to most CMatrix4::buildProjectionMatrix functions to allow creating OpenGL projection matrices (target range of -w to w instead of 0 to w).
- Bugfix: CCameraSceneNode resets the IsOrthogonal flag to false now when it recalculates a projection matrix.
- SViewFrustum::setFrom and SViewFrustum constructor now use a parameter to allow to set the correct near clipping plane when the projection matrix doesn't use a target depth range of 0 to z, but for example -z to z. So OGL projections matrices can now also use it.
- Remove code to read boundingbox element in Collada reader as it's not in Collada specification.
- .dae/Collada reader now converts from Collada's right-handed to Irrlicht's left handed coordinate system (switching z to -z)
- Add irr::string::eraseTrailingFloatZeros to kick out trailing 0's for strings generated from floats.
- .dae/Collada writer now converts from Irrlicht's left-handed to Collada's right-handed coordinate system (switching z to -z)
- Switch Collada writer to utf8 xml's.
- Add IXMLWriterUTF8 
- IColladaMeshWriter::writeScene got an additional flag to decide if root should be written.
- _IRR_MATERIAL_MAX_TEXTURES_ now set to 8 by default. So we can use now 8 textures per material without recompiling the engine. 
  Additionally there's a new global variable irr::video::MATERIAL_MAX_TEXTURES_USED which can be set to lower numbers to avoid most of the costs coming with this for people not needing more textures.
  But using more textures via _IRR_MATERIAL_MAX_TEXTURES_ also has become less calculation intensive than it was in the past, so in release builds the difference is hardly noticeable.
- Serialization fixes for materials in irr format (in IVideoDriver::createAttributesFromMaterial/fillMaterialStructureFromAttributes).
- Add serialization for ToolTip to IGUIElement. Thanks @chronologicaldot for patch (http://irrlicht.sourceforge.net/forum/viewtopic.php?f=2&t=52374)
- Try recovering lost device in D3D9 for 3 seconds when device reset fails after resizing Window.
- Add typedefs like value_type and size_type to array, list and map like std containers have. Thanks @SLC for idea (http://irrlicht.sourceforge.net/forum/viewtopic.php?f=1&t=52363)
- Remove unused enum E_LOST_RESOURCE
- CGUIComboBox uses now EGDS_SCROLLBAR_SIZE instead of EGDS_WINDOW_BUTTON_WIDTH for the width of the listbox button to allow changing that without changing window topbar height.
  Thanks @LunaRebirth for reporting. (Forum: http://irrlicht.sourceforge.net/forum/viewtopic.php?f=1&t=52297&p=303682#p303682)
- CGUIListbox, CGUITreeView and CGUITable now resize scrollbars when EGDS_SCROLLBAR_SIZE in the skin changes without having to re-create the elements.
  This also fixes the problem that drawing looked wrong when this value got changed after the elements were created.
  Thanks @LunaRebirth for reporting. (Forum: http://irrlicht.sourceforge.net/forum/viewtopic.php?f=1&t=52297&p=303682#p303682)
- Scrollbar buttons can no longer get larger than half the ScrollBar element to avoid them overlapping.
- Add IVideoDriver::swapMaterialRenderers to allow swapping the renderer used to render a certain material.
- IMeshManipulator functions createMeshWith1TCoords, createMeshWith2TCoords and createMeshWithTangents no longer weld vertices while converting meshes. Use IMeshManipulator::createMeshWelded if you need that welding.
- Add ITerrainSceneNode::setFixedBorderLOD to handle connecting terrain nodes without gaps. Thanks @diho for the bugreport, testcase and a patch proposal (http://irrlicht.sourceforge.net/forum/viewtopic.php?f=9&t=51220).
- PLY loader now works with files which use "st" instead of "uv" for texture coordinates (like generated from Blender or Assimp). Thanks @JLouisB for patch (http://irrlicht.sourceforge.net/forum/viewtopic.php?f=9&t=52261).
- STL writer does now also write binary files when EMWF_WRITE_BINARY flag is used. Based on patch from JLouisB (http://irrlicht.sourceforge.net/forum/viewtopic.php?f=9&t=52261).
 (EMWF_WRITE_COMPRESSED also still works for downward compatibility)
- Improved PLY exporter. Thanks for Patch from JLouisB. (Forum: http://irrlicht.sourceforge.net/forum/viewtopic.php?f=9&t=52261):
  - Support for UV and vertex colors.
  - Support for binary PLY files export with the EMWF_WRITE_BINARY flag
  - Fix for the meshes with 32 bits index
- Fix wrong colors on big endian platforms with burnings renders. Thx @kas1e for reporting and @curaga for the patch (#318). Forum bug discussion at http://irrlicht.sourceforge.net/forum/viewtopic.php?f=7&t=52177.
- Fix bug #440 where OpenGL driver enabled second texture for single-texture materials when setMaterial was called twice. Thx@ "number Zero" for bugreport and test-case.
- Irrlicht icon now loaded with LR_DEFAULTSIZE to better support larger icon requests. Thx@ luthyr for report and bugfix.
- Cursor on X11 behaves now like on Win32 and doesn't try to clip positions to the window
- IImage::copyToWithAlpha has a new parameter to allow combining alpha value instead of replacing them. This uses new blitters called BLITTER_TEXTURE_COMBINE_ALPHA. Thx @chronologicaldot for providing this patch and @burningreggae for his feedback.
- Add _IRR_COMPILE_WITH_PARTICLES_ to control compilation of particle system
- Add IGUIImage::setDrawBackground to allow disabling background drawing even when no texture is set.
- Fix: IGUIContextMenu now raises sub-menu when they would otherwise be displayed below bottom-border of root gui element.
- Prevent initializing/quitting SDL several times when using more than one Irrlicht device.
- Reduce log-messages for "loaded texture" and "loaded mesh" from ELL_INFORMATION to ELL_DEBUG.
- Add IGUIButton::setOverrideColor to allow overriding text-color (same function as statictexts and editboxes have).
- Add functions IGUIButton::getClickShiftState and IGUIButton::getClickControlState to get shift/ctrl key-state when a button was clicked. Thanks @StarSonata for patch.
- Add function ISceneManager::clearAllRegisteredNodesForRendering.
- Add function IVideoDriver::queryTextureFormat to allow checking if a driver supports textures with a specific color format.
- ISceneManager::getMesh can now creates meshes with alternative cache-names.
- Lets the BSP loader find textures inserted with relative paths. Thx@ curaga for patch
- Slightly simplified ALLOC_STRATEGY_DOUBLE in arrays
- Add alternative BoundingBox calculation for BillboardSceneNode which can take in a camera node. Thx @Seven and @JacKDuRdEn for bugreports.
- FPS camera now supports keyboard rotation.
- Base FPS-camera movement on last position of mouse instead of always center (works better on platforms where cursor-placement is not allowed)
- Octrees with other vertex types than EVT_2TCOORDS can now also use VBO's.
- Add IOctreeSceneNode interface to control polygon clipping checks for octree scene nodes.
- Add support for different geometric primitives to meshbuffers. Thanks @gerdb for patch proposal (http://irrlicht.sourceforge.net/forum/viewtopic.php?f=7&t=45999)
- change SEvent::SUserEvent.UserData1 and SEvent::SUserEvent.UserData1 from s32 to size_t to avoid cutting numbers on some 64-bit platforms (SDL and Windows)
- Improve speed of draw3DBox (OpenGL and D3D9). Thanks @zerochen for patch (https://sourceforge.net/p/irrlicht/patches/256)
- Support more keys on OSX "[]\". Thanks @neoascetic for patch (#313).
- Fix IBillboardTextSceneNode::setTextColor which did nothing in the past. It now maps to setColor instead.
- Add access functions to IBillboardTextSceneNode (getText, getFont).
- Add access functions to ITextSceneNode (getText, getTextColor, setFont, getFont).
- Try harder to move Window to custom WindowPosition set in SIrrlichtCreationParameters on X11. Thx@ Hernan Ezequiel Di Giorgi for the patch (#304).
- Fix bug in virtual filessystem which prevented createFileList from working. Thx @Cube for reporting a problem.
- ITriangleSelector now can also return meshbuffer collision information.
- core::string::split now adds delimiter to token before delimiter when keepSeparators is true. That way we never end up with 2 tokens for an original string with a single character.
- Bugfix: SMesh::recalculateBoundingBox() does now ignore empty boundingboxes of meshbuffers instead of adding them.
- IIrrXMLReader::getAttributeValueAsInt and  IIrrXMLReader::getAttributeValueAsFloat can now return a custom default-value when the attribute is not found.
- core::string::split now handles ignoreEmptyTokens=false correct. Thanks @manni63 for bugreport: http://irrlicht.sourceforge.net/forum/viewtopic.php?f=7&t=51551&p=299375#p299375
- Bugfix: Previously when some material had a texture matrix and another didn't those materials were still considered identical. Which had prevented correct switching between materials with and without texture matrices.
- IWriteFile::write now returning size_t (like fwrite in c-lib). Also sizeToWrite parameter changed from u32 to size_t.
- IReadFile::read now returning size_t (like fread in c-lib). Also sizeToRead parameter changed from u32 to size_t.
- add clear function to strings.
- Collision manager now using const camera pointers.
- Several fixes for SceneNodeAnimatorCollisionResponse, based on http://irrlicht.sourceforge.net/forum/viewtopic.php?f=7&t=33098&p=290746
  Thanks to all people who reported and to JLouisB and kinkreet for the patches:
  - Gravity is now fps independent
  - Values of gravity now like documented (wasn't 1 unit = 1m before, had been 1m = current frames per second, so maybe 100 units = 1m).
    Note that jump-values for fps-camera must also change when adapting gravity!
    Several examples got adapted for new ranges.
  - Pausing timer now pauses animator. Also doesn't reset values anymore with pauses.
  - Clones no longer have 1000 times the gravity of original animator.
  - Should now be fps independent
- Speedup CTriangleSelector (mainly for animated meshes)
- CTriangleSelector now supports 32-bit meshbuffers. Thanks @Wol101 for reporting and patch-proposal.
- Fix: CTriangleSelector no longer resets it's boundingbox to 0,0,0 (was wrong when a meshbuffer was not around 0)
- Fix: Collada writer now uses wrap_p for third texture wrap value instead of invalid wrap_w (thx @Yoran for bugreport)
- Several getter functions in IAttributes made const (thx @Erik Schultheis for the patch)
- Fix: CTriangleSelector no longer ignores meshbuffer transformations from skinned meshes (thx @AlexAzazel for report and test-model).
- Randomizer now returns range 0..randMax as documented and no longer 1..randMax as it did before. randMax got reduced by 1.
  Note: You will generally get different numbers than before! If you need the exact old calculations, please check the corresponding sources in Irrlicht 1.8 in os.cpp/.h
- Resetting Randomizer with 0 or no longer breaks it (will be set to 1). Same for other numbers for which it wasn't defined.
- Add SMaterialLayer::TextureWrapW for cubemap texture wrap mode at W axis.
- Add cubemap texture support for D3D9 and OpenGL drivers.
- Do no longer re-calculate md2 frames when they don't change (thx @npc for reporting)
- Add multibyteToWString wrapper functions around mbstowcs which work with Irrlicht string class.
- Fix: addFileArchive now grab()'s the archive when you pass one in by pointer.
- Fix: Prevent division by 0 in CGUIScrollBar::setPos
- Fix: Add missing serialization to CSceneNodeAnimatorCameraFPS and CSceneNodeAnimatorCameraMaya
- Fix: File-open dialog now restores the original locale after modifying it internally
- Fix first calculation of the camerascenenode boundingsphere.
- Fix bug with ignored opening brace in .X files with DeclData section. Thx @Alin for bugreport and patch.
- Fix problem with OpenGL textures cache.
- Add clear buffer flags and marked some methods used for clear buffers as deprecated.
- Fix skinned meshes not playing their last frame. Also clarified animation documentation to describe current behavior more exactly.
- Add IWriteFile::flush interface (thx @ JLouisB for the patch).
- CLightSceneNode::updateAbsolutePosition does now light recalculations. This is to fix using animators with lights.
- Fix Collada export for objects with rotations around more than 1 axis.
- Add ISceneNodeAnimatorCameraMaya::setTargetMinDistance and getTargetMinDistance.
- Add override font to IGUITreeView
- CGUIComboBox now updates selection-list when font changes while it's open (thx @ rubixcuber for bugreport)
- CAnimatedMeshSceneNode::setMesh does now set the animation speed again to that of the mesh (had been changed in 1.7, but not for obvious reasons)
- .x meshloader regards now AnimTicksPerSecond (thx @qian for a test-model and bugreport)
- Interface getMeshType moved from IAnimatedMesh up to IMesh.
- Add b3d mesh-writer. Static writer written by Hendu, support for animated meshes added by JLouisB, testing and bugfixes by CuteAlien.
- Node-collision functions of SceneCollisionManager like getSceneNodeFromScreenCoordinatesBB will now ignore collisions against empty boundingboxes.
- Cameras return again an empty boundingbox (at 0,0,0) instead of returning the frustum boundingbox (was changed in very old Irrlicht version).
  You can access the frustum boundingbox through the frustum itself.
  This means cameras no longer show up in the node-collision of the SceneCollisionManager (showing up there because of their frustum bounding-box was too confusing).
- Fix problem in IrrlichtDevice::setResizable on X11 that caused window titlebars to hide occasionally under the taskbar in some systems (Ubuntu, Mint).
- Added new IRenderTarget interface.
- Replace the swprintf and snprintf defines by swprintf_irr and snprintf_irr to avoid conflicts with the standard libraries (and other libraries).
- XBox support removed as it would need DX8 (this was about the original XBox).
- Support for Direct3D 8 removed after svn revision 5052 due to lack of maintenance.
- _IRR_IMPLEMENT_MANAGED_MARSHALLING_BUGFIX removed. This was a bugfix for VS2003 (in combination with .NET) which we haven't supported in a while.
- VS 2005 support removed after svn revision 5048.
- WinCE 6 supported removed after svn revision 5046.
- NVidia CG support removed after svn revision 5045 due to lack of maintenance. NVidia has also stopped supporting this.
- TA burningvideo:
 enabled triangle fan again so that skybox works.[need more testmeshes if other trianglefan than skybox doesn't work]
 correct vc2013 project files for x64,static lib
 correct alphablend vs add [was broken]
- Add a new core::rect constructor which takes a dimension parameter and set's left-top to 0.
- mtl (obj) format reader and write now regards texture scaling and translation. (thx @thanhle for noticing and patch proposal).
- Added Visual Studio 2013 project files.
- Added new color formats: ECF_R8, ECF_R8G8, ECF_D16, ECF_D32, ECF_D24S8.
- Can now enable/disable background drawing for IGUITable.
- Bugfix: Cloning CBillboardSceneNode now copies colors and sizes.
- EditBox works now with numpad on X11
- Added helper functions for converting between wchar and utf-8. Patch provided by Hendu.
- Added sphere frustum culling support. Patch provided by Hendu.
- Fixed issues with setViewPort method under OpenGL. (reported by anontypist)
- Fixed several selection, highlighting and clipping bugs in CGUITreeview (thx @ AReichl for the patch + test)
- Removed DllMain from the static windows build (thx @ AReichl for reporting)
- Fixed maximize/minimize under Linux by supporting NETWM hints. Patch provided by hendu.
- ISceneNode::deserializeAttributes uses now old values for parameters which are not in the attributes (thx @entity for noticing).
- Add interface for easier access to scrollbars for IGUIListBox, IGUITreeView and IGUITable
- Fix serializing colors as strings. Was previously mixing up strings with number-arrays and hex color values. Now using hex color values always, but also fixed the the handling when it get's number-array strings.
- Fix IAttributes::setAttribute implementation for textures (did do nothing before).
- Added support for separate blending in OpenGL and D3D9 drivers.
- Added pack_textureBlendFuncSeparate and unpack_textureBlendFuncSeparate functions, which allow to use separate blending functions in OpenGL.
- Added BlendFactor field to SMaterial which allow user to set blending factor per SMaterial set call without use EMT_ONETEXTURE_BLEND type.
- Fixed issue with blending operation set to EBO_NONE and some transparent material types.
- Add a code profiler (stop-watch style)
- Add IGUITable::getItemHeight to access item (row) height
- Add override font to IGUITable
- IGUITable can now disable the active column.
- IGUIElement::getElementFromPoint now virtual
- Fixed issue with wrongly enabled Z-writing for transparent shader materials. Thanks Hendu for this fix.
- Allow more control over particle behavior. This also changed the default behavior.
- ISceneNodeAnimators can now be disabled and paused.
- Maya camera no longer get's stuck in "rotating" state when a mouse-up event is lost (thx @ JLouisB for reporting).
- Focus behavior of IGUIEnvironment now controllable (right-click focus, mouse-over focus). Disabled elements no longer get the focus unless users enforce it.
- Buttons can now now have 7 more image-states, 1 more sprite-state and the sprites are now scaleable.
- Spritebanks can now draw scaled sprites and are a little easier to use.
- Improved i18n key input for X11 (languages like cyrillic work now).
- Fix bug that ListBox would not allow to 'tab' to the next element (thx @ FlavourBoat for reporting)
- IGUIEnvironment::getNextElement now public (was only in CGUIEnvironment before).
- Add an overwrite mode to editbox. Patch provided by Adam(aka kingadami).
- Add IGUIImages::setDrawBounds/getDrawBounds to allow coding stuff like progress bars.
- Add IGUIImages::setSourceRect/getSourceRect to allow using only parts of an image (can also be used to mirror and scroll them).
- Dev-Cpp project file removed (wasn't really supported for some time already)
- Collada dae-loader now set's the vertex colors (thx @sf17k for report and test-models)
- IAttributes interface changed. Parameters are now passed by const-ref instead of per value.
- Fix c::b project obj folder names. Some static builds had used the shared folders (thx @ gerdb for reporting)
- Add ITexture::getSource which can be used to check where the last IVideoDriver::getTexture call found the texture.
- Add IMeshTextureLoader interface and replace texture-loading algorithms in most meshloaders.
- CGUICheckBox no longer gives up focus on EMIE_LMOUSE_LEFT_UP (thx @Demre and @REDDemon for reporting)
- Bugfix: IGUIElement::addChild now prevents setting an element as it's own child.
- GUI editor improvements (prevent crash, improve UI)
- Add IrrlichtDevice::setWindowSize.
- Bugfix: getFont for xml-fonts now also works for fonts inside archives (thx @Neirdan for bugreport)
- Added function irr::core::mergeFilename
- Add ISceneNodeAnimator::setStartTime/getStartTime to allow resetting movement animators.
- Improve speed for finalizing skinned meshes (removal of unnecessary frames after loading) (thx @ichtyander for the testmodel)
- Collada loader now instantiates camera nodes which had been ignore so far (thx @NemoStein for the test .dae)
- line2d::intersectWith has a new parameter to allow ignoring intersections with coincident lines
- vector2d::equals now has an tolerance parameter for passing the epsilon (like vector3d had). Note that this changes the default
  behavior of vector2d::equals as well as functions using it like the operators for ==, !=, <, >, <=, >= when using vector2d with f64
  as the tolerance is increased in that case (for f32 and integer values it shouldn't make any difference).
- Material renderers which offers blending feature (eg. EMT_TRANSPARENT_ALPHA_CHANNEL, EMT_ONETEXTURE_BLEND etc.) require SMaterial::BlendOperation set to other value than EBO_NONE.
- Removed support for built-in T&L variables in ASM/GLSL shaders (variables related to vertices eg. gl_MultiTexCoord0 are still supported). This change allow us to reduce CPU overhead in shader material renderers.
- IGUIEnvironment::hasFocus has now a parameter checkSubElements as subelements are usually seen as part of an element. Default unfortunately must be false due to backward compatibility.
- Add IGUIElement::isTrulyVisible which works like ISceneNode::isTrulyVisible and checks for parent visibility as well.
- Improved DDS loader and added support for DXTn (DXT1-5) compressed textures in OpenGL and Direct3D9 drivers.
- Add function ISceneNode::getTransformedBoundingBoxEdges.
- Improve automatic compiling under Solaris (proposed by curaga)
- Add in IGUICheckBox: setDrawBackground, isDrawBackgroundEnabled, setDrawBorder, isDrawBorderEnabled
- IGUISpinBox now passes on the EGET_BUTTON_CLICKED, EGET_EDITBOX_CHANGED and EGET_EDITBOX_ENTER events from it's sub-elements.
- IGUISpinBox no longer validates values after each character type but only on KEY_ENTER and when losing focus. New behavior can be set with IGUISpinBox::setValidateOn
- IAttributes::getAttributeAs functions now can have a customizable default-parameter to return when attributeName is not found
- Added ECFN_DISABLED value (it works like ECFN_NEVER worked before) and changed ECFN_NEVER behaviour
  (it works like its equivalent value in OpenGL/Direct3D).
- Removed boolean interface from IShaderConstantSetCallBack, please use integer interface instead of them.
- Add a LeakHunter class which can be enabled with compile-flag _IRR_COMPILE_WITH_LEAK_HUNTER_ to find leaking IReferenceCounted objects.
- Add _IRR_COMPILE_WITH_XML_ define to allow compiling Irrlicht without xml (patch written by curaga)
- Add functions to set/get cursor character and blinktime to IGUIEditBox
- Collada exporter calculates values for orthographic camera now on export
- Collada exporter now exports the camera up-vector correctly.
- Add IColladaMeshWriter::findGeometryNameForNode
- Add getters IGUIButton::isDrawBorderEnabled and IGUIButton::isDrawBackgroundEnabled

-  changed CSkyBoxSceneNode to drawIndexedTriangleList instead of drawIndexedTriangleFan (because software renderers don't have fans.. and i needed the demo functionable)
- added x64 to vs2008 project ( buildAllExamples_v9 ) [paths: obj64, win64-visualstudio]
- burningvideo: getMaxTextureSize adjusted [ changed meaning of SOFTWARE_DRIVER_2_TEXTURE_MAXSIZE
- burningvideo: mipmaplevel adjusted ( not that bad bokeh...(sometimes) )

--------------------------
Changes in 1.8.5
 - Update script to generate tutorial.html's in example folders. Add missing ones. Update existing ones. Thanks @Guillian J for noticing those were outdated.
 - Update libpng to 1.6.37 (from 1.6.23)
 - Fix CIrrDeviceSDL::getVideoModeList which didn't return video modes before. Thx @kas1e for report and patch.
 - CIrrDeviceMacOSX now sets the SEvent.MouseInput Shift and Control values on mouse events like the other devices. Thanks @ Zero King  for patch (#321)
 - isWindowFocused in IrrDeviceSDL device now returns the input focus like the other devices. Before it was returning a mouse-over-window state.
 - Prevent SDL device from dropping OpenGL resources on Win32 when setResizable was called with OpenGL driver. Thanks @ kas1e for reporting (http://irrlicht.sourceforge.net/forum/viewtopic.php?f=7&t=52083&start=0)
   And thanks to http://www.bytehazard.com/articles/sdlres.html for the workaround.
 - Fix isWindowActive when using SDL device. Before it was only active when the mouse was over the window. Thanks @ kas1e for reporting (http://irrlicht.sourceforge.net/forum/viewtopic.php?f=7&t=52083&start=0)
 - Fix SViewFrustum::clipLine. Was before clipping at wrong points (inverse places along lines).
 - Fix compilation on OSX and prevent capturing mouse cursor when Window is not on top (Patch #319)
   Thanks at Artem Shoobovych for bugreport and patch (https://sourceforge.net/p/irrlicht/patches/319/)
 - Fix serialization of OverrideTextColorEnabled flag in CGUITab. Thanks @ chronologicaldot for reporting (http://irrlicht.sourceforge.net/forum/viewtopic.php?f=7&t=52344&p=303891#p303891)
 - CFileSystem::getAbsolutePath no longer wrongly converts an empty filename to "/" on unix platforms.
   This fixes the bug that CFileSystem::createAndOpenFile("") returned a (strange behaving) non-null file pointer.
   Additional check also added in createAndOpenFile to early out on empty names.
 - Fix bug in cursor positions when compiled with newer Windows SDK's (v110 in VS2012) and running on Systems >= Windows Vista in windowed mode.
   Thanks @Mustapha Tachouct for the bugreport and patch proposal. Also thanks @BakeMyCake for an earlier report.
 - IOSOperator::getSysteMemory() no longer returns incorrect values with >2GB. Thanks @Eduline - human development for report and patch.
 - Increase KEY_KEY_CODES_COUNT to fix problem with laptop keyboards which return the keycode 0xff for the function key. Thx @Klokancz for bugreport and patch.
 - Fix bug when calling activateJoysticks on windows several times. It had appened joystick information instead of replacing it, thereby increasing joystick number on each call.
   Only happened compiling with _IRR_COMPILE_WITH_DIRECTINPUT_JOYSTICK_ (which is the default). Linux and SDL implementation not affected.
   Thx @Andrea Demetrio for the bugreport.
 - Fix bug in fast_atof when reading floating point numbers with more than 16 digits past the dot. Those produced completely wrong results (sometimes even causing INF numbers).
   This bug also did cause many meshloaders to have problems with certain meshes (basically all text-based formats are affected).
 - Accuracy of fast_atof is back to older Irrlicht versions (fixes test warnings, usually not a noticable problem).
 - Fix crash in eventhandling when calling remove() on a contextmenu while it has focus.
 - CImageLoaderJPG::isALoadableFileFormat uses a test which allows to load more jpg formats (for example uncompressed jpg's). Thx @Yaron Cohen-Tal for report, test-image and his help with the patch.

--------------------------
Changes in 1.8.4 (9th July 2016, svn r5321)
 - Tests on Unix now have a short pause between switching drivers to avoid certain X11 errors.
 - Fix CEnumAttribute::getInt() which could crash  (thx @ luthyr for reporting)
 - No longer try to run tests for drivers not supported on a platform
 - Update lights and renderTargetTexture tests to work with Windows 10 (can't have so tiny Windows anymore).
 - Deprecate CMatrix4::transformBox as the result is no longer a boundingbox. Use CMatrix4::transformBoxEx instead (which has been available for a long time).
 - Fix CSceneCollisionManager::getPickedNodeBB which could sometimes miss collisions.
 - Add -U__STRICT_ANSI__ option to c::b project files to allow compiling with -std=c++11 and add an error when trying to compile with Irrlicht with __STRICT_ANSI__
 - Update libpng to 1.6.23
 - Update zlib to 1.2.8
 - Fix some compile warnings in aes which got handled as errors by some c++11 compilers.
 - Get rid of some misleading-indentation warnings in gcc6
 - Fix serialization of the InputReceiverEnabled flag in CCameraSceneNode
 - Fix pasting text from X11 applications to Irrlicht. Thanks @est31 for the patch.
 - Tests give now a warning when stabilizing screenshots failed. Aslo trying more often now (a hack as taking screenshots otherwise fails often in windowed mode on some systems).

--------------------------
Changes in 1.8.3 (13.9.2015)
 - Fix the fix for compiling on GCC5 (thanks to est31 for report and patch)

--------------------------
Changes in 1.8.2 (30.8.2015)

 - Add VS2013 project files
 - Fix compiling with IRR_LINUX_XCURSOR_
 - Fix compiling with NO_IRR_COMPILE_WITH_LIBJPEG_  (thx to anontypist for report and patch).
 - Fix compiling on GCC5 on MinGW (thanks to Slipxy for finding the bug and to osense for reporting it).
 - Fix loading of .X and .B3D models with non-normalized quaternion rotations (thanks to JLouisB for a test-model).
 - Fix compiling on Free BSD (thanks to leper for reporting and patch)
 - Fix bug with multiple SetPixelFormat calls. (reported and fixed by anontypist)
 - Fix bug related to memory release in PNG image loader. Thanks elephoenix for it.
 - Fix crash in CGUIListBox when users pressed end key folled by any other key in an empty, focused list box (thanks at porcus for report and patch).
 - Fix use of enabling defines for wal2 (halflife) image loader. Thanks to hendu for noticing.
 - Fix userClipPlane test by inserting the stabilizeScreenBackground call
 - Demo enables antialiasing now correct (thanks to Mel for noticing).
 - Update glext.h (bug #429)
 - Example 22 no longer select a random texture after loading a new texture (thanks at mongoose7 for reporting).
 - Fix bug in IGUISkin serialization which messed up serialization of the button-pressed offsets (thanks at Midnight for reporting).
 - IGUIStaticText::getTextHeight returns now the correct height for texts with newlines even WordWrap is not set.
 - Crashfix for CGUIEditBox. CGUIEditBox::setMultiLine must break text when changed or other functions like getTextDimension can crash afterward for strings with newline characters.
 - CGUIEditBox and the GUI-Editor now convert pasted text correctly using mbstowcs.
 - C::B project files work again on newer Linux-distributions which have cleaned up their dev-lib dependencies.
 - Makefile for the new IrrFontTool links now correctly to libfontconfig

--------------------------
Changes in 1.8.1 (17.11.2013)

 - Improved OpenGL performance under OSX (Thanks devonsoft for reporting).
 - Fixed OSX compilation issues.
 - [KNOWN BUG] Software driver doesn't work properly under OSX 10.9.
 - For speed improvement the following attributes accessible by ISceneManager::getParameters() are no longer updated in release:
   "culled", "calls", "drawn_solid", "drawn_transparent", "drawn_transparent_effect".
   They can be enabled by compiling Irrlicht with the define _IRR_SCENEMANAGER_DEBUG.
   Thanks @hendu for reporting, see http://irrlicht.sourceforge.net/forum/viewtopic.php?f=2&t=48211 for the discussion.
 - Fix compile problem with CIrrDeviceSDL on VS2008 (and maybe other systems). Thanks @HellFlip for reporting.
 - Fix quaternion::rotationFromTo() (Thanks @takamoto for reporting)
 - Fix iszero for s64 (Thanks @chronologicaldot for reporting)
 - Fix crash in SoftwareDriver2 when Material was EMT_DETAIL_MAP but texture[1] was not set (Thanks for fix by chronologicaldot)
 - Fix buffer overrun in x-loader (Thanks for fix by Otaka)
 - Fix cursor visibility update problem under Windows 8 (Thanks @luthyr for reporting)
 - Fix irredit links in loadScene/saveScene docs.
 - Fix issue in CAnimatedMeshSceneNode::clone which caused a crash. (reported and fixed by luthyr)
 - Fix compiling errors for c++ builder (thx @Greatwolf for many patches and @cfanderek for reminding)
 - Initialized IColladaMeshWriter::GeometryWriting which was uninitialized.
 - Fix linker trouble with irr::core::equalsByUl when compiling Irrlicht as managed code (thx @  Memorial76 for a report + testcase)
 - Fix crashes in CCubeSceneNode::clone and CSphereSceneNode::clone (reported by  marsupial)
 - Fix the clipping in the listbox drawing which was only showing the right line of the sunken pane (reported by Mloren and Abraxas).
 - Initialize slider in example 05 correct (reported by Zerochen)
 - Fix crash in CMeshSceneNode::clone when the mesh had no shadow (reported by  christianclavet, bug-fix found by Nadro)

--------------------------
Changes in 1.8 (7.11.2012)

 - Let sphere mesh use full opaque color, just as all the other ones do

 - Gcc on Win32 (MinGW) now also works with the _w file access functions when compiled with _IRR_WCHAR_FILESYSTEM. (thx @ alexzk for reporting compile troubles)

 - Fix a bunch of off-by one errors in irr::core::string in functions equals_substring_ignore_case, findFirst, findFirstChar, findNext, findLast, findLastChar, replace, remove and removeChars.
   This prevents some potential memory access errors, find functions no longer try to find the \0, replace no longer replaces the \0 and remove no longer tries to remove it (which did remove the last character instead).

 - matrix4::setRotationAxisRadians added

 - user clipplanes fixed

 - Skip rendering of lines, points, and polygons, as these lead to crahses due to wrong access to the vertex lists. A fix would need major rewrite of the vertex cache, or at least some other render methods.

 - Add mipmap generation for makeColorKeyTexture

 - Add another saveScene overload which allows to pass in a user-created XMLWriter. Patch suggested by eversilver.

 - quaternion conversions to and from matrix4 no longer invert rotations.
   To test if your code was affected by this you can set IRR_TEST_BROKEN_QUATERNION_USE in quaternion.h and try to compile your application.
   Then on all compile-errors when you pass the matrix to the quaternion you can replace the matrix with the transposed matrix.
   For all errors you get on getMatrix() you can use quaternion::getMatrix_transposed instead.

 - CGUIEnvironment::loadGui - loading a gui into a target-element no longer messes up when the gui-file contained guienvironment serialization.

 - Colladawriter now exports materials per node when those are used in Irrlicht

 - Colladawriter now writing matrices for node transformations as old solution did not work with CDummyTransformationSceneNode's.

 - Colladawriter no longer create an extra node for the scenemanger as <visual_scene> has that job in Collada.

 - Colladwriter no longer makes all Scenenodes children of ambient-light as that can be parallel on the same layer instead.

 - Colladareader now creates the ambient-light correct instead of creating a point-light for it.

 - Add new parameter to array reallocate function. This prevents a reallocation in case the array would become smaller. As the reallocation operation is quite time consuming, this can be avoided on request now, on the expense of more memory consumption.

 - Add IAnimatedMeshSceneNode::getLoopMode (asked for by JLouisB)

 - CSceneNodeAnimatorCameraFPS now resets the key-input when it was disabled (thx @ gerdb for reporting and patch-proposal)

 - Properly destroy OpenGL resources on linux (thx @curaga for the patch)

 - Fix diplay bux in the attribute-panel of the GUIEditor. Fixes bug 3517314 (thx @Darkcoder  for reporting).

 - Allow caching cursor position on X11 to work around slow XQueryPointer calls (thx @Hendu for reporting+patch proposal)

 - Make sure after EGET_EDITBOX_ENTER and EGET_COMBO_BOX_CHANGED event processing no more code is executed for the corresponding editbox or combobox objects to allow clearing the environment on those actions (see comments on bug-id 2995838).

 - Fix string::replace which failed replacing substrings at the end when the replacement was longer

 - Struct packing works now with gcc 4.7 changes on MinGW (thx @Sudi for reporting).

 - Struct packing uses now same solution throughout (by including headers in corresponding places)

 - User can now set characters used for decimal point in fast_atof for localisation.

 - Add parameter useAlphaChannel to second IGUIEnvironment::addImage function.

 - Get rid of unnecessary warning "Could not load sprite bank because the file does not exist" for "#defaultfont".

 - Fix MRT disabling. Bug found and fixed by hendu.

 - core:::array::reallocate returning now immediately when it has nothing to do. Should reduce a lot of memory thrashing on irrArrays.

 - Start mesh animations at first OnAnimate , before start-frame was rather random.  Thx @Auria for reporting and patch proposal.

 - renderTargetTexture now working with ECF_R5G6B5

 - add -fPic in c::b linux fast math shared build.

 - Fix by Auria for starting the animated meshes only at first OnAnimate instead of at random times and animation frames.

 - Add support for MAX_COMBINED_TEXTURES, which allows more texture support than with the original fixed pipeline texture check under OpenGL. Now, more than 4 textures should also work with newer gfx cards and drivers, which often only support 4 fixed pipeline textures.

 - triangle3d::isPointInsideFast now using some epsilon to catch all points on the borders.

 - triangle3d::getIntersectionOfPlaneWithLine calculates now with higher precision for more exact results.

 - triangle3d::isOnSameSide (used by isPointInside) calculates now with higher precision and uses some epsilon to make it work with larger integers and less floating point troubles. Slightly slower now.

 - new function equalsByUlp to test for spacing between floating point numbers.

 - speedup for collada writing.

 - speedup for xml-writing.

 - Fix 8bit grey image TGAs, which were not working due to missing palette. Also switched to RGB8 format, as otherwise a loss in precision would occur. Thanks to Klunk for the error report and a test image.

 - fixed issues with a D3D driver and Aero effects.

 - Fix font-drawing in CGUIButton to use EGDF_BUTTON again (thx @DJLinux for reporting).

 - Add texture cache with proper reference handling. This avoids deletion of textures while still being active on the GPU. Test case and fix by m(att)giuca

 - CFileSystem::removeFileArchive now checking for normalized path

 - Fix zip's with passwords on 64-bit systems (thx @ Dr. Gladman for writing the bugfix)

 - replace asserts in tests with macro assert_log to allow running all tests through on problems.

 - added IGUIElement::setName and IGUIElement::getName (similar to ISceneNode)

 - irr::s64 support

 - line2d::getClosestPoint can now also get the closest point on the line additional to only checking for closest point on the line-segment.

 - avoid division by zero in line2d::getClosestPoint when start- and endpoint are identical

 - Support for sw drivers under OSX

 - Fix font-loading which got broken by fixed xml-loading. Thanks @ pc0de for finding and providing a test and patch.

 - Don't crash draw2DSpriteBatch when it get's no textures.

 - Add support for int passing in setShaderConstant

 - Support for better collada texture wrapping support on loading.

 - Fix for render context change where only the window id is given. We now try to change only the window ID, keeping context and display unchanged. Suggestion by vovo4ka from the forum.

 - XML-reader now ignores all whitespace-only EXN_TEXT elements as old way didn't work in cross-platform way (and arguably also not well on Windows).

 - CXMLReader initializes IsEmptyElement now.

 - line2d::intersectWith and and line2d::getClosestPoint work now also with integers.


 - line2d::intersectWith and and line2d::getClosestPoint work now also with integers.

 - line2d::getMiddle and line3d::getMiddle work now also with integers. But can be slower for compilers which are not optimizing division by 2 to multiplication by 0.5 for floats.

 - Add Nadro's initial Cg support. Example 10 is enhanced to allow also Cg shaders.

 - Add mipmap support from FBO extension, patch by Nadro.

 - Add vertex optimization algorithm submitted by curaga

 - rename texureBlend functions to textureBlend

 - Add threshold for slerp calculation, switching between linear and slerp at this point.

 - Fix for bug 3401933 - vertex color interpolation with shadow volumes in the scene

 - Fixed bug in button sprites reported by RdR

 - Fixed button state sprite animations for pressed, focused and hovered.

 - Added serialization for terrain smooth factor, patch by RdR

 - Implemented more button states for sprite banks, patch submitted by RdR

 - Add IGUIEnvironment::getHovered to get the element most recently known to be under the mouse cursor

 - Add FPS settings for animated meshes, which allows to push animation speed from files to Irrlicht animation system

 - Maya camera updates

 - Add support for bsp brush entities. Written by Hendu.

 - weighted normals recalculation fixed

 - Billboard improvements

 - API docs updates

 - triangle selector improvements

 - OSX improvements by Auria

 - Add new methods for adding and removing file archives based on ifilearchive pointers.

 - Add getBackgroundColor, isDrawBackgroundEnabled and isDrawBorderEnabled to IGUIStaticText (thx 4 patch from Nalin).

 - Reduction of multiple skinning the same mesh and frame in one render cycle

 - Added ISceneNodeAnimatorCameraFPS::getKeyMap and a new ISceneNodeAnimatorCameraFPS::setKeyMap.

 - CSceneNodeAnimatorCameraFPS uses now SKeyMap instead of SCamKeyMap (structs were identical which was confusing and there wasn't any explanation in comments, so I decided to simplify it).

 - Add some workaround to MeshViewer to show how we can currently fix the FPS-cam when users to alt-tab while moving. We can improve that some day when we have focus-events, but this works for now.

 - Fix LZMA decompression

 - Ply normal fixes

 - HW buffers only support rendering with both vertex and index buffers

 - Enables VBOs for water node

 - Octree support for non-standard vertex meshes

 - Fix rotationFromTo

 - Added ConstIterator

 - Fix for getScreenCoordinatesFrom3DPosition to use proper RTT sizes

 - Add IGUIComboBox::setMaxSelectionRows and IGUIComboBox::getMaxSelectionRows

 - Scenemanager switches from type ESNT_UNKNOWN to type ESNT_SCENE_MANAGER.

 - Add getActiveFont to all elements which have setOverrideFont for cleaner code

 - Add getOverrideFont to all elements which have setOverrideFont to have a consistent interface

 - IGUIEditBox: added missing serialization for Border

 - IGUIEditBox: remove bug that added spaces to the end of each line

 - IGUIEditBox: fix crash that happened when wordwrapping was enabled, spaces were entered beyond the border and then cursor-key was pressed.

 - IGUIEditBox::setDrawBackground added.

 - CGUISkin::draw3DSunkenPane no longer ignores fillBackGround in non-flat mode. Also borderlines are no longer drawn overlapping to avoid ugly corners.

 - CDummyTransformationSceneNode::clone() added.

 - IParticleSystemSceneNode::doParticleSystem now public to allow rendering outside scenegraph.

 - getRelativeFilenames updates and fixes

 - Renamed IOSOperator::getOperationSystemVersion to getOperatingSystemVersion. Changed return type from wchar_t to core::stringc, as that's the internal representation the name is built on.

 - Added IGUITabControl::insertTab, IGUITabControl::removeTab, IGUITabControl::clear and IGUITabControl::getTabAt

 - Add 32bit support to some mesh manipulator methods

 - Fix mipmap locking under OpenGL

 - Improvement of screenshot function to support more color formats and targets

 - getAngle fix to avoid NaNs

 - Available gfx memory output in log messages

 - Improved 2d render settings and caching

 - Initial suppport for sRGB render functions

 - Improved terrain scene node rendering

 - Paletted png image support fixed

 - Gamma settings in image loaders improved

 - Support for relative filenames in serialization

 - Access to selectors inside meta selectors implemented

 - DirectInput joystick support

 - Support for scaling with draw2dimage with burnings video

 - More gl extensions have correctly initialised return values

 - Some fixes for quaternion to euler function

 - Properly return nullptr if RTT creation fails on low levels

 - Added IGUIListBox::getItemAt

 - Add more image formats tried to load by q3 level loader

 - Add fast_atof improvements from assimp, also strtoul10 method

 - Add blend equation function for MRTs

 - Add new material fields for blend operation and polygon offset (depth bias).

 - Reorder texture stage assignments

 - Improved VSync handling

 - Fix Ogre loader for materials with more than one texture

 - Fix createMeshCopy material handling

 - Framework target for OSX project added

 - Terrain scene node fixes

 - Fix HSL color class

 - Fix color selection GUI element

 - Transparency issues in particle system fixed

 - Particle sphere emitter rand values fixed

 - Support Unicode SHY dynamic hypen in word wrap

 - Fix OBJ reader sometimes running over EOF

 - Added IGUITable::getColumnWidth

 - Billboard text animates in OnAnimate now

 - Fix mountpoint reader to properly sync file names and firectories

 - Added the ability to open an archive from an IReadFile*, added a FileToHeader tool with instructions of how to make a portable app that consists of a single executable file.

 - Added suppport for right-to-left (RTL) text, supplied by Auria from STK

 - Added ISceneManager::createSceneNodeAnimator to create animators by name

 - The Makefile now creates a symlink from the soname to the binary name during install. Binary compatibility is only confirmed between same minor releases.

 - Added SMF mesh loader, loads meshes from 3D World Studio. Originally written by Joseph Ellis

 - The loader selection process now consistently checks loader lists in reverse order, so new loaders added to Irrlicht override the internal ones. This applies when adding external mesh, image, scene and archive loaders, image writers, plus node, animator and GUI element factories.

 - Added getters to retrieve mesh, scene and archive loaders.

 - Added ISceneLoader interface and .irr loader. Users can now add their own scene loaders to the scene manager and use them by calling loadScene.

 - Renamed IGUIElement::bringToBack to sendToBack, like in Windows

 - Send EGET_ELEMENT_CLOSED event when context menus should be closed (thx @ Mloren for reporting).

 - Added treeview to GUI editor, provided by Armen

 - Added root type for GUI environment

 - zip archive fixes: Fix directory tags in file list. Fix loading of stream zip files which have file sizes only in the central directory.

 - Fixed panel scrollbars in GUI editor, reported by Armen

 - Fix b3d loading of files with mixed mesh/bone sections.

 - Fix particle emitters which used integer random numbers so far. The distributions of the particles should be much better (and the code also somewhat faster) now.

 - Add new random method frand: Returns a random number in the interval [0..1] and gives better distributions than using fmodf on the integer number.

 - Add node parameter to saveScene and loadScene. saveScene saves the given node and all descendants to the file (if 0, the full scene is saved as before). loadScene loads all elements of the scene as childs of the given node. As before, 0 would load the file on the top level (scenemanager).

 - Add method to make a filename relative to a given directory.

 - Fix setMesh to correctly update the joints cache.

 - Fix setting transition time of skinned meshes back to 0.

 - Add some getters to IGUIImage: getImage, getColor

 - Fix OpenGL FBODepthTexture to create less overhead

 - Fix MRT disabling under OpenGL

 - API change: Added write only lock mode for textures. The lock method has changed the signature and uses an enum parameter now instead of a bool. The default is still to lock for read/write (previously 'false'). The old 'true' value should be replaced by ETLM_READ_ONLY.

 - Speedup deleting of particles

 - Add function IParticleSystemSceneNode::clearParticles

 - Fix RTT render states under OpenGL

 - Fix AntiAliasing setup under Windows/OpenGL in case no AA is available

 - Fix transformation matrices when RTT used

 - API change: getScreenCoordinatesFrom3DPosition has a new parameter, which needs to be set to true to get the original behavior. Now, the method returns coordinates which would fit as render coordinates of a currently enabled viewport. With the parameter set to true the result would fit only after the viewport is reset to full window rendering.

 - More checks for Stencilbuffer

 - Improve render state resets

 - Fix MRT handling

 - Fix file search

 - Add flag and method to disable clipping of the text to the gui element rectangle in GUI static text.

 - addShadowVolumeSceneNode now replaces an existing shadow. One should avoid to call this method multiple times without changing any parameter, as it is quite time consuming and cannot recognize the duplicate calls.

 - Add function IGUIEnvironment::removeFont (TODO: Does not remove the texture from cache so far)

 - Fixed mem leak in mountfilesystem

 - Update to libjpeg 8b, zlib 1.2.5, bzip2 1.0.6, libpng 1.4.4 and lzma from 9.20 SDK

 - Functions in IMeshCache expecting IAnimatedMesh* parameters removed as similar functions with IMesh* can be used since a while. Fixes also problems when IAnimatedMesh* got upcasted to IMesh*. (thx @ Greenya for reporting)

 - Fix blend states for MRTs

 - 64bit targets for MSVC added

 - The following functions will now use a "ISceneNode *" instead of a "const ISceneNode *":
   ITriangleSelector::getSceneNodeForTriangle, ISceneNodeAnimatorCollisionResponse::getCollisionNode, ISceneCollisionManager::getCollisionPoint and ISceneCollisionManager::getCollisionResultPosition.
   As collision functions often are followed by changing node positions users where so far forced to using const_casts (found by Greenya).

 - Add vector3d::getAs3Values (patch provided by slavik262)

 - Add function to SViewFrustum to get corners of the near plane (patch provided by Matt Kline, aka slavik262)

 - ParticleFadeOutAffector::setFadeOutTime can no longer be set to invalid values

 - ParticleFadeOutAffector uses now throughout u32 for fadeOutTime (found by greenya)

 - Add missing access function CParticleSystemSceneNode::getAffectors() (seen by B@z)

 - Add missing setters/getters for particle emitters (seen by B@z)

 - Compile-defines can now be disabled from Makefiles/Projectfiles instead of having to change IrrCompileConfig.h each time.

 - IGUITabControl::setActiveTab should only take IGUITab* and not IGUIElement* (thx to greenya for finding)

 - Add new skin-colors: EGDC_GRAY_WINDOW_SYMBOL, EGDC_EDITABLE, EGDC_GRAY_EDITABLE, EGDC_FOCUSED_EDITABLE

 - Disabled state is now extended to sub-elements

 - Make disabled state for several elements more visible

 - Bugfix: Icons in tabcontrol get now affected immediately by skin-changes

 - Proper cleanup if visual not created

 - XML reader bugfix

 - Disable mipmaps in 2d mode everywhere

 - Add xml example written by Yoran Bosman.

 - Fix cursor cleanup under Linux when using multiple devices

 - Fix collada parser

 - Fix MRT reset under D3D

 - Add a generic attribute interface for querying video driver attributes which are not necessarily of type bool. This interface allows to check certain supported features, such as the number of user clip planes, supported lights and textures, MRTs, and other things. The interface might change in the future, but it's fully functional already. The supported attributes are listed in the API docs of the function:
The following names can be queried for the given types:
		* MaxTextures (int) The maximum number of simultaneous textures supported by the driver. This can be less than the supported number of textures of the driver. Use _IRR_MATERIAL_MAX_TEXTURES_ to adapt the number.
		* MaxSupportedTextures (int) The maximum number of simultaneous textures supported by the fixed function pipeline of the (hw) driver. The actual supported number of textures supported by the engine can be lower.
		* MaxLights (int) Number of hardware lights supported in the fixed function pipeline of the driver, typically 6-8. Use light manager or deferred shading for more.
		* MaxAnisotropy (int) Number of anisotropy levels supported for filtering. At least 1, max is typically at 16 or 32.
		* MaxUserClipPlanes (int) Number of additional clip planes, which can be set by the user via dedicated driver methods.
		* MaxAuxBuffers (int) Special render buffers, which are currently not really usable inside Irrlicht. Only supported by OpenGL
		* MaxMultipleRenderTargets (int) Number of render targets which can be bound simultaneously. Rendering to MRTs is done via shaders.
		* MaxIndices (int) Number of indices which can be used in one render call (i.e. one mesh buffer).
		* MaxTextureSize (int) Dimension that a texture may have, both in width and height.
		* MaxGeometryVerticesOut (int) Number of vertices the geometry shader can output in one pass. Only OpenGL so far.
		* MaxTextureLODBias (float) Maximum value for LOD bias. Is usually at around 16, but can be lower on some systems.
		* Version (int) Version of the driver. Should be Major*100+Minor
		* ShaderLanguageVersion (int) Version of the high level shader language. Should be Major*100+Minor.

 - Fix getRotationDegrees

 - Add creation parameter which allows to disable highres timers on Windows upon device creation.

 - Several transparency setup bugs fixed. Now, alpha_vertex_blend uses proper alpha blending instead of a mixed add/alpha blending.

 - Added a method to get real time and date in a human readable struct

 - Fix add folder archives method to support files without trailing slashes.

 - fix transparent_reflection_2_layers

 - Add support for MSVC 2010

 - Fix "unsupported format" warning on RTT usage

 - Add IGUIElement::bringToBack (patch written by DtD, although I'm to blame for the function-name)

 - BurningVideo
   - add Normalmap Rendering (one light only), pushed Burningvideo to 0.46
   - add Stencil Shadow Rendering (one color only and 32 bit only),
     pushed Burningvideo to 0.47
   - internal vertexformat changed
   - changed fixpoint from 9 to 10 bit fract resolution
   - renamed createBurningVideoDriver to createBurningVideoDriver and uses SIrrlichtCreationParameters like opengl
   - internal interfaces for the trianglerenders unified.

 - Example 11, changed the light billboards to use the light color.
   allow to disable the bump/parallax on the earth like in the room ( with transparency )

 - added DDS Image files, DXT2, DXT3, DXT4, DXT5, based on code from nvidia and Randy Reddig

 - added Halflife 1 Model Loader (based on code by Fabio Concas)
   Halflife 1.1.0.8, Counter-Strike 1.6 working
   -> Load all Textures ( can even optimize it to texture atlas ), all bone animation, all submodels.
   -> But to make use of the values (named animation, mouth animation)
      the Interface for IAnimatedMeshSceneNode has to be redone.

   TODO:
   ->can handle float frames numbers, the interface for getMesh should be reworked
   This is my idea of a new getMesh interface for IAnimatedMesh

   //! Returns the IMesh interface for a frame.
   /** \param frameA: Frame number as zero based index.
   The Blend Factor is in the fractional part of frameA
   The Mesh will be calculated as
    frame = integer(frameA) * (1-fractional(frameA )) + frameB * fractional(frameA)
    FrameNr  KeyFrameA   KeyFrameB
    40.0  1   0
    40.1  0.9   0.1
    40.5  0.5   0.5
    40.9  0.1   0.9
    41.0  0   1
   \param frameB: Frame number as zero based index. The other KeyFrame which is blended with FrameA.
   \param userParam: for Example Level of detail, or something else
   */
   virtual IMesh* getMesh(f32 frameA, s32 frameB = 0,s32 param = 0) = 0;

   For now i used the (unused, always 255) detail level parameter and set a blend percentage as
   s32 frameNr = (s32) getFrameNr();
   s32 frameBlend = (s32) (core::fract ( getFrameNr() ) * 1000.f);
   return Mesh->getMesh(frameNr, frameBlend, StartFrame, EndFrame);

   So no interface is affected.

   -> TODO: Quaternion Rotation is done private hand made and should be done with irrlicht quaternions

 - Included 357kb Yodan.mdl mesh and copyright info file from Doug Hillyer
   to the media directory, used in example 7. collision as 4th model.

 - added Halflife 1 Texture Loader
   Valve uses WAL archive types like quake2. textures are inside model files
   I reworked the existing ImageloaderWAL and added named Halflife textures to wal2 ( they have no extension )
   and an LMP (palette/texture) loader into the same file (all using 32bit now)

 - added WAD Archive Loader (Quake2 (WAL2) and Halflife (WAL3) are supported)

 - CFileList
   added Offset Parameter to SFileListEntry and removed the private array from the archive loaders.
   CFileList::addItem now uses automatic incremental id if id = 0

 - added void splitFilename, splits a path into components

 - added parameter make_lower to substring ( copy just lower case )
   string<T> subString(u32 begin, s32 length, bool make_lower = false ) const

 - ColorConverter added
   //! converts a 8 bit palettized or non palettized image (A8) into R8G8B8
   static void convert8BitTo24Bit(const u8* in, s16* out, s32 width, s32 height, const s32* palette, s32 linepad = 0, bool flip=false);
   //! converts a 8 bit palettized or non palettized image (A8) into A8R8G8B8
   static void convert8BitTo32Bit(const u8* in, u8* out, s32 width, s32 height, const u8* palette, s32 linepad = 0, bool flip=false);

 - In IGUITreeView "clearChilds" and "hasChilds" deprecated for "clearChildren" and "hasChildren" (thx @Greenya for noticing)

 - add CGUIEditBox::getOverrideColor and CGUIEditBox::isOverrideColorEnabled

 - add dimension2d::operator-

 - Add logging level ELL_DEBUG

 - Add parameter DisplayAdapter to creation params to allow selecting the card when more than one card is in the system.

 - Added support for custom cursors

 - WM_SYSCOMMAND - SC_KEYMENU message is now ignored (F10 and ALT in Win32 windowed mode)

 - Avoid argument lookup ambiguity in swap when used in combination with stl. Using same trick as boost now and use 2 different template parameters in it.

 - Add UseMipMap flag in material

 - Add occlusion query support. Based on code by Nadro

 - Add support for vertex_array_bgra extension in OpenGL driver. This will speed up OpenGL rendering quite a lot as it skips the silly color conversion thing we have to do otherwise.

 - Replace raw xml char implementation with template struct in order to decouple the type from POD types. May also help for 64bit problems or changes needed there.

 - Fixed bug causing memory access violation in string::replace found and patched by Nalin.

 - Fix windows32 class unregister

 - Add parameter to line2d::intersectWith to allow getting intersections outside the segments (thx Yoran).

 - External windows are not destroyed anymore

 - clamp values in getRotationDegrees to avoid nan values

 - texture size in terrain mesh fixed

 - ms3d fixes

 - Add new matrix methods for infinite projection matrix

 - Support new OpenGL 2.x shader creation

-----------------------------
Changes in 1.7.4 (not yet released)

 - fixed getDepthFunction in IQ3Shader which always returned ECFN_EQUAL due to missing break (found by the cppcheck tool)

 - STL loader improved to handle arbitrary file starts

 - Compiler problem with gcc4.6 and big endian systems fixed

 - Change include order to get example 21 compiling on MinGW.

 - Irrlicht.dll has correct name now again (was named libIrrlicht.dll in c::b). This fixes bugreport 3518765 reported by tetho.

 - Fix linker path in example 16 for C::B project file (linker path was in include path section).

 - Link with opengl32 and gdi32 in Example 14 in C::B.

 - Remove --no-export-all-symbols which got recently added to the windows build as that flag is not known by gcc on Windows.

 - Fix bug in example 23 where Width and Height got mixed up. Thanks @Lazier for reporting.

 - Fix for R5G6B5 converter submitted by XMight

 - Fix conversion warning under mingw, found by Randajad

 - Set EMF_NORMALIZE_NORMALS correct for syndey model in Demo (thanks @ Midnight for reporting).

 - SceneNodeAnimatorFlyCircle fixes serialization of RadiusEllipsoid (was writing Radius). Thx @ wing64 for reporting.

 - Yield on Linux now uses nanosleep with 1ns as 0 isn't guaranteed to yield (thx @ hendu for finding + fix)

-----------------------------
Changes in 1.7.3 (20.02.2012)

 - SceneNodeAnimatorFlyCircle fixes serialization of RadiusEllipsoid (was writing Radius). Thx @ wing64 for reporting.

 - Yield on Linux now uses nanosleep with 1ns as 0 isn't guaranteed to yield (thx @ hendu for finding + fix)

 - GUIEditor attributes have now scrollbar to be editable

 - Remove warning when compiling line2d::intersectWith with other types than f32.

 - Document that triangle3d::isPointInside should not be used with int's.

 - triangle3d::isPointInsideFast handles 'on-border' cases now consistently.

 - Some more editbox fixes

 - Harden Linux joystick usage, in case the driver returns illegal values

 - Some more editbox fixes

 - Harden Linux joystick usage, in case the driver returns illegal values

 - Bugfix: vector2d.normalize() and vector3d.normalize() had returned wrong results with very short vectors since  Irrlicht 1.5. Thanks to Willem Swart for Bugreport + testcase.

 - Unknown keymappings now use the X11 keycode instead of 0 to make such keys at least usable in games.

 - KeyMapping for KeyInput.Key on X11 ignores states like shift&ctrl now like on Windows.

 - Additional keymappings for X11 (tested with german and us keyboards which seem to work now in all cases).

 - Fix crash in multiline editbox when pasting several lines into it on Windows (found by Reiko)

 - example 09.Meshviewer no longer catches keys while a modal dialog is open

 - Fix SSharedMeshBuffer

 - Fix right handed ortho matrix

 - editbox no longer displays cursor when disabled

 - editbox autoscrolling now at least works good enough to actually show the text which the user is typing in.

 - editbox no longer moves text into next line when it fails wrapping creating senseless empty lines which mess up scrolling.

 - Fix crash in editbox when scrolling up with empty first lines caused by textwrapping.

 - Fix endianess conversions

 - Changes to isPointInside

 - Fix focus problem when removing an unfocused modal dialog reported by Reiko here: http://irrlicht.sourceforge.net/forum/viewtopic.php?f=7&t=44358

 - Fix md2 normals problem again

 - Add integer template specialization for vector3d::getSphericalCoordinateAngles which rounds angles to nearest integer now.

 - Recalculate FrameRect and ScrollPos in CGUIEditBox when AbsoluteRect gets changed (thx @ serengeor for report + testcase)

 - Fix crash in editbox

 - Fix crash in editbox

 - Fix 'k' in bigfont.png (thx @ Scrappi for reporting)

 - fix serialization for CBillboardSceneNode, it had missed 2 color (thx for finding + patch from pc0de)

 - EMIE_MOUSE_WHEEL messages now handled correctly in several gui-element when wheel isn't just 1.0 or -1.0 (thx @ Reiko for reporting)

 - Fix problems in Textwrapping in CGUIStaticText. Did use wrong size and did ignore last word of the text (thx @ Reiko for bugreport)

 - Fix crash in collada (.dae) loading

 - Fix bug handling in case RTT is not properly created

 - Fix SColorf interpolation

 - Fix bug handling in case RTT is not properly created

 - Fix SColorf interpolation

 - Fix memory-leaks in example 22 MaterialViewer

 - Fix array::erase which did destroy objects more than once when used with a range (thx @ RedDragCZ for reporting + testcase).

 - Copy now all membervariables for CCameraSceneNode when cloning.

 - ICameraSceneNode::IsOrthogonal is correctly serialized and cloned now.

 - CGUIScrollBar passes unused mousemove-events now to parent element. Fixes focus-bug in ComboBox reported by REDDemon here: http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=43474&highlight=

 - Fix getAngle and getAngleWith

 - Fix clipping in CGUITabControl

 - Fix clipping in CGUITable, reported by ceyron

 - Skip bone weights and additional information in ms3d file if no joint was defined before.

 - Fix mem leak in CImage, found by mloren.

 - Fix tga writing, reported by xirtamatrix

 - Tab-positions care now about the borders correctly

 - TabControl now respositions it's tabs when setTabVerticalAlignment is changed (thx @ ceyron for reporting+testcase)

 - CGUIModalScreen now no longer takes focus itself, but tries to give it first child when possible to fix modal windows losing focus all the time

 - Modal screens no longer blinks when gui-elements call removeFocus on themself (thx @ yaten for reporting+testcase)

 - Fix crash in multiline-editbox when selecting with mouse (thx @ ceyron for reporting and testcase)

 - Fix render context creation for OpenGL under Windows.

 - Fix the reset problem of d3d9 driver in combination with hardware buffers.

 - Fix .x loader in case of unused vertices.

 - Avoid empty line in texts with very large words. Text wrapping would introduce an empty line in earlier versions.

 - Add a new attribute which assigns hw mapping hint to the whole Mesh.

 - Allow creation of water scene node without mesh.

 - Fix regeneration of skydome.

 - Fix scene node type and factory support for volume light

 - Q3 maps no longer crash when faces try accessing lightmaps which are not mentioned to be loaded in the file.

 - Fix crash on null-readfile in texture loading

 - Get particles saved before 1.7.2 (for example in irrEdit) working again (thx to smashly for problem reporting)

 - Fix IGUIScrollBar setMax and setMin which had been restricted wrongly (reported by REDDemon)

 - Fix CNullDriver::createImage - Creating the image from a texture-rectangle which doesn't start at 0,0 works now again (thx @ ceyron for bugreport+testcase)

 - Menu no longer sets highlight state when clicking disabled menu-item (reported by Mloren)

 - Treeview can now be disabled

-----------------------------
Changes in 1.7.2 (15.11.2010)

 - Fix in d3d9 driver, which caused a crash when device creation failed. Bug found and fixed by Kostya

 - Fix a wrong access to Value instead of ValueW. Found and fixed by vroad.

 - Fix line loop rendering in d3d drivers. Fix submitted by tonic.

 - Fix tar recognition in tar reader.

 - Fix blend mode setup in OpenGL driver, when using the material2d override, as pointed out by Auria

 - Avoid crash due to tcoords2 handling. Might need some more fixing to work correctly.

 - Fix 2d line intersections. Has had problems with consecutive, but non-overlapping line segments and with overlapping line segments.

 - Fix image creation from texture, found by dataslayer

 - Fix crashes when taking Screenhots for DirectX in Windowed mode (thx to agamemnus for reporting)

 - StaticText does now serialize the background color

 - Fix gui-elements which didn't care when skin-colors changed. That made it impossible to make the gui slowly transparent (thx to PI for reporting).
 Note that it couldn't be completely fixed for the SpinBox without breaking the interface, so for that element you have to enforce this by calling for example element->setValue(element->getValue()) once.

 - Fix CXMLReaderImpl::getAttributeValueAsInt which returned wrong values with large integers (thx to squisher for finding)

 - Fix compile problem in swap when using irrlicht in combination with stl (backport from trunk r3281)

 - Add EGET_TREEVIEW_NODE_COLLAPSE and deprecate EGET_TREEVIEW_NODE_COLLAPS (found by greenya)

 - Fix serialization in CParticleSystemSceneNode (found by B@z)

 - Prevent crash in BillboardTextSceneNode when a custom font is used. Found and fixed by Nalin (bugtracker id: 3020487)

 - Fix problem in animation system that currentFrame got messed up after long pauses (especially when not starting at frame 0).
   See forum thread (http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?p=210537#210537) and bug id 2898876.
   Also remove BeginFrameTime in CAnimatedMeshSceneNode as it hasn't been used anymore since some time.

 - Add framerate and current frame information for animations in example 09 and do some minor cleanup.

 - Added another test for xml-reader.

 - Fix serialization in several particle emitters and affectors (thx to Ion Dune for reporting).

 - Fix compile-error on VS for vector2d::getAngleTrig when used with integers. (thx to greenya for reporting)

 - Fix bug in dimension2d::getInterpolated that caused wrong results when used with integers as template parameter. (thx to Greenya for noticing a warning which made me look over this code).

 - Remove 2 minor memory leaks in meshloaders (found by tool cppcheck-1.43)

 - reduce file dependencies for IGUIEventReceiver.h (thx ngc92)

 - Initialize GUIEvent.Element in several places (found by greenya)

 - Add EGDS_MESSAGE_BOX_MAX_TEXT_WIDTH and deprecated EGDS_MESSAGE_BOX_MAX_TEST_WIDTH (thx to greenya for reporting).

 - Fix colors in irr files.

 - Fix several places where "used" in core::string was used wrongly preventing some memory corruption

 - Remove additional slash in pathnames in X-Loader

 - Fix crash in CGUIListBox when environment was cleared on events

 - Bugfix: Clear up depth-textures which could not be attached in OpenGL to prevent crashes.

 - Fix arrowMesh boundingbox.

 - Fix rounding problem in getInterpolated in the color classes

 - Scrollbar in GUIListbox now uses default id -1 instead of 0

 - Fix octree clipping issues.

 - Fix obj loader.

 - clone function fixes.

 - Fix tooltips.

 - Fix Ogre parser.

-----------------------------
Changes in 1.7.1 (17.02.2010)

 - Fix octree with frustum+parent checks enabled (didn't clip at all before). Now using plane-checks instead of edge-checks for frustum-box intersection.

 - Prevent that X11 selects larger resolutions in fullscreen even when perfect fits are available.

 - Ignore setResizable also on X11 when we're fullscreen to avoid messing up the window mode.

 - Work around a crash when pressing ESC after closing a Messagebox (found by Acki)

 - Prevent borland compile warnings in SColorHSL::FromRGB and in SVertexColorThresholdManipulator (found by mdeininger)

 - Improve Windows version detection rules (Patch from brferreira)

 - Make it compile on Borland compilers (thx to mdeininger)

 - Make sure that CAnimatedMeshSceneNode::clone calls the virtual updateAbsolutePosition for the new object

 - Fix that clones got dropped too often when SceneNodes without parent got cloned (found by Ulf)

 - Make sure TAB is still recognized on X11 when shift+tab is pressed. This does also fix going to the previous tabstop on X11.

 - Send EGET_ELEMENT_LEFT also when there won't be a new hovered element

 - Update docs for EGET_ELEMENT_LEFT and EGET_ELEMENT_HOVERED

 - Fix tooltips: Remove them when the element is hidden or removed (thx to seven for finding)

 - Fix tooltips: Make (more) sure they don't get confused by gui-subelements

 - Fix tooltips: Get faster relaunch times working

 - Fix tooltips: Make sure hovered element is never the tooltip itself

 - Fix string::remove which got in an endless loop when remove was called with an empty string (found and fixed by Ulf)

 - Correctly release the GLSL shaders

 - Make sure we only release an X11 atom when it was actually created

 - Fix aabbox collision test, which not only broke the collision test routines, but also frustum culling, octree tests, etc.

 - Fix compilation problem under OSX due to wrong glProgramParameteri usage

 - mem leak in OBJ loader fixed

 - Removed some default parameters to reduce ambigious situations

---------------------------
Changes in 1.7 (03.02.2010)

 - Implement minimize and deminimize under OSX.

 - Define sorting order for vector2d and vector3d in operators <, <=, > and >= to fix bugs 2783509 and 2783510. Operators order now by X,Y,Z and use float tolerances.

 - Ogre mesh 32bit indices fixed.

 - Fix tooltips for gui-elements with sub-element like IGUISpinBox (id: 2927079, found by ArakisTheKitsune)

 - ITimer no longer stops when started twice

 - wchar_t filesystem updates under Windows.

 - Joystick POV fixed under Windows, ids fixed under OSX.

 - Some updates to skinned mesh for better bones support and scaling animations.

 - OSX supports external window id in creation parameters now.

 - Fix bbox collision tests.

 - Updates for win32 key handling

 - new convenience method for flat plane creation.

 - Sky dome and other meshes use VBOs by default now.

 - Speed up b3d loading for files with many frames, material color flags and vertex color support enhanced.

 - Add hasType to IGUIElement as a dynamic_cast substitute.

 - Add another parameter to IGUISkin::draw3DWindowBackground to allow getting the client area without actually drawing

 - Add function getClientRect to IGUIWindow for getting the draw-able area

 - Fix bug that menus on IGUIWindows with titlebar got drawn too high (id: 2714400)

 - Renamed OctTree to Octree

 - Allow getting a ConstIterator from a non-const core:list

 - Add swap functions to irrMath and to the core classes.

 - Deprecate map::isEmpty() and replace it with map::empty() to make it similar to other base classes.

 - Allow to set the logging level already in SIrrlichtCreationParameters.

 - Add clearSystemMessages to devices (implemented only for Linux and Win32 so far).

 - Support changing the render window from beginScene also with OpenGL driver.

 - Add getMaterial2D which allows to alter the 2d render state settings, such as filtering, anti-aliasing, thickness, etc.

 - Fix incorrect cursorpos for resizable windows on Windows Vista (found and patched by buffer)

 - Change the beginScene window parameter from void* to SExposedVideoData&. This will allow to manage contexts for OpenGL at some point.

 - Add bzip2 and LZMA decompression modes for zip loader.

 - Add OBJ_TEXTURE_PATH and B3D_TEXTURE_PATH to SceneParameters to allow setting texture-paths for obj and b3d.

 - Irrlicht keeps now filenames additionally to the internally used names, thereby fixing some problems with uppercase-filenames on Linux.

 - Bugfix: Mousewheel no longer sends EMIE_MOUSE_WHEEL messages twice on Linux.

 - Use latest jpeglib

 - refactoring: E_ATTRIBUTE_TYPE and IAttribute have now own headers

 - CStringWArrayAttribute speedup

 - SceneNodeAnimatorFollowSpline can now loop and pingpong

 - Meshviewer.example got some fast-scale buttons.

 - Support AES-encrypted zip files. Should work with 128, 196, and 256 bit AES. This addition also adds a new PRNG, SHA, and other algorithms to the engine, though no interface is yet added for them. The implementation of the encryption algorithms is provided by Dr Brian Gladman.

 - flattenFilename and getAbsolutePath fixed and properly added at several places.

 - Added geometry shaders for OpenGL. A first version of the code was submitted by Matthew Kielan (devsh).

 - Bugfix: irrArray should no longer crash when using other allocators.

 - Add MaterialViewer example.

 - Texture activation now back in setMaterial, which simplifies writing external material renderers (OpenGL only).

 - Checkbox uses now disabled text color when disabled.

 - Changed colors for window-title caption to keep them readable when not active.

 - Draw sub-menus to left side if they would be outside main-window otherwise.

 - Give ListBox better defaults for the ScrollBar stepsizes.

 - Double and triple click events now for each mouse-button. Old events for that got removed.

 - Fix adding archives twice, which caused multiple archives of the same name and type covering each other. This one required a texture name change from using backslashes to slashes under Windows.

 - Give access to texture mipmaps. You can provide custom mipmap textures upon generation, regeneration, and locking.
   Make sure the provided data is large enough and covers all miplevels. Also the returned pointer (from lock) will only cover the smaller data of the mipmap level dimension chosen (level 0 is the original texture).

 - Separate TextureWrap mode into U and V fields

 - Add mirror texture wrap modes

 - windows show now active/inactive state

 - remove unneeded drop/grab calls found by manik_sheeri

 - fix rounding problem in IGUIElements which have EGUIA_SCALE alignments.

 - MessageBox supports now automatic resizing and images.
   Deprecated EGDS_MESSAGE_BOX_WIDTH and EGDS_MESSAGE_BOX_HEIGHT

 - Let maya-cam animator react on a setTarget call to the camera which happened outside it's own control

 - New contextmenue features:
   automatic checking for checked flag.
   close handling now customizable
   serialization can handle incomplete xml's
   setEventParent now in public interface
   New function findItemWithCommandId
   New function insertItem

 - new vector3d::getSphericalCoordinateAngles method.

 - new triangle3d::isTotalOutsideBox method.

 - Newly introduced VertexManipulator interface. This allows for very easy creation of vertex manipulation algorithms. Several manipulators, e.g. vertex color changer and transformation algorithms are already available.

 - createMeshWith1TCoords avoids vertex duplication

 - getRotation now handles matrices with scaling as well

 - Ogre format animations now supported.

 - irrArray: Fixed issues with push_front and reallocation
   Changed behavior for set_pointer and clear, when free_when_destroyed is false

 - NPK (Nebula device archive) reader added, it's an uncompressed PAK-like format

 - SSkinMeshBuffer::MoveTo* methods renamed to convertTo*

 - Multiple Render Target (MRT) support added, including some enhanced blend features where supported

 - Directory changing fixed for virtual file systems (Archives etc)

 - Fix texture matrix init in scene manager and driver

 - More draw2dimage support in software drivers

 - Sphere node now properly chooses a good tesselation based on the parameters

 - Active camera not registered twice anymore

 - Parallax/normal map shader rotation bug under OpenGL fixed

 - bump map handling for obj files fixed

 - Fog serialization added

 - New context menu features added

 - Bounding Box updates for skinned meshes fixed

 - The current FPS for an animated scene node can be queried now, added some variables to serialization

 - Scrollbars fixed

 - Fixed 2d vertex primitive method to correctly handle transparency

 - Fullscreen handling has been enhanced for Windows, now proper resolution is restored on Alt-Tab etc.

 - Cameras can now be added to the scene node without automatically activating them
   Clone method added

 - New video driver method getMaxTextureSize

 - PAK archive reader fixed

 - TRANSPARENT_ALPHA_CHANNEL_REF uses modulate to enable lighting

 - LIGHTMAP_ADD now always uses add operator

 - Some Unicode file system fixes

 - destructor of irrString not virtual anymore, please don't derive from irrString
   Some new methods added, for searching and splitting
   Assignment operator optimized

 - new lightness method for SColor

 - draw3DTriangle now renders filled polygons, old behavior can be achieved by setting EMT_WIREFRAME

-----------------------------
Changes in 1.6.1 (13.01.2010)

 - Fix pingpong for CSceneNodeAnimatorFlyStraight (found by gbox)

 - Fix bug with IGUIEditBox where the cursor position is reset on text change.

 - Make sure the window top-left corner on Windows is not negative on start so that Windows sytem-menu is always visible.

 - Fix problem that the window did sometimes not get the keyboard focus in X11 in fullscreen. Add more debug output in case focus grabbing goes wrong.

 - Fix screensize in videodriver when we didn't get the requested window size. This also prevents that gui-clicks are no longer synchronized with gui-drawing and elements can't be hit anymore.

 - Bugfix: Prevent a crash when getTypeName was called for the guienvironment. EGUIET_ELEMENT got changed for this.

 - Bugfix: Horizontal centered font with linebreaks draw now all lines. For example multiline TextSceneNodes work again.

 - Bugfix: spinbox can no longer get in an endless loop due to floating point rounding error (found by slavik262)

 - !!API change!! Disabled AntiAliasing of Lines in material default
   Please enable this manually per material when sure that it won't lead to SW rendering.

 - IGUIComboBox: clicking on the statictext displaying the active selection does now close and open listbox correctly. (Bug found by Reiko)

 - Scrollbuttons in IGUITabControl adapt now to tab-height.

 - Fix texturing of cylinder mesh

 - Fix modal dialog position (found by LoneBoco: http://sourceforge.net/tracker/?func=detail&aid=2900266&group_id=74339&atid=540676)

 - Fix DMF loading

 - Fixing left+right special keys (ctrl, shift, alt) on Win32 (thanks to pc0de for good patch-ideas).

 - Make stringarrays for enums in IGUISkin a little safer

 - Add support for keys KEY_PRINT, KEY_HOME (on numpad) and KEY_NUMLOCK on Linux.

 - Fix material handling in createMeshWith1TCoords

 - Fix another (OldValue == NewValue) before drop()/grap(), this time in CTextureAttribute::setTexture.

 - Fix LIGHTMAP_LIGHTING for D3D drivers.

 - AntiAliasing disabled for debug render elements.

 - Bugfix: CGUIToolBar::addButton does no longer mess up when no image is set and does now actually work with the text.

 - Fix ninja animation range which got messed up a little when b3d animations got fixed (thx gbox for finding)

---------------------------
Changes in 1.6 (23.09.2009)

 - Added IFileSystem::createEmptyFileList, exposed IFileList::sort, addItem and added getID

 - Fix MAKE_IRR_ID so it can be used from outside the irr namespace (Micha's patch)

 - Renamed some methods in ISkinnedMesh to match the official Irrlicht naming scheme according to createXXX()

 - Change debug data to draw using lines instead of arrows, which is much faster. Patch by pc0de

 - Fix a bug with FPS camera animator causing stutters. Patch by FuzzYspo0N

 - Fix scrolling controls in CGUITabControl

 - Fix a bug when getting optimal texture size in D3D drivers, by Jetro Lauha (tonic)

 - Added EGDS_TITLEBARTEXT_DISTANCE_X and EGDS_TITLEBARTEXT_DISTANCE_Y to GUI, submitted by FuzzYspo0N

 - Fix for UFT8 filenames displayed in file dialog, patch by MadHyde.

 - Added const method for array::binary_search, potentially slow as it doesn't sort the list!

 - Add support for scaling button images.

 - Irrlicht can now come with multiple device types compiled in, the device to use is selected by SIrrlichtCreationParameters.DeviceType. This defaults to EIDT_BEST which automatically select the best device available starting with native, then X11, SDL and finally the console.

 - Added support for EXP2 fog distribution. This required a change in the setFog parameters where now an enum value instead of the bool linear is given.

 - IFileSystem changes:

   - Renamed the following functions-
      IFileArchive::getArchiveType to getType
      IFileSystem::registerFileArchive to addFileArchive
      IFileSystem::unregisterFileArchive to removeFileArchive
      IFileArchive::openFile to createAndOpenFile

   - New enum, E_FILE_ARCHIVE_TYPE. getType on IArchiveLoader and IFileArchive now both return this.

   - IFileSystem::addFileArchive takes a parameter to specify the archive type rather always using the file extension. IFileSystem::addZipFileArchive, addFolderFileArchive and addPakFileArchive now use this but these functions are now marked as deprecated. Users should now use addFileArchive instead.

   - Added TAR archive loader.

   - The ZIP archive loader can now load gzip files, combined with the TAR loader this means Irrlicht now has native support for .tar.gz
     Currently this must be done in two calls, for example:
       fileSystem->addFileArchive("path/to/myArchive.tar.gz");
       fileSystem->addFileArchive("myArchive.tar");

 - Fix highlighting in IGUIEditBox where kerning pairs are used in the font. For example in future italic, OS or other custom fonts.

 - IOSOperator::getTextFromClipboard returns now const c8* instead of c8*

 - Support for copy&paste on linux (X11) added (fixing bug 2804014 found by Pan)

 - bugfix for 2795321 found by egrath: Don't rely anymore on broken XkbSetDetectableAutoRepeat.

 - bugfix: CMountPointReader::openFile no longer returns true for empty files. Corresponding test added.

 - Direct3D now also uses screen coordinates in 2d mode, just like OpenGL. This means that screen coords are going from 0..ScreenWidth and 0..ScreenHeight instead of -1..1.

 - ALT+F4 keypress now closes Windows SDL device

 - Allow Direct3D drivers in SDL, patch by Halifax

 - Added compiler error when attempting to compile with VC6.

 - Use setWindowTextA in Windows device for WIN64 platform, posted by veegun

 - ELL_ERROR log events are now created when shaders fail to compile or link, reported by Halan

 - irrList now uses irrAllocator, fixed by Nox

 - Added IGUIWindow::setDraggable and IGUIWindow::isDraggable, by Nox

 - Added SGI RGB file reader by Gary Conway, for loading Silicon Graphics .rgb, .rgba, .sgi, .int and .inta textures

 - Renamed setResizeAble to setResizable

 - Added new device method minimizeWindow which minimizes the window (just as if the minimize button has been clicked).

 - SkyDome is now serialized correctly

 - Added PLY mesh reader and writer

 - Ensure ListBox on combo box doesn't hang off the bottom of the GUI root, by Matthias Specht

 - Made IGUIElements recalculate clipping rectangle after setNotClipped, reported by Aelis440

 - Bug fix for the combo box where it showed white text instead of skin color before being focused, fix posted by drewbacca

 - EGDS_MESSAGE_BOX_HEIGHT is now honoured, bug reported by Spkka

 - Fixed a bug in the edit box where events are sometimes sent to a null parent, reported by Sudi.

 - Coordinate system fix for OpenGL in SDL device

 - Added generic console device. You can now use Irrlicht to create and manipuate graphics on a shell where no graphics hardware
   or windowing system is available. To enable it uncomment #define _IRR_USE_CONSOLE_DEVICE_ in IrrCompileConfig.h
   - The console device can now present images from the software drivers and display them as ASCII art in the console
   - By default it replaces the default font in the skin, to prevent fonts from being huge.

 - Fixed problems with changing cursor visibility while mouse is pressed on windows

 - Allow control of background drawing in listbox

 - Allow control of drawing background and titlebar in windows

 - Improved window serialization

 - Add mouse events EMIE_MOUSE_DOUBLE_CLICK and EMIE_MOUSE_TRIPLE_CLICK (thx to Ulf for patch proposal)

 - Set "ButtonStates" for mouse events also on Linux (was only for Windows formerly)

 - Add Shift+Control states to mouse event

 - bugfix (2003238): serialize modal screens

 - allow stacking modal screens

 - allowing hiding modals

 - replace many IsVisible checks with virtual isVisible() checks in IGUIElement

 - bugfix: reset selected row when clearing CGUITable

 - adding events EGET_EDITBOX_CHANGED and EGET_EDITBOX_MARKING_CHANGED

 - prevent editbox from recalculating its textbreaking each frame

 - let spinbox react on each textchange without waiting for enter to prevent getting value changes without corresponding EGET_SPINBOX_CHANGED events.

 - new test for zipreader

 - prevent dropping objects accidentally in many set functions

 - Reversed change in vector3d::normalize.
   Works now again as documented and a corresponding test has been added.
   Does fix bug 2770709 (https://sourceforge.net/tracker/?func=detail&aid=2770709&group_id=74339&atid=540676)

 - Animations can now be paused by setting the fps to 0.

 - Avoid fp-precision problem in getPickedNodeBB (see also http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=33838&highlight=).
   This change might also fix the problem with picking nodes found by aanderse (http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=32890&highlight=)

 - implemented isALoadableFileFormat ( File *file ) for the Archive Loader

 - PixelBlend16 and PixelBlend16_simd are working for the new rules.

 - bugfix. CLightSceneNode didn't correctly update it's attributes

 - vector template and equals tests
    also set the equal test for s32 to behave like the f32 routine.
    The function equals always implements a weak test.
    that means a tolerance MUST always be used if you use the equal function. default is 1.

  - VideoDriver drawPixel
    The HW renderes are using the alpha components for blending.
    The Software Renderes and image loaders are using CImage::setPixel copy.
    so setPixel is engaged to either blends or copy the pixel
    default: false
  - Burningvideo
    added RenderMaterial EMT_SPHERE_MAP
      pushed burningsvideo to 0.43
    added RenderMaterial EMT_REFLECTION_2_LAYER
      pushed burningsvideo to 0.44
    set  EMT_TRANSPARENT_ALPHA_CHANNEL_REF
      to use AlphaRef 0.5 like Direct3D

    One Note: in OpenGL there is know difference between sphere_map and reflection layer
    both using GL_TEXTURE_GEN_MODE GL_SPHERE_MAP, whereas in d3d one time using camera_normal
    on sphere and reflection on refletcion_layer.

    The visual difference is that on sphere map the "image is not moving" when you rotate the
    viewer. For Burning i took the opengl visual. always moving

  - rename quake3 SEntity to IEntity to be confom with IShader

  - fixed createMeshWith2TCoords, normals were missing during copy.

  - added
    //! Creates a copy of the mesh, which will only consist of S3DVertex vertices.
    IMesh* CMeshManipulator::createMeshWith1TCoords(IMesh* mesh) const

  - added io::IFileSystem* CSceneManager::getFileSystem()

  - added virtual const c8* ISceneManager::getAnimatorTypeName(ESCENE_NODE_ANIMATOR_TYPE type);

  - added CSceneNodeAnimatorFlyCircle::radiusEllipsoid.
    if radiusEllipsoid == 0 the default circle animation is done
    else radiusEllipsoid forms the b-axe of the ellipsoid.
    -> gummiball bouncing

  - added ISceneManager::createFlyStraightAnimator variable bool ping-pong
    used in loop mode to device if start from beginning ( default ) or make ping-pong
    -> straight bouncing

  - changed IFileSystem::registerFileArchive
    remove the index of the hierarchy and added a new interface method
    //! move the hirarchy of the filesystem. moves sourceIndex relative up or down
    virtual bool moveFileArchive( u32 sourceIndex, s32 relative ) = 0;

  - bugfix and changes in SViewFrustum::SViewFrustum
    wrong size of Matrices copy.
    renamed E_TRANSFORMATION_STATE_2 to E_TRANSFORMATION_STATE_FRUSTUM
    therefore also changed SViewFrustum::setTransformState to not tap

    in the pitfall again of wrong memory...

  - moved
    //! EMT_ONETEXTURE_BLEND: has BlendFactor Alphablending
    inline bool textureBlendFunc_hasAlpha ( E_BLEND_FACTOR factor ) const
    from the material renderes ( 3x declared ) to SMaterial.h

  - updated managed light example to use standard driver selection

  - BurningsVideo
    - LightModel reworked.
      Point Light & Direction Light works for Diffuse Color as expected
      Specular and Fog still have problems ( needs new pixel shader )
      pushed burningsvideo to 0.42 for this major step

    -  removed obsolete matrix transformations
      renamed E_TRANSFORMATION_STATE_2 to E_TRANSFORMATION_STATE_BURNING

  - cleaned line3d.h vector3d.h template behavior.
    many mixed f32/f64 implementations are here. i'm not sure if this should be
    the default behavior to use f64 for example for 1.0/x value, because they
    benefit from more precisions, but in my point of view the user is responsible
    of choosing a vector3d<f32> or vector3d<f64>.

  - added core::squareroot to irrmath.h
    -> for having candidates for faster math in the same file

  - added AllowZWriteOnTransparent from SceneManager to burningsvideo

  -added hasAlpha() to ITexture
    This info can be used for e.q to downgrade a transparent alpha channel blit
    to add if the texture has no alpha channel.

- FileSystem 2.0 SUPER MASTER MAJOR API CHANGE !!!

  The FileSystem is now build internally like for e.g. the image- and meshloaders.
  There exists a known list of ArchiveLoaders, which know how to produce a Archive.
  The Loaders and the Archives can be attached/detached on runtime.

  The FileNames are now stored as io::path. where c16 is toggled between char/wchar
  with the #define flag _IRR_WCHAR_FILESYSTEM, to supported unicode backends (default:off)
  Replaced most (const c8* filename) to string references.

  Basically the FileSystem is divided into two regions. Native and Virtual.
    Native means using the backend OS.
    Virtual means only use currently attached IArchives.

  Browsing
    each FileSystem has it's own workdirectory and it's own methods to
      - create a FileTree
      - add/remove files & directory ( to be done )
        Hint: store a savegame in a zip archive...

     basic browsing for all archives is implemented.
     Example 21. Quake3Explorer shows this

   TODO:
    - a file filter should be implemented.
    - The IArchive should have a function to create a filetree
      for now CFileList is used.

  Class Hierarchy:

  IArchiveLoader: is able to produce a IFileArchive
    - ZipLoader
    - PakLoader
    - MountPointReader ( formaly known as CUnzipReader )

  IFileArchive:
    -ZipArchive
    -PakArchive
    -MountPoint (known as FolderFile)

  IFileSystem
    - addArchiveLoader

  - changed implementation of isALoadableFileExtension in all loaders
    to have consistent behavior
  - added a parameter to IFileList * createFileList
    setFileListSystem
    allows to query files in any of the game archives
    standard behavior listtype = SYSTEM ( default)

  - CLimitReadFile
    added multiple file random-access support.
    solved problems with mixed compressed & uncompressed files in a zip

- IrrlichtDevice
  added:
    virtual bool setGammaRamp( f32 red, f32 green, f32 blue, f32 brightness, f32 contrast ) = 0;
    virtual bool getGammaRamp( f32 &red, f32 &green, f32 &blue ) = 0;
  and calculating methods to DeviceStub.

  -  irrlicht.h
    changed exported irrlicht.dll routines createDevice, createDeviceEx, IdentityMatrix
    to extern "C" name mangling.

 - ParticleSystem
    removed the private (old?,wrong?) interface from the ParticleEffectors
    to match the parent class irr::io::IAttributeExchangingObject::deserializeAttributes

- Generic
  - vector3d<T>& normalize() optimized
    added reciprocal_squareroot for f64

  - dimension2d
    added operator dimension2d<T>& operator=(const dimension2d<U>& other)
    to cast between different types

  - vector2d bugfix operator+=

  - C3DSMeshLoader renamed chunks const u16 to a enum
    removing "variable declared but never used warning"

  - added a global const identity Material
    changed all references *((video::SMaterial*)0) to point to IdentityMaterial
    removed warning: "a NULL reference is not allowed"

  - modified IRRLICHT_MATH to not support reciprocal stuff
    but to use faster float-to-int conversion.

  - core::matrix4
      USE_MATRIX_TEST

      i tried to optimize the identity-check ( w.r.t. performance)
      i didn't succeed so well, so i made a define for the matrix isIdentity -check
      for now it's sometimes faster to always calculate versus identity-check
      but if there are a lot of scenenodes/ particles one can profit from the
      fast_inverse matrix, when no scaling is used. further approvement could
      be done on inverse for just translation! ( many static scenenodes are not rotated,
      they are just placed somewhere in the world)
      one thing to take in account is that sizeof(matrix) is 64 byte and
      with the additional bool/u32 makes it 66 byte which is not really cache-friendly..

    - added  buildRotateFromTo
        Builds a matrix that rotates from one vector to another

  - irr::array. changed allocating routine in push_back

    added a new method setAllocStrategy,
    safe ( used + 1 ), double ( used * 2 + 1)
    better default strategies will be implemented

    - removed binary_search_const
      i added it quite a long time ago, but it doesnt make real sense
      a call to a sort method should happen always. i just wanted to safe
      a few cycles..
    - added binary_search_multi
      searches for a multi-set ( more than 1 entry in the sorted array)
      returns start and end-index

  - changed some identity matrix settings to use core::IdentityMatrix

  -  added deletePathFromFilename to generic string functions in coreutil.h and
    removed from CZipReader and CPakReader

  - s32 deserializeAttributes used instead of virtual void deserializeAttributes in
    ParticleSystem ( wrong virtual was used)

- strings & Locale
  - started to add locale support
  - added verify to string
  - added some helper functions

- XBOX
  i have access to a XBOX development machine now. I started to compile
  for the XBOX. Question: Who did the previous implementation?. There
  is no XBOX-Device inhere. maybe it's forbidden because of using the offical
  Microsoft XDK. I will implement a native or sdl device based on opendk.
  irrlicht compiles without errors on the xbox but can't be used.

- Windows Mobile
    reworked a little. added the mobile example to the windows solution for
    cross development.
    added maximal 128x128 texture size for windows mobile ( memory issues )

- Collision  Speed Up

  The Collision Speed Up greatly improves with many small static child-nodes

  - added COctTreeTriangleSelector::getTriangles for 3dline from user Piraaate

  - modified createOctTreeTriangleSelector and createTriangleSelector
    to allow node == 0, to be added to a meta selector

  - CSceneNodeAnimatorCollisionResponse has the same problem as CSceneNodeAnimatorFPS
    on first update:
    Problem. you start setting the map. (setWorld). First update cames 4000 ms later.
    The Animator applies the missing force... big problem...
    changed to react on first update like camera.

    -  add Variable FirstUpdate. if set to true ( on all changes )
      then position, lasttime, and falling are initialized

  -added #define OCTTREE_USE_HARDWARE in Octree.h

    if defined octtree uses internally a derived scene::MeshBuffer which has
    the possibility to use the Hardware Vertex Buffer for static vertices and
    dirty indices;-)

    if defined OCTTREE_USE_HARDWARE octree uses internally a derived scene::CMeshBuffer
    so it's not just a replacement inside the octree. It also in the OctTreeSceneNode.
    #define OCTTREE_PARENTTEST is also used. It's skip testing on fully outside and takes everything on fully inside

  - virtual void ISceneNode::updateAbsolutePosition()
    -  changed inline CMatrix4<T> CMatrix4<T>::operator*(const CMatrix4<T>& m2) const

  - changed inline bool CMatrix4<T>::isIdentity() const
    to look first on Translation, because this is the most challenging element

  - virtual core::matrix4 getRelativeTransformation() const
    Hierarchy on Identity-Check
      1) ->getRelativeTransform -> 9 floating point checks to be passed as Identity
      2) ->isIdentity () -> 16 floating point checks to be passed as Identity

  - inline void CMatrix4<T>::transformBoxEx(core::aabbox3d<f32>& box) const
    added isIdentity() check

- changed CSceneNodeAnimatorCollisionResponse
  - added CSceneNodeAnimatorCollisionResponse::setGravity
    needed to set the differents Forces for the Animator. for eq. water..
  - added CSceneNodeAnimatorCollisionResponse::setAnimateTarget
  - added CSceneNodeAnimatorCollisionResponse::getAnimateTarget
  - changed CSceneNodeAnimatorCollisionResponse::animateNode to react on FirstUpdate
  - TODO: set Gravity to Physically frame independent values..
    current response uses an frame depdended acceleration vector.
    ~9.81 m/s^2 was achieved at around 50 fps with a setting of -0.03
    may effect existing application..

- SceneNodes
  - CSkyDomeSceneNode
    moved radius ( default 1000 ) to constructor
    added Normals
    added DebugInfo
    added Material.ZBuffer, added SceneManager

  - CVolumeLightSceneNode:
    changed default blending OneTextureBlendgl_src_color gl_src_alpha to
      EMT_TRANSPARENT_ADD_COLOR ( gl_src_color gl_one )
    which gives the same effect on non-transparent-materials.
    Following the unspoken guide-line, lowest effect as default

  - changed SceneNode Skydome from f64 to f32

  - AnimatedMesh Debug Data:
      mesh normals didn't rotate with the scenenode fixed ( matrix-multiplication order)

  - Camera SceneNode setPosition
    Camera now finally allow to change position and target and updates all
    effected animators..

- Device:
    added the current mousebutton state to the Mouse Event
    so i need to get the current mouse state from the OS

- GUI

  - CGUIFont:
    - added virtual void setInvisibleCharacters( const wchar_t *s ) = 0;
    define which characters should not be drawn ( send to driver) by the font.
    default: setInvisibleCharacters ( L" " );

    - added MultiLine rendering
      should avoid to us CStaticText breaking text in future

  - CGUIListBox
    - changed Scrollbar LargeStepSize to ItemHeight
      which easy enables to scroll line by line

  - CGUIScrollBar
      - bug: event lost when moving outside the window
      - bug: Scrollbar notifyListBox notify when the scrollbar is clicked.
      - changed timed event in draw to OnPostRender

  -  added GUI Image List from Reinhard Ostermeier, modified to work

  - FileOpenDialog
    changed the static text for the filename to an edit box.

  - changed the interface for addEditBox to match with addStaticText

  - changed the interface for addSpinBox to match with addEditBox

  - added MouseWheel to Spinbox

  - changed CGUITable CLICK_AREA from 3 to 12 to enable clicking on the visible marker

  - CGUISpritebank
    removed some crashes with empty Sprite banks

  - IGUIScrollBar
    added SetMin before min was always 0
    changed ScrollWheel Direction on horizontal to move right on wheel up, left on wheel down

  - IComboBox: added ItemData

  - optimized IsVisible check in IGUIElement::draw

- Image Loaders
  - added TGA file type 2 ( grayscale uncompressed )
  - added TGA file type (1) 8 Bit indexed color uncompressed

  ColorConverter:
    - added convert_B8G8R8toA8R8G8B8
    - added convert_B8G8R8A8toA8R8G8B8

- Media Files
  - added missing shaders and textures to map-20kdm2.
    Taken from free implementation
  - ball.wav. adjusted DC-Offset, amplified to -4dB, trim cross-zero
  - impact.wav clip-restoration, trim cross-zero
  - added gun.md2, gun.pcx to media-files
  - added new irrlicht logo irrlicht3.png

- OctTree
  -added
    #define OCTTREE_PARENTTEST ( default: disabled )
    used to leave-out children test if the parent passed a complete frustum.
    plus: leaves out children test
    minus: all edges have to be checked
  - added MeshBuffer Hardware Hint Vertex to octtree

- CQuake3ShaderSceneNode:
  - removed function releaseMesh
    Shader doesn't copy the original mesh anymore ( saving memory )
    so therefore this (for others often misleading ) function was removed
  - changed constructor to take a (shared) destination meshbuffer for rendering
    reducing vertex-memory to a half
  - don't copy the original vertices anymore
  - added deformvertexes autosprite
  - added deformvertexes move
  - added support for RTCW and Raven BSPs ( qmap2 )
  - added polygonoffset (TODO: not perfect)
  - added added nomipmaps
  - added rgbgen const
  - added alphagen
  - added MesBuffer Hardware Hint Vertex/Index to Quake3: static geometry, dynamic indices
  - added Quake3Explorer examples
  - added wave noise
  - added tcmod transform
  - added whiteimage
  - added collision to Quake3Explorer
  - renamed SMD3QuaterionTag* to SMD3QuaternionTag* ( typo )
  - updated quake3:blendfunc
  - added crouch to Quake3Explorer
    (modifying the ellipsiodRadius of the camera animator )
    added crouch to CSceneNodeAnimatorCameraFPS
    still problems with stand up and collision
  - Quake3MapLoader
    modified memory allocation for faster loading
  - Quake3LoadParam
    added Parameter to the Mesh-Loader
  - added
    The still existing missing caulking of curved surfaces.
    using round in the coordinates doesn't solve the problem.
    but for the demo bsp mesh it solves the problem... (luck)
    so for now it's switchable.
    TJUNCTION_SOLVER_ROUND
    default:off

- BurningVideo
  - pushed BurningsVideo to 0.40
  - added blendfunc gl_one_minus_dst_alpha gl_one
  - added blendfunc gl_dst_color gl_zero
  - added blendfunc gl_dst_color src_alpha
  - modified AlphaChannel_Ref renderer to support alpha test lessequal
  - addded 32 Bit Index Buffer
  - added sourceRect/destRect check to 2D-Blitter ( slower, but resolves crash )
  - added setTextureCreationFlag video::ETCF_ALLOW_NON_POWER_2
    Burning checks this flag and when set, it bypasses the power2 size check,
    which is necessary on 3D but can be avoided on 2D.
    used on fonts automatically.
  - added Support for Destination Alpha

- Direct3D8
  - added 32 Bit Index Buffer
  - compile for XBOX

- Direct3D9
  - fixed crash on RTT Textures DepthBuffer freed twice.
    added deleteAllTextures to destructor

- NullDriver
  - removeallTextures. added setMaterial ( SMaterial() ) to clean pointers for freed textures

 - ISceneCollisionManager::getSceneNodeAndCollisionPointFromRay() allows selection by BB and triangle on a heirarchy of scene nodes.

 - Triangle selectors created from animated mesh scene nodes will update themselves as required to stay in sync with the node.

 - IVideoDriver has methods to enumerate the available image loaders and writers.

 - Octtree scene nodes are now IMeshSceneNodes rather than ISceneNodes, and so you can call getMesh() on them.

 - New scene parameter B3D_LOADER_IGNORE_MIPMAP_FLAG to ignore the often missing mipmap flag in b3d files. If this parameter is true, the old pre Irrlicht-1.5 behavior is restored.

 - Added Mipmap LOD Bias attribute to MaterialLayer.

 - Added ColorMask support to selectively disable color planes on rendering.

 - Added support for all available depth test functions.

 - Add an outNode to getCollisionPoint() that returns the scene node that was hit, as well as the triangle.

 - Initial support for Alpha To Coverage, needs some more fixing until it works on all supported platforms.

 - Added support for Anti-Aliasing modes per material

 - Added an ICollisionCallback to ISceneNodeAnimatorCollisionResponse, to inform the application that a collision has occurred.  Thanks to garrittg for this.

 - Added an startPosition parameter to createFlyCircleAnimator() to allow starting the animator at any position on the circle.

 - Many uses of dimension2d<s32> changed to dimension2d<u32>, including IImage, ITexture and screen dimensions.  You will have to change (at least) createDevice() calls to use dimension2d<u32>

 - Added Doublebuffer flag to SIrrCreationParameters, for better finetuning

 - Added Stereo-Framebuffer support for professional OpenGL cards

 - Added IFileSystem::createMemoryWriteFile() to allow creation of an IWriteFile interface that uses an application supplied memory buffer.

 - Added an IVideoDriver::writeImageToFile() overload that can take an IWriteFile interface.

 - (Internal) Replaced CMemoryReadFile with CMemoryFile, that also implements an IWriteFile interface.

 - Added an optional light manager to the scene manager to allow the user application to turn lights on and off during scene rendering.  This can be used to produce "zoned" lighting. See example 20.ManagedLights.

 - Added a method to flip the Y movement of the FPS camera.

 - The Anisotropy filter can now be set to the AF value per texture layer. So no forced MAX_ANISOTROPY anymore. .irr files will probably fail, though.

 - AntiAlias parameter in SIrrCreationParameters is now an u8 value specifying the multisampling level (0 for disabled, 4,6,8, and others for anti-aliasing)

 - D3D devices use DISCARD for windowed renderbuffers now, can be faster.

 - Changed behavior of PixelBlend16() / PixelBlend16_simd() so that they treat the 1 bit alpha of the source pixel as boolean, i.e. they draw either the source pixel, or the destination pixel, rather than "blending". (Issue revealed by the fix to IVideoDriver::makeColorKeyTexture()).

 - IVideoDriver::makeColorKeyTexture() bug fixed so that only alphas, not whole texel colors, are zeroed. An optional parameter allows using the old (buggy) behavior for backwards compatibility.

 - position2d is now a synonym for vector2d. position2d is therefore marked as deprecated, although it's unlikely to be removed.

 - ISceneNodeAnimator now has a hasFinished() method.

 - ISceneNodeAnimatorCollisionResponse exposes the target node. Setting the node again resets the last position, allowing the node to be teleported.

 - Add a hitPosition out parameter to ISceneCollisionManager::getCollisionResultPosition() - this is a (small) API breaking change.

-------------------------------------
Changes in version 1.5.2 (16.12.2009)

 - Properly check boundaries in getFont and setFont.

 - Reinit values in the driver when scene manager is cleared.

 - Normals handling fixed in createMeshWithTangents, existing normals are not always destroyed now.

 - Fix terrain smoothing, bug found by loverlinfish

 - SOLARIS recognition removed. Please specify the platform define manually. This allows for compilation under sparc/Linux and sparc/Solaris

 - Some uninitialized variables fixed

 - FreeBSD joystick support added (for Debian package)

 - Fix cursor problems found by buffer and by rvl2 as described in http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=34823&highlight=

 - OSX/XCode updates

 - MS3D loader bug fixed

 - Float parse bug fixed

-------------------------------------
Changes in version 1.5.1 (05.08.2009)

 - Make sure a missing font does not corrupt the skin.

 - Fix getAngle in vector2d as suggested by xray. This has only a minor impact on s32 vectors.

 - bugfix: CGUIFont::getCharacterFromPos regards now kerning (found by Arras)

 - Add support for range fog in some OpenGL versions.

 - Fix for shadow volume removal, submitted by vitek.

 - Avoid using X11 autorepeat to deal with broken X11 versions.

 - Speculars are properly exported into mtl files now, instead of corrupting them.

 - Binary type loading in attributes fixed.

 - bugfix: Use make_lower throughout for spritebank filenames (found and patched by Ion Dune)

 - STL loader fixed: Right-handedness corrected, normals and bboxes are correctly added now.

 - bugfix: CUnZipReader::openFile no longer returns true for empty files. Corresponding test added.

 - Big endian issues in .x loader fixed.

 - HSLColor methods repaired.

 - copyToScaling fixed.

 - Fixed problem with highlighting menus when mouse was outside sub-menu area.

 - bugfix (2796207): menu acted (wrongly) on left-click down instead of left-click up.

 - bswap16 fallback macro fixed

 - getBaseName fixed to work correct with dots in filenames.

 - static method isDriverSupported allows for simple check of available drivers.

 - Some defines added to check for the Irrlicht version of the library.

 - Make sure all renderstates are properly initialized

 - Wrong size for main depth buffer fixed.

 - Fix 3ds shininess to the allowed range.

 - Fix loading of Collada files from irrEdit 1.2

 - Remove texture pointers after texture clear.

 - WindowsCE pathnames fixed.

 - Some virtuals are now overridden as expected.

 - Incomplete FBOs are properly signalled now

 - Update to libpng 1.2.35, fixed issues on 64bit machines with system's libpng.

 - Fixed wrong grab/drop in setOverrideFont

 - Added draw2dRectOutline

 - rectf and recti added.

 - Fix ALPHA_CHANNEL_REF to a fixed check for alpha==127 as expected.

 - Fixed OSX device bug where screen size was not set in fullscreen mode.

 - cursor setVisible changed to be called less often.

 - OpenGL version calculation fixed.

 - OSX device now supports shift and ctrl keys.

 - Fixed ambient light issues in burningsvideo.

 - device reset for d3d fixed when using VBOs.

 - Fix dimension2d +=

 - MD2 mesh loader: Now uses much less memory, reduced number of allocations when loading meshes.

 - OpenGL render state (texture wrongly cached) fixed.

 - Fixed animator removal.

 - Checnged collision checks for children of invisible elements to also be ignored (as they're actually invisible due to inheritance).

 - Fix terrain to use 32bit only when necessary, make terrain use hw buffers. Heightmap loading and height calculation fixed. Visibility and LOD calculations updated.

 - Some mem leaks fixed

 - FPS camera resets the cursor better

-----------------------------------
Changes in version 1.5 (15.12.2008)

 - Construction calls for FPS camera changed to take speed in units/milliseconds, just as the setSpeed method does.

 - Code::Blocks workspaces added. C::B projects (using gcc) now output to /lib/gcc and /bin/gcc, when built on either Windows or Linux.

 - Added a test suite in the /tests directory. This can be used to perform regression tests, and should be updated with new tests to verify fixes or validate new features.

 - Changed the preferred way of altering light node's radius: Use the new member methods of ILightSceneNode instead of directly modifying the SLight structure.

 - Changed the initial attenuation back to (0,1/radius,0). To override this value simply change the attenuation in the SLight (lightnode->getLightData().Attenuation.set(x,y,z))

 - Dirty fix for OSX device setResizable and a bug fix to do with resizing the device.

 - Terrain heightmap and texture were flipped in order to draw them as expected (looking onto the terrain from high above will just look like the actual texture/heightmap).

 - Significant internal change to the way that FPS camera jump speed and collision response animator gravity interact. The behavior is now much more realistic, but it will require you to adjust your jump speed and gravity.

 - Skybox won't be culled anymore by nearplane or farplane.

 - BBoxes of animated meshes (skinned meshes) are updated again.

 - Lost devices (as found with D3D) are properly handled now. So the screen can be resized or minimized without crashing the app.

 - Renamed IGUIElement::setRelativePosition(const core::rect<f32>& r) to IGUIElement::setRelativePositionProportional(), as it has radically different functionality from setRelativePosition(const core::rect<s32>& r)

 - Added IGUIElement::setRelativePosition(const core::position2di & position) to set a new position while retaining the existing height and width.

 - Many Collada fixes. z_up coords are supported now, texture coords are properly loaded. Transparency is supported.

 - Camera scene node rotation and target can now be bound together so that changing one automatically changes the other (as the FPS camera has always done). See ICameraSceneNode::bindTargetAndRotation()

 - Removed the extra libpng files for OSX. OSX now also uses the default libpng.

 - Enhanced PCX support with some more color formats and write support.

 - Fixed LMTS problems with extra data in files.

 - Removed VS6 .dsw / .dsp project files - VS6 is no longer supported.

 - Particles can be scaled during animations. Particle scaling needs to happen in the emitter now, instead of in the Particle system scene node. Deprecation methods will guide the user.

 - ISceneNode::setParent and addChild now updates node SceneManager pointers if the node was from another SceneManager.

 - Basic support for joystick input events on Windows, Linux, SDL and OSX. Tested with wired Logitech and Thrustmaster wired controllers and XBox 360 wireless controller ( http://tattiebogle.net/index.php/ProjectRoot/Xbox360Controller/OsxDriver )

 - Fixed scaled octree nodes being incorrectly frustum culled.

 - FSAA under OpenGL and Win32 added. Now all hw drivers and platforms should support it.

 - Unlimited RTT fix for D3D systems. Depth buffers are now shared if possible, otherwise a new depth buffer is generated. In order to save VidMem one should create RTTs starting with the largest one.

 - Avoid RTTs with nonFBO-support under OpenGL which are larger than the screen. Since we rely on rendering into textures in this case we need to clamp the size by the screensize.

 - Fixes for getAbsoluteFilename under Linux in order to return a filename instead of en empty string in case the file doesn't exist.

 - Use absolute path names when creating / finding textures.

 - Font tool implementation for Linux with xft, by Neil Burlock.

 - Support for normals and UV coords from DeclData in .x files.

 - Modified line2d<T>::intersectWith() to cover more cases.

 - Added IVideoDriver::drawPixel().

 - Moved the window pointer from endScene to beginScene, as this is required for OpenGL support of external window pointers.

 - Fix for terrain culling.

 - Added minimize button to win32 window (if resizable)

 - Major API change: RTTs are now created via addRenderTargetTexture instead of createRenderTargetTexture, which allows to retrieve them from the texture cache, but also changes the way of removing the RTTs, and especially one must not drop the pointer anymore.

 - WindowsCE-Bugfix

 - disableFeature can be used to override feature support of the video driver.

 - draw2DImage can now also handle RTTs under OpenGL (which were flipped before).

 - Ogre mesh format fixes for proper texture support.

 - Added .obj mesh writer.

 - Some core::string constructors made explicit to avoid unintended conversions. Just add core::stringc() or core::stringw() around the old code to avoid warnings.

 - IdentityMatrix is now a properly defined global, with external visibility on all platforms.

 - Bugfix for context releases with glx 1.3 on error.

 - Removed constraints for sizes of the terrain scene node.

 - Support for 32bit indices in a special MeshBuffer class.

 - isBetweenPoints return true now even for the begin and end points, i.e. line segments are now including their start and end.

 - Fix XML reader creation for non-existing files and invalid callbacks.

 - Changed interpretation of MaterialTypeParam==0 in transparent materials. Now it's consistent with all other values, but one has to set the value to 0.5 to get the old behavior (slightly faster rendering, but no smooth borders)

 - Replaced transformBox by transformBoxEx in some internal methods to avoid major malfunction of the transformations.

 - Fix use of zip file inside zip files.

 - Avoid loading textures which are not used by the mesh in b3d loader.

 - Added scaleTCoords methods to MeshManipulator

 - Enable use of other meshes for shadow mesh generation, can be used to speed up shadow generation and rendering for complex meshes. Patch based on a version by tonic.

 - Fixed usage of SIrrCreationParameters struct, which dind't have copy constructor and assignment operator anymore, since the Irrlicht version string was made const.

 - New glext.h (version 41) and glxext.h (version 20) supporting OpenGL 3.0

 - Added support for read-only locking of textures. Can speed up those calls.

 - Added support for locking RTTs under OpenGL.

 - Implementation of UserData events from system events.

 - ICameraSceneNode::setIsOrthogonal replaced by a parameter to setProjectionMatrix.

 - All meshbuffers are now dynamically allocated to avoid problems with grabbed buffers, which may be deleted before the last drop happens (due to static memory allocation).

 - Enhanced scene graph traversal with example from rogerborg.

 - FPS camera disabling of event receiver works better now.

 - scene deserialization allows for a user defined callback after a new scene node is created.

 - Fixed tangent mesh loading from .irrmesh files.

 - OpenGL clamp modes are now properly set.

 - IMeshManipulator::transformMesh renamed to transform, also supports meshbuffers now.
   scaleMesh renamed to scale, supports meshbuffers as well.

 - vector3d::rotationToDirection added.

 - New mesh generators for cone and cylinder.

 - Hardware accelerated Vertex and Index Buffer support finally integrated into Irrlicht. Thanks to a resource handling idea by Klasker and the almost immediate implementation by Luke, Irrlicht now supports VBOs under OpenGL and D3D.
   Hardware buffers make rendering the same vertices much faster. To use this feature with a mesh, simply set a usage type via MeshBuffer->setHardwareMappingHint(scene::EHM_STATIC). The driver will upload the vertices and indices on the next draw and reuse this information without the need to upload it each frame.
   Vertex and Index buffers can also be updated separately, which is e.g. useful for the terrain node's LOD.

 - Changed FBO creation according to Nadro's patch. Seems to have zbuffer problems currently.

 - Update to libpng 1.2.29

 - Compiler flag for PerfHUD support added.

 - recalculateNormals and tangent space creation enhancements by ryanclark.

 - Added getColorFormat methods for device and driver, returning the color format of the device's window and the driver's framebuffer.

 - Added isFullscreen method.

 - Added isWindowFocused and isWindowMinimized methods.

 - Screenshots are now always made from the frontbuffer, so always the last completely rendered image is captured. However, overlapping windows may corrupt those parts of the screenshot (as was previously happening with d3d already).

 - New device creation parameter to disable Irrlicht's system event handling.

 - New device creation parameter to specify depth bits.

 - New device creation parameter to request alpha channel in framebuffer.

 - Draw2DImage methods under OpenGL now also handle RTTs correctly.

 - Fixed RTT bug which lead to strangely clamped textures.

 - Speed improvement for screenshots on some Intel cards under OpenGL.

 - My3D file loader fixed.

 - Terrain mesh performance increased.

 - Fixed mem leak in cube node.

 - Compiler errors in shaders won't corrupt the material renderer list anymore.

 - Quake3 shader files now have properly working texture matrices again.

 - FPS and Maya style cameras are now standard cameras with a special animator.
  - ISceneNodeAnimator now inherits IEventReceiver
  - New method ISceneNodeAnimator::isEventReceiverEnabled, returns false by default
  - CCameraSceneNode::OnEvent passes events to animators with enabled event receivers
  - ISceneNodeAnimatorCameraFPS and ISceneNodeAnimatorCameraMaya interfaces for changing camera settings at run-time.

 - Changed SExposedVideoData to use void* instead of s32. Fixed 64bit portability.

 - Added support for front face culling.

 - Fix for HLSL shaders in one file.

 - Billboard::setColor bug fix by rogerborg.

 - Scene node sorting uses squared distances now.

 - Enhanced API for hte math functions. Many of them will now return a reference to *this for chained method invocations.

 - prevent .x loader to load .xml files.

 - AntiAlias support for OSX device.

 - Period character handling bug fixed.

 - New filesystem methods for filename handling.

 - added getVideoModeList and getDesktopResolution support for OSX

 - Octree supports tangent meshes now. Some performance improvements for the generation.

 - Fix mouse pointer and fullscreen mode problems in OSX.

 - Make cube and sphere scene node a mesh scene node (for access to the cube/sphere mesh).

 - Support for normal maps in 3ds files. Mem leak fixed. Loading for files with keyframe data fixed.

 - BillboardTextSceneNode is now an IBillboardSceneNode and an ITextSceneNode.

 - Support for external windows under Linux.

 - .X loader bug fixes.

 - Better debug visualization for MeshSceneNodes.

 - Fixed bug in material serialization when using the NullDriver.

 - Fix for Win32 CursorControl::setVisible

 - Support for LWO files.

 - Support for Collada 1.4 files.

 - Better and faster terrain smoothing by Frosty Topaz.

 - Fixed a performance bug in ISceneNode constructor reported by izhbq412

 - Win32 device now makes the cursor invisible immediately when setVisible(false) is called.

 - Command line tool for mesh conversion added.

 - Added volume light scene node

 - .obj files now won't duplicate vertices unnecessarily. This allows recalculation of smooth normals and other things, and is also faster when rendering. The loading is a little slower now.
   They also support normal maps and texture clamping now. Group support added, can be ignored via scene manager attribute scene::OBJ_LOADER_IGNORE_GROUPS.
   Normals will be calculated if the file doesn't provide them.

 - Better fix for hires timers on dual core machines by RogerBorg

 - added Initial Windows Mobile 6 Version.
  - Windows Mobile 6 SDK
  - Visual Studio 2005

 - Added checks to avoid buffer overrun in b3d loader. Enabled normals calculation in all cases, previously it was not done for lightmapped meshes.
   Fixed transparency support. Added mipmap creation flag support which might disable mipmap creation too often. Should be checked.

 - Burningvideo: MipMap Selection repaired

 - renamed private Driver function getTextureSizeFromImageSize to getTextureSizeFromSurfaceSize

 - Added collision manager speedup patch by RogerBorg.

 - D3D drivers now releases the IImage member from initialization, thus freeing lots of memory. The image is accessible via the driver anyway.

 - SDL device character handling enhanced.

 - MeshBuffers can now access the elements of the S3DVertex base class in all vertex types directly, instead of using the getVertices() pointer access. This simplifies simple mesh manipulations as it does not require a switch statement over all vertex types.

 - More OpenGL renderstate bugs fixed

 - GLSL changes for setting arrays. Also allow for only pixel or vertex shader to be set.

 - Bugfix for removeChild in AnimatedMeshSceneNode.

 - Some bugfixes for Joint handling and skinned meshes. Added getJointCount in IAnimatedMeshSceneNode and isStatic in ISkinnedMesh.

 - Added WAL image format support based on the original loader by Murphy McCauley, written for Irrlicht around version 0.7.

 - OpenGL RTTs now also support alpha values.

 - New method driver->getVendorInfo() to query information about the actual hardware driver.

 - Fixed somed CQuake3ShaderSceneNode problems.

 - Changed BurningsVideo internal Vertex Format. version changed to 0.39

 - SceneManager:
   Removed the seperate rendering states for quake3 Shader Scene Nodes.
   Nodes are now solid or transparent. ( but still more states are needed )

 - GUI:

   - Editbox didn't draw children
   - Checking IsEnabled is now consistent across all GUI elements
   - Move window to front bug fixed.
   - Disabling the BMP loader now compiles without the built-in font
   - Added setTextAlignment to IGUIComboBox
   - Avoid dropping skin pointer which is in use.
   - Better warning for fonts without regions (sometimes wrong file is loaded by the user).
   - Fixed a bug in CGUISpriteBank which caused a crash when a non-looping animated sprite reached the end of its animation.
   - Modal screens no longer flash invisible children when rejecting a focus change.
   - Finally added StarSonata patch with table element and TabControl additions. Table is based on MultiColor listbox by Acki, and has loads of changes by CuteAlien.

-------------------------------------------
Changes in version 1.4.2 (22.9.2008)

 - Unified the handling of zwrite enable with transparent materials on all hw accelerated drivers. This means that all transparent materials will now disable ZWrite, ignoring the material flag.
   There is a scene manager attribute, though, which will revert this behavior to the usual SMaterial driven way. Simply call
   SceneManager->getParameters()->setAttribute(scene::ALLOW_ZWRITE_ON_TRANSPARENT, true) and set the SMaterial flag as desired.

 - Some changes for texture matrices in q3 shaders.

 - Added BlindSide's irrAllocator patch for proper TextureMatrix release under Win32 with any CRT library.

 - Added VC9 project files.

 - Added getEmitter for particle system scene nodes.

 - Fixed rounding problem in getScreenCoordinatesFrom3DPosition

 - Fixed Software renderer color flicker, was a shift bug I believe.

 - irrMap fix to make root node always black, by rogerborg.

 - Possible core dump fixed in particle system node, by CuteAlien.

 - Mem leak fixed in b3d loader.

 - Avoid double rendering of child nodes of joints.

 - Support for d3d draw2dimage clipping by CuteAlien.

 - Fixed an animation transition bug, pointed out by wuallen.

 - Fixed the major problem with OpenGL drivers, that claim to be 2.x compatible, but don't offer NPOT support (well, they do, but only in sw rendering...). Now we check for the extension string only.

 - Fixed .obj loader bug which inserted vertices in wrong buffers.

 - Fixed minor mem leak in Linux device.

-------------------------------------------
Changes in version 1.4.1 (04 Jun 2008)

 - MD3 meshes are movable again.

 - New JPG image writer version by Vitek.

 - Texture matrix fixes, all methods should now work as expected.

 - Some container methods now return the this pointer after member functions have been called on them, in order to allow call chains.

 - Some new methods for SColorf access, for uniform API of all colors.

 - bug fix for SMaterialLayer equality check. Did only check the TextureMatrix pointers, instead of the matrices.

 - New getMesh method for the SceneManager, which takes an IReadFile instead of a filename.

 - Support for flags _WIN32 and _WIN64 in addition to WIN32 and WIN64 added, this simplifies usage of Irrlicht headers under MSVC.

 - Fixed a crash in GUIMeshViewer

 - new string method findLastChar by Halifax

 - GUIEditBox got the 1 pixel shift after click fixed.

 - Some debug visualization has been fixed for skinned meshes

 - Undef PI symbol before declaring core::PI to avoid compilation problems

 - SAnimatedMesh now properly returns properties of Meshes[0] if those exist, such that it should be usable in place of an SMesh again.

 - Fixed 2d initialisation in opengl and d3d9 driver. This should fix problems with render states mixing up and distrubing, e.g. skin effects.

 - Avoid a crash when passing setSkin the current skin


 - Fixed current frame calculation for non-looped animations. Bug reported by greenya.

 - Fixed bug in CBillboardSceneNode::setColor, reported by rogerborg

 - Fixed clipping of menu, toolbar and combo box GUI elements, reported by greenya
   - setNotClipped now applies all the way up to the root of the GUI environment, rather than just to the next parent

 - Made new scene managers use the original manager's GUIEnvironment, reported by MasterGod

 - Fixed IGUICheckBox::setEnabled, reported by Dorth

 - Fixed the FollowSpline animator to avoid crashes when only one waypoint is given.

 - OpenGL VolumeShadow now uses glPolygonOffset to avoid zbuffer artifacts.

 - Fixed meshbuffer corruption in append methods.

 - Fixed mem leaks in irrArray.

 - Fixed minor bugs in ISceneNode and ISceneManager.

 - Fixed the MeshCache handling of GeometryCreator meshes.

 - Terrain LOD bugfix.

 - Some Collada 1.3 loader enhancements and bug fixes.

 - Fixed a bug in CGUISpriteBank which caused a crash when a non-looping animated sprite reached the end of its animation.

 - Enhanced the .obj loader with the patch from ryanclark. This allows for recalculation of smoothed normals of the mesh, also should decrease the tri count on some meshes.

 - Avoid the global Logger to be destroyed too early.

 - Function setbit was renamed to setbit_cond to avoid name clashes.

 - Fixed .x animations with multiple references to the same joint from different meshes. Fixed texture path problems.

 - Support for Milkshape 1.8 files, also with multiple weights per joint.

 - The config file now also supports _IRR_OSX_PLATFORM_ and _IRR_USE_OSX_DEVICE_. This allows to use the Linux device (X11 support) on OSX.

 - Avoid terrain scene node crash when heightmap cannot be loaded.

 - Speed improvements for WaterSceneNode.

 - FlyCircle animator now also works for upvectors (Direction parameter) which are not (0,1,0). Is also faster now, since most calculations are done on init. Thanks to Dorth for working on this.

 - The 3ds loader correctly creates a texture matrix when texture tiling properties are found in the file.

 - Fix for S3DVertex comparison operators. Used some wrong logic.

 - Bugfix getCurrentRenderTargetSize in D3D drivers. Due to signature differences a wrong virtual method was chosen. Thanks to Jiang for finding it.

-------------------------------------------
Changes in version 1.4 (30 Nov 2007)

 - Major API change: All material properties which are available per texture layer (curently texture, texture matrix, texture filters, and texture wrap mode) are separated into a new struct SMaterialLayer. You can access them via the array TextureLayer[] in SMaterial. The texture matrix methods in SMaterial are still alive, and also textures can be accessed via methods in SMaterial now. But still, many places in user code need some update (usually changing material.Textures[i] to material.TextureLayer[i].Texture etc.)

 - Major API rewriting for proper const usage. Now, most getter methods are const and so are the larger parameters and return values. Moreover, many methods taking only unsigned numbers now use u32 instead of s32 in order to recognize this limitation from the method's signature.

 - the base class for nearly all Irrlicht classes has been renamed from IUnknown to IReferenceCounted

 - Fixed Skybox texture orientations. They are now displayed non-flipped. Existing skyboxes have to be changed, though: Exchange left and right texture. Textures from Terragen and other tools can be used directly, now. Quake maps will also need the right/left exchange.

 - Added ITexture::isRenderTarget()

 - Added STL mesh file format reader and writer.

 - Added IMeshManipulator::createMeshWelded which creates a copy of the mesh with similar vertices welded together.

 - Irrlicht now has its own file format for static meshes. It is based on xml and has the
   extension .irrmesh. Irrlicht is able to write every IMesh to this file format, and of course to
   read it back again.

 - Irrlicht is now able to write Meshes out into files. Use ISceneManager::createMeshWriter()
   to obtain an interface with which you can write out meshes. Currently, an own .irrmesh
   file format is supported as well as the COLLADA file format.

 - fixed the keyboard autorepeat difference between Linux and Windows. Thanks to denton we now have only KeyPressed events on both systems in case of autorepeat.

 - Added several new particle emitters and affectors from IrrSpintz. Also some new getter and setter methods were added.

 - D3D transparent materials do not disable zbuffer writing automatically anymore. This has to be done by the user to keep those settings configurable.

 - OpenGL texture now also require a regenerateMipmapLevels() after unlocking. This is the same as for d3d devices now.

 - Point sprite support in the driver. Point sprites use just one 3d vertex and a size to create a textured billboard on the GPU. This can provide fast particle systems, especially in combination with shaders. The proper particle extension will follow later on as it needs some more refactoring.

 - OpenGL 2D drawing accuracy fix by tuXXX

 - Added OnResize and getCurrentRenderTargetSize to the software video drivers.

 - Added Spot light type for dynamic lights. Note that both position and direction for all dynamic lights are now determined by the LightSceneNode, the SLight attributes are only used for internal purposes.
   API change! One can easily work around this change by setting the LightSceneNode's Position and Rotation instead of the SLight's. This change won't provoke a compile error, though, and can hence go unrecognized besides the visual problems.
   The lights use a default direction (0,0,-1) which is rotated by the usual scene node transformations and can hence be modified by scene node animators.
   A change in the Radius usage can lead to strange artifacts. Just increase the Radius in this case. further handling of Radius is to be discussed.

 - Added per pixel fog support for OpenGL.

 - Added driver support for user defined clip planes, based on mandrav's patch.
   The OpenGL version is more picky about ModelView matrices, so it's best to set the projection plane at the time it is used.

 - .obj files now load relative indices correctly. Collada files load textures.

 - A new MeshBuffer implementation is publicly available. It supports a shared vertex list for all MeshBuffers, used for MS3D meshes.

 - MeshBuffers can recalculate their BoundingBoxes on their own now, no need for MeshManipulators. New append methods help to merge MeshBuffers. take care that the types match!

 - The new texture generation mode is working. With ETCF_NO_ALPHA_CHANNEL textures are generated without ALPHA bits reserved.

 - D3D9 hardware mipmap updates are re-enabled, problems should be reported.

 - In some cases fullscreeen modes under win32 should have a better frame rate now.

 - Fixed the hillplane mesh to work with non-quadratic dimensions as well. Changed the interface also, so use a u32 dimension to specify the tilecount now.

 - Hires timers are disabled on windows systems with more than one CPU, due to bugs
   in the BIOS of many multi-core motherboards. To enable hires timers in your project,
   use SetProcessAffinityMask to set to use only one CPU before creating the device.

 - OpenGL render targets now the same way up as the other drivers. If you have
   written opengl shaders that use render targets then you'll need to change your
   texture coordinates accordingly.

 - Fixed some OpenGL renderstate stuff. setBasicRenderstate returns with
   active texture layer 0. The material renderer must return from OnUnset
   with the same active texture layer. The alpha test is disabled and the
   texture mode should be GL_MODULATE.

 - Fixed CSoftwareTexture2::getOriginalSize, reported by CaptainPants. Added a
   new method CSoftwareTexture2::getMaxMipMapSize to return the size of the largest
   mipmap, which is used by texelarea instead of getOriginalSize.

 - Changed parameter order of addArrowMesh and added default parameters such
   that it's enough to set the color (or even just the name).

 - Fixed bugs in MY3D and OBJ loader.

 - Added IMeshCache::clearUnusedMeshes(). This allows the user to remove
   meshes that are sitting in the mesh cache but aren't used by any scene nodes.
   This is useful for example when changing levels.

 - Added IUnknown::getReferenceCount()

 - createDevice now reports errors if the driverType is unknown, previously it
   created a window but populated it with a null driver without any warning.

 - Fixed a bug in CBillboardTextSceneNode::setText where the old text was not
   cleared.

 - Changed irrArray::linear_search to use the == operator rather than <
   This may be slower in some cases, but it no longer returns false positives
   when searching arrays of classes that override the < operator but
   !(x<y) && !(y<x) does not necessarily mean x==y (vectors, positions etc).

 - Fixed getSize/getOriginalSize method inversion in OpenGL textures.

 - Added per texture-layer filter settings, i.e. one can choose to filter
   only chosen texture layers. If all layers are set to the same value the
   convenience function material.setFlag(EMF_BILINEAR_FILTER, boolean) can be
   used, TRILINEAR_FILTER and ANISOTROPIC_FILTER do work, too. In all other
   cases material.BilinearFilter[i] (resp. TrilinerFilter[i] or
   AnisotropicFilter[i]) shall are to be used.

 - Added adjustable Attenuation for dynamic lights. This allows to change the
   intensity of a light based on its distance. The default attenuation changed
   from (0,1/radius,0) to (1,0,0) which means no effect by distance. Good
   values for distance effects simply add small values to the second and third
   element.

 - Fixed a typo to do with 2nd light vectors in opengl parallax and normal map
   renderers.

GUI:

 - Fixes to menu and listbox (de)serialization, and custom listbox colors by CuteAlien.

 - Added EGET_ELEMENT_CLOSED GUI event type. Absorb this event to cancel closing a window.

 - Added _IRR_COMPILE_WITH_GUI_ to allow compiling without the GUI.
   This is useful if you use another GUI system (ie CEGUI) or are using Irrlicht
   inside another window. You will have to supply an external IGUIFont if you wish
   to use font scene nodes as there will be no GUI environment available to load fonts.

 - Added 7 more symbols to the built-in font and skin.
   EGDI_MORE_LEFT, EGDI_MORE_RIGHT, EGDI_MORE_UP, EGDI_MORE_DOWN: "<<" symbols
   indicating there is more content in that direction.
   EGDI_WINDOW_RESIZE: Window symbol for resizing by clicking the bottom right
   corner of a window.
   EGDI_EXPAND, EGDI_COLLAPSE: Plus and minus buttons for trees.

 - Added IGUISkin::draw2dRectangle, so skins can override the default highlight.

 - EGET_ELEMENT_FOCUS_LOST and EGET_ELEMENT_FOCUSED events can now be absorbed
   by returning true in OnEvent. Absorbing these events will cancel the focus
   change.

 - IGUIEnvironment::setFocus and removeFocus now return bools.

 - New SEvent.GUIEvent.Element. Points to a second element that is being
   used in the event. During a EGET_ELEMENT_FOCUS_LOST event it points
   to the element which would like the focus.

 - Fixed the default font icons so they have a black border and are not
   invisible in default listboxes. Old font tool textures now keep their color
   so colorful fonts are possible by editing the font's texture. The colors of
   completely transparent areas are no longer kept when generating the texture
   from an image. Added builtInFont.bmp for ease of editing.

 - IGUIElement changes:

     Most elements can now be accessed using the keyboard. Use space and return
     to select or deselect, escape to cancel selection (ie while pressing a
     button with space or return), and the cursor keys where appropriate.

     Added navigation through the GUI using tab and the shift and control keys.
     Use these new methods to control tab navigation:
       setTabStop - set this to true if the focus will vist the element.
       isTabStop - returns true if the focus will visit the element.
       setTabOrder - Sets the order of focus within this tab group,
         Only one element in each group should have the same TabOrder number.
         Set to -1 to add to the end of the group.
       setTabGroup - set this to true if the element is a group that contains
         other elements, and can be navigated with ctrl+tab/ctrl+shift+tab.
       isTabGroup - returns true if the element is a tab group.
       getTabGroup - returns the tab group that the element belongs to.
       getNextElement - searches for the next element which would be focused
         within the element's children, only useful if you are doing your own
         custom navigation.

     Added isMychild, to check if an element is descended from this one.

     Added isPointInside, which is called by getElementFromPoint. Override this
     when making non-rectangular elements.

     OnEvent no longer absorbs events by default.

     Serialize/deserialize now call getter and setter functions, in case people
     override these and don't use the internal protected variables.

     added getAbsoluteClippingRect, returns the visible area of an element.

 - Added IGUISpinBox, by Michael Zeilfelder (CuteAlien).

 - IGUIEditBox new methods:
   setWordWrap/isWordWrapEnabled, to split words on to the next line.
   setMultiLine and isMultiLineEnabled, inserts a newline instead of sending
   EGET_EDITBOX_ENTER events.
   setPasswordBox/isPasswordBox to use the edit box for password input.
   setTextAlignment, to align the text to left, right, top, bottom and centers
   setAutoScroll, to enable and disable automatic scrolling with the cursor

 - IGUIStaticText new methods setDrawBorder and setTextAlignment.

 - IGUIListBox changes:
   Added setAutoScrollEnabled and isAutoScrollEnabled, for automatic scrolling
   when selecting or adding an item.
   Scrollbars are now only visible when the list doesn't fit in the visible area.
   You can now type an item's text to select it.

 - IGUIScrollBar new methods set/getLargeStep

-------------------------------------------
Changes in version 1.3.1 (20 Jun 2007)

 - Fixed a bug with negative exponents in fast_atof, posted by RVL

 - renamed IAnimatedMeshSceneNode::getAbsoluteTransformation to
   getMD3TagTransformation to avoid conflicts with
   ISceneNode::getAbsoluteTransformation

 - Added rect::constrainTo for locking a rectangle inside another without
   resizing it

 - Moved the OpenGL API functions from COpenGL driver into new extension
   handler. Thereby, some renaming took place - the ARB and EXT suffix was
   removed. Simply rename the functions in case you use them.

 - matrix4 is now a template internally such that also int and double matrices
   are possible now.

 - CMeshBuffer is a new template replacing all previous SMeshBuffer* classes.
   New mesh buffers can be easily implemented based on this code.

 - Ogre 1.40 files now also load.

 - New filename based methods in the MeshCache.

 - CSphereSceneNode is now texture wrapped with sphere mapping by exactly one
   texture. Only a small error on the top remained.

 - The Sky box scene node now clamps its textures by default (meaning no
   more ugly artifacts at the borders).

 - Frustum culling fixed by using the fixed classifyPointRelation function.

 - Some fixes in the 3d basic structures: plane3d.classifyPointRelation now
   correctly returns the relation, it returned the opposite before. Also
   renamed existsInterSection to existsIntersection for consistency.
   triangle3d.isOnSameSide is now private - it's just a helper class not
   intended for further use.

 - Added IFileSystem::getFileDir, to get the directory when given a file
   name. Submitted by Jeff Myers

 - Updated to latest PNG library (1.2.18), fixing a vulnerability.
   Also changed some data structures which should make the library 64bit
   compatible.

 - Changed the external window pointer from s32 to void*. This makes the
   mechanism 64bit safe, but also breaks the API. You have to cast to
   void* now.

 - Moved image scaling algorithms to CImage class and made them public. This
   replaces lots of code from the hardware textures. It should also fix the
   missing MipMaps in OpenGL if the driver does not support mipmap generation.

 - Added support for texture creation flags in OpenGL. This changes some
   textures to other color formats than in previous versions.

 - MD2 normals fixed.

 - Some defines for the platform choice have changed their names and semantics.
   E.g. IRR_LINUX is now _IRR_LINUX_PLATFORM_ for os specific things and
   _IRR_USE_LINUX_DEVICE_ to choose the original X11 IrrLinux device.

 - Added an SDL device for cross-platform window support. Especially useful
   for embedded systems and others without hardware acceleration. This device
   is mutually exclusive with the other devices and requires linking against
   the SDL library.

 - Q3 shader crash fix.

 - Fixed the too small D3D texture bug.

 - The OpenGL texture is internally stored as a CImage now.

 - Fixed some Borland compiler problems.

 - ShadowVolume init bug fixed.

 - MS3D rotation bug fixed.

 - setFrameLoop bug fixed.

 - Fixed OpenGL's draw2DImage texture inits to avoid texture confusion.

 - Fixed getHeight from terrain scene node.

 - The FPS counter now works as in previous releases, the accumulating counter
   can be enabled by a parameter.

 - getType() is now const correct (API Changes)

 - Added scissor test to opengl draw2DImage method that ignored clip.

 - Fixed a bug in rect::isValid, it was almost always true.

 - Fixed wrong particle emission.

 - Added LinuxDevice setResizeAble implementation.

 - Enumeration values of the ESCENE_NODE_TYPE enum are no longer ints but four
   character codes. If you were using them as index previously, this is no longer possible.

 - There is now a way to set which scene manager should recieve user input, when working
   with multiple scene managers: IrrlichtDevice::setInputReceivingSceneManager().

 - ICursorControl now supports setting a reference rectangle.
   If this rect is set, the cursor position is not being calculated relative to
   the rendering window but to this rect. You can set the rect pointer to 0 to disable
   this feature again. This feature is useful when rendering into parts of foreign windows
   for example in an editor. See ICursorControl::setReferenceRect() for details.
   (Windows only implementation currently)

 - It is now possible to clone single scene nodes (ISceneNode::clone()) and to create copies
   of a whole scene graph (ISceneManager::createNewSceneManager(cloneContent=true);

 - IAttributes now supports a user pointer (void*)

 - Added query methods to scene manager: Find Scene nodes by type
    getSceneNodesFromType

 - Added min and max functions with 3 values: core::min_ and core::max_

 - Fixed a crash when using Octtrees caused by unnecessary dropping of meshes when
   deserializing the scene node.

 - Removed an array::erase from Octtrees and Octtree triangle selector.

 - Removed a bug which caused irrlicht to crash when using animated .x files as static meshes.

GUI:

  - Added EGUI_DEFAULT_FONT for skins, default fonts can now be set for windows, menus, buttons and tooltips.
    use IGUISkin::setFont and getFont to use them. Fonts are not serialized with saveGUI yet

  - Added EGDC_TOOLTIP_BACKGROUND for setting background color of tooltips.

  - Tooltips now appear relative to mouse position, also they do not appear for 500ms.

  - Fixed a memory leak when dropping the GUIEnvironment when a tooltip was present.

  - Added IGUIStaticText::setDrawBackground and IGUIStaticText::setBackgroundColor.

  - Fixed a messagebox focus bug when no 'okay' button was present.

  - Added setColor and setScaleImage to GUIImage.

  - GUIListBox highlighted area now clips properly.

  - added getOSOperator to GUIEnvironment (for clipboard access in elements) and updated CGUIEditBox.

  - Can now load/save gui environment from/to an element.

  - Most element set functions now have a corresponding get or is function.
   (API change) IGUIButton::getUseAlphaChannel is now isAlphaChannelUsed, to fit with other is* functions.

  - Fixed a bug with resizing the gui environment when the device is resized

  - Modal screens now resize to fit their parent.

  - XML bitmap fonts now load textures from the XML file directory rather than the current one.

  - Fixed a small bug with click areas in combo boxes.

  - Fixed a bug in clear() when an element was hovered or had focus

  - Fixed a bug when loading fonts with uppercase letters in the name in case-sensitive filesystems

GUI Editor:

  - Added cut/copy/paste using clipboard and xml (via memory file). Will have problems in Linux due
    to no clipboard support

  - Added texture attribute element

  - Added CGUIPanel, a container with optional scrollbars. Originally submitted by Asger Feldthaus

-------------------------------------------
Changes in version 1.3 (15 Mar 2007)

- SMaterial structure changed:
   - Enable Irrlicht to change TextureAddress Mode (Clamping), for each layer separately
   - Added Texture matrices to SMaterial for all texture layers
   - Removed the anonymous union/struct access to textures and material flags.
    Now, Texture1..4 is removed - use Textures[i] instead
    The Flags[x] is replaced by setFlags(x, bool) resp. getFlags(x)

- The methods OnPreRender and OnPostRender of ISceneNode have been changed to
  OnRegisterSceneNode() and OnAnimate(). Also, they are now called at different
  times: OnAnimate is called every frame before anything else, removing the
  one-frame-lag Irrlicht suffered until now. To make most of your own scene
  nodes work again, it should be enough to rename OnPreRender()
  to OnRegisterSceneNode() and OnPostRender() to OnAnimate() in most cases.

- ISceneNode::getMaterialCount and getMaterial now use u32 instead of s32. You will also need
  to update this in your custom scene nodes.

- matrix4 speed enhancement, testing for identity before multiply. faster check for identity
  for the positive case using an additional boolean flag.
  The internal array M is now private, changing the API. Use mat[x] instead of mat.M[x].
  The pointer to M is acquired by mat.pointer(), some methods take a matrix4 reference
  instead of a f32*.

- Some more suppport for tangent meshes

- Several alpha blend fixes in several drivers and methods

Font improvements:

  - Changed built-in IGUIFont to IGUIFontBitmap and added options for more fonts.
    CGUIFont now supports UCS-2 and may span many textures, loads from XML (Unicode support planned)

  - Started a font tool for creating the new XML fonts, including generating vector fonts
    (currently not backward compatible with old fonts, only works for Win2K+, some bugs still)

  - Font interface now supports kerning- kerning pairs, per letter and global kerning widths,
    although he internal font only supports global and per-letter.

  - added _IRR_COMPILE_WITH_SOFTWARE_ and _IRR_COMPILE_WITH_BURNINGSVIDEO_ to compile config


- GUI enhancements:

  - GUI Serialization with loadGUI and saveGUI, and serializable custom GUI elements via factories

  - Started a GUI Editor as a GUI element factory example (work in progress)

  - New IGUIElement functions: isSubElement & setSubElement for child elements created by their parents
    (eg. a scrollbar on a list box). Set it if you don't want an element to be serialized

  - New GUI event, EGET_ELEMENT_FOCUSED

  - GUI environment ELEMENT_FOCUS_LOST event now sets the element as the caller, focus_lost events
    are now usually passed to parent elements, so elements now check if they are the caller before
    updating (so users can catch focus lost events without them being eaten by the elements)

  - Buttons, checkboxes and tab controls now only activate when the mouse is released over them.

  - Windows mouse-up events are now caught outside the window, so mouse coords may now be negative.
    could cause problems with draggable user windows, as they may now be dragged off screen.

  - Elements can now automatically resize to fit their parents, or align themselves to an edge:
    setAlignment(left, right, top, bottom) - sets how each edge aligns to its parent,
    through EGUI_ALIGNMENT enum
    EGUIA_UPPERLEFT - default behavior, aligns to top or left edge
    EGUIA_LOWERRIGHT - aligns to the lower or right edge
    EGUIA_CENTER - moves relative to the center of its parent
    EGUIA_SCALE - uses relative scale

  - setMaxSize, setMinSize - sets the maximum and minimum sizes for automatic resizing,
    use 0 for no maximum size.

  - setRelativePosition now takes a rect<f32> for relative positioning within their parents

  - getFileSystem added to the GUI environment

  - New IGUISpriteBank, used to hold 2d image data like fonts and GUI icons.
    Icons provided by the built-in font are now accessed through the skin's sprite bank.
    Users can override the icons by setting a different sprite bank and setting new sprites.

  - Skins are now serializable and are loaded/saved with the GUI.

  - IGUIStaticText getter/setter functions patch by rogerborg.

- added 3d TextSceneNode2. to view a Text in real 3D Space
   in fact it is a combination of Billboard & TextSceneNode

- Burning Video (the second but only complete software renderer)
  - New Compile Config BURNINGVIDEO_RENDERER_ULTRA_FAST
  - New Compile Config BURNINGVIDEO_RENDERER_FAST
  touching the 20fps border in the demo ( P4 mobile 2Ghz ). 15fps average.
  ( Compile config Release Fast-FPU )

  - VertexCache for Tansformed & Light Vertices
    boost small drawPrimitive Calls ( 2DRectangle, Billboard ) and Real Index Triangles

  - Bilinear Dither
  - clipping test ( compare instead of generic plane normal )
  - support for NOT using vertexcolor
  #define SOFTWARE_DRIVER_2_USE_VERTEX_COLOR

- added vertex to color to billboard.
  shade top & shade down.
  to support some static lighting effect on billboards

- Implemented line rendering for SoftwareDriver

- XMLWriter fix for 32bit wchar_t (esp. for big endian)

- updated to latest PNG library

- implemented CImagerWriterJpeg::writeImage

- The ISceneManager::addCameraSceneNodeFPS() has a new parameter named 'jumpSpeed'
  and a Key Map Entry.

- added param to IIImageWriteFile::writeImage
  control Parameter for the backend ( e.g. jpeg compression level )

- addContextMenu: CGUIEnvironment::addContextMenu set the focus on the submenu.

- Added IFileSystem::createMemoryReadFile for accessing memory like a file.

- Added core::map class submitted by Nastase Catalin (Kat'Oun)

- Fix vertex colors for .x and .ms3d, alpha bug in .obj

- Fixed 16bit depth screens under Windows.

- Implemented getMeshBuffer(SMaterial) for all AnimatedMeshes.
  It was returning 0 for all implementations previously. User defined IMesh derivates
  will also have to implement it now due to the removed empty implementation.

- Added yield() method to IrrlichtDevice which allows to pause the Irrlicht process for
  a very short time. This allows other processes to execute without a major
  penalty for the Irrlicht application.

- Added sleep() methd to IrrlichtDevice, for pausing the Irrlicht process for a longer
  amount of time.

- Auto-split mesh to 16bit buffers in 3ds loader

- 8bit RGB332 image format support

- isActive() under Linux now behaves like the Windows variant: True iff window has focus

- Fixed(?) the glXGetProcAddress problems with different drivers

- B3D changes by Luke:
  Texture scaling bugfix, support for alpha blending, new option to normalise weights,
  animation code optimization, fixed memory leak

- ROUNDING_ERROR is now ROUNDING_ERROR_f32 or ROUNDING_ERROR_f64

- Material ZBuffer flag changed to a u32 value
  Reason: change ( off or on ) to , off, lequal, equal
  Necessary for multi-pass if previous stage has had transparency

- DebugDataVisible is now an enum of flags
  show normals is supported ( uses the new build in arrowmesh )

- New Function: GeometryCreator
  addArrowMesh. build a closed cylinder and a cone
  used to show normals as debug feature

- New Function:
  CMeshManipulator::transformMesh(scene::IMesh* mesh, const core::matrix4& m) const
  transforms VertexPosition and VertexNormal

- BUGFIX: CGUIButton notified Pressed when Mouse was clicked Inside ( correct )
  but also left up outside rectangle ( incorrect)

- BUGFIX: Octree:getPolys(const scene::SViewFrustum& frustum, SIndexData* idxdata)
  was recursive calling invisible children

- CFileList: Changed FileListEntry sorting to
  a) Directory comes first
  b) sorting ignores case
  so it feel's more like common browers

- added a Texture transform to IVideoDriver::setTransform

- quaternion::getmatrix
  in fact the getmatrix version is returning the transposed.
  i'm quite sure that this is the wrong implementation.
  so this should be verified to remove the getmatrix_transposed version...

- Quake3 Map Loader:
  new loading method
  - Bezier Patches with LOD more than 3
  - Multiple Meshes, stay compatible with the previous version
  - Indexed Triangle List
  - initial support for quake3 Shaders and Entities
  - Shaders are parsed. When it's possible to resolve a 2 Texture Scheme it's taken
   Shaders exist in namespace scene::quake3
  - The Example Quake3Map shows how to continue applying the Q3Shaders with SceneNodes
     ( for example animmap converts to TextureAnimator.)
     TODO: use the Irrlicht Variable Syntax to remove redundant code..

- added getVertexPitch() to IMeshBuffer interface

- added generic isupper, isspace.. functions to coreutil.h to remove dependencies for ctype.h
   ( future: it's possibly to use binary comparison test..)
  removed 1000's include of string.h and moved one to irrstring.h
  in preparing of complete removing the MSVC.

- moved fast_atof.h to the public include
  added strtol10 to remove dependencies for stdlib.h
  anyway math.h is needed for powf

- core::vector3d
  added getInterpolated_quadratic.
  vector3d<T> getInterpolated_quadratic(const vector3d<T>& v2, const vector3d<T>& v3, const T d) const
  // this*(1-d)*(1-d) + 2 * v2 * (1-d) + v3 * d * d;

- irrstring: added param start to findLast(T c,  s32 start = -1 )
  reason: to continue searching reverse on a specific position
  (parameter is checked against boundaries )

- added operation reciprocal_squareroot to irrmath.
  core::reciprocal_squareroot = 1.f / sqrtf ( x )
  changed the core::vector3df normalize vector.
  specialized templates are not allowed in irrlicht currently, so it's only for f32 for now.
  a C function and a NVidia Version are in irrmath.h

- add Primitives to CFPSCounter
  and changed interpolation to 1500ms instead of 2000ms
  and rounding to ceiling..

- added Interface setAmbientLight to ISceneManager
  it was a Bug, because SceneManager always calls Driver therefore AmbientLight has to be set in SceneManager.

- changed GUIFont & FontTool to support kerning ( on a global basis )
   very basic mode.. apply an offset for position
   useful for example if you want to apply an outline stroke in your favorite
   and therefore let the texture grow.
   and to correct the border back on drawing, specify the parameter in IGUIFont.
   this is quite useful if you want to use more artistic fonts.
   default = 0
   better kerning would need a seperate coordinate set for each symbol.

- changed MD2_FRAME_SHIFT to lower framerate
  -> lower IPol
  problems can occur if somebody uses hardcoded frame-numbers instead
  of Animation name...

- changed spelling "frustrum" to "frustum"

  -> changed also SViewFrustrum.h to SViewFrustum.h

- changed Parameter AutomaticCulling from bool to enum E_CULLING_TYPE
  to support more than two culling modes.

  added Frustum culling ( it's a copy & paste from the octree )
  added initial bounding sphere
    used for culling point lights..

- Added getSystemMemory and getProcessorSpeedMHz for Windows and Linux to the OSOperator, submitted by Vitek.

-------------------------------------------
Changes in version 1.2 (29 Nov 2006)

- Added Solaris/Sparc port (basically some compiler define statements). Irrlicht and the examples should compile out-of-the-box on Suns with the usual Makefiles and gnumake.

- Added texture matrix support for hardware accelerated drivers. This allows for efficient texture coord manipulations for complete meshes at once.

- Multisampling with OpenGL under Linux added

- Non-power-of-two textures are left unscaled if the driver supports such textures.

- new draw2DImage method that speeds up drawing many quads from the same texture. Font drawing is improved by this under OpenGL.

- TGA files are now always correctly flipped and loaded if compressed. All PNG color formats are now supported, including correct alpha handling.

- 3ds mesh loader fix in texture loading, now loads some textures that were not loaded before, but might introduce problems with very recent files. OGRE mesh loader bugfixes and lightmap support. Several B3d mesh loader updates. Obj and mtl loader enhancements.

- A new compile flag (IRR_OPENGL_USE_EXTPOINTER) allows Irrlicht to either use OpenGL extension function pointers or direct OpenGL calls.

- OpenGL now uses frame buffer objects for render targets larger than the screen, supplied by Mandrav

- Split ESNRP_LIGHT_AND_CAMERA passes into ESNRP_LIGHT and ESNRP_CAMERA to fix a problem with lights being rendered before cameras in OpenGL (thanks again to Vitek for finding this). ESNRP_LIGHT_AND_CAMERA is now deprecated.

- Fixed many OpenGL render state problems which were related to wrong texture states. The textures are now enabled and disabled by the material renderers in OnSetMaterial. Also enabled the texture state cache which helps preventing texture changes just as the one for D3Dx. Thanks to hey_i_am_real for some good hints on where the problem was located.

- Added compile flag _IRR_COMPILE_WITH_X11_ which is by default enabled. Disabling the flag removes all X11 dependencies from Irrlicht and allows for a headless Linux Irrlicht server - added by request :-)

- Win32 OpenGL driver tries to use the requested bpp size.

- Default texture format is now A8R8G8B8 if not explicitly specified. This fixes some color artifacts with lightmaps. Bugfix submitted by hey_i_am_real.

- In OnPostRender all transformations were taken as relative and multiplied with the root transformation matrix every time due to a wrong check for the real root node. This shoudl increase render performance for scenes with lots of (invisible) nodes.

- Added correct list copy constructor.

- Color selection dialog added.

- New GUI skin "Burning Skin".
  it's a black & white skin. look elegant on true-color.
  and looks ok on 1-Bit ( e.g. no vertex color in burnings video )

- GUIStatic text is correctly grayed out if disabled.

- Added getHeight method for terrain node submitted by Spintz. It calculates the height from the base mesh instead of requiring ray casts and collision detection and is much faster.

- New methods core::lerp to linearly interpolate two floats and SColor.getLuminance to calculate luminance of RGB color.

- MAJOR API CHANGE:
  Fixed matrix access methods mat(x,y). These were previously said to be (row,column) but actually were (column, row). This lead to some confusion and made their use quite tricky. Irrlicht code is updated for the new method, but applications will silently fail now (i.e. compile without errors, but not working as expected).

- Update to zlib-1.2.3

- Fixed vertex alpha handling in DirectX drivers.

- Image writers fixed and working (at least for little endian systems).

- VSync under Linux fixed and correctly working.

- New os::Byteswap::byteswap methods which can be used for byteswapping (endianess correction) in mesh loaders and image loaders.

- New video driver feature to check for multitexture feature.

- Direct3D drivers update the devicelost variable if reseeting failed with this return code.

- VideoModeList under Linux is correctly filled now. No glX calls are made if GLX extension is not found - only software drivers are available then. RandR extension can be enabled with a new compile flag in IrrCompileConfig.h, either instead of XF86VidMode or in addition.

- Big Endian support for MS3D loader.

- Apfelbaum software renderer: basic mipmap support (per triangle), switch for using w-buffer instad z-buffer ( default on )

- Better FPU support: Changed various fpu-call's in whole project (main reason to use faster float to int conversion on x86. ( fistp ))

- changed Visual Studio 7.1 vcproj project config "Release Fast FPU" to __fastcall in /QIfist

- CGUIFont added True Alpha Font Support. (currently it's a little hack, but it'a good starting point. Fonts are back compatible. To use the new feature make first pixel half transparent in the font file.)

- Scolor: replaced s16 color with u16 color, replaced s32 color with u32 color to get rid of unnecessary arithmetic shift

- Colorconverter: X8R8G8B8toA1R5G5B5, set Alpha High, minor: A1R5G5B5toA8R8G8B8   changed if (a) to conditional set

- CImage: added boxfilter (weigthed average), (generic, slow)

- The scene manager now sets an ambient light color when calling ISceneManager::drawAll().
  You can influence this by calling ISceneManager::setAmbientLight(). That light color
  is also stored when saving .irr files via ISceneManager::saveScene().

- Loaded COLLADA files which contained only one single mesh now behave like all the
  other loaded meshes, and the #meshname workaround has been removed.

- File lists are now sorted.

- Dynamically checking the OpenGL version now instead of at compile time to call the supported methods of the executing machine, not that one of the compile host. This should fix the extension check and the automatic mipmap update.

- Fixed vertex alpha handling of 2D images with OpenGL.

- Default depth buffer under Windows now 24bit to avoid zbuffer fighting.

- Fixed light count in OpenGL.

- Particle emitters can now be enabled/disabled via a new method.

- Sky dome is rotatable just like the sky box.

- Rotation animator can be applied to several nodes now, before it only rotated the first one it was applied to.

- Support for drawing other vertex primitive lists such as triangle strips.

- Default specular color is white again, thus simply enabling shininess is enough to get speculars.

- Some .x loader and animator improvements. Vertex color support.

- isActive now also work under Linux.

-------------------------------------------

Changes in version 1.1 (06 Aug 2006)

- New example to show some features of the .irr format

- Added support for making screenshots in all video drivers and a general
  possibility to save any IImage to several file formats.
  Some image writers are not yet implemented. As a testcase screenshots
  are now available in the demo by pressing F9.
  This code was contributed by Travis Vitek.

- Changed EAMTS_OCT to EAMT_OCT.

- Improved .3ds and .obj file importers.

- Added support for .b3d (Blitz Basic) submitted by Luke Hoschke and
  .pak (Quake archive) files submitted by skreamz.

- Added sky dome implementation contributed by Anders la Cour-Harbo (alc).

- In addition to the Cube scene node (formerly test scene node) there is now also a sphere scene node available,
  with an adjustable amount of polygons. Use ISceneManager::addSphereSceneNode to create it.
  Thx to Alfaz93 for making available his code on which this node is based on.
  Note that both nodes now use default material settings, e.g. lighting is enabled by default.

- Fixed Linux keyhandling for many keys.

- The aspect ratio has been inverted in the matrix, which means when setting a new aspect ratio
  for cameras, set it to screen.width/screen.height now instead of screen.height/screen.width
  as previously.

- added support for reading/importing binary .x files.

- .ms3d and .x normals are now correctly transformed in animations, bounding
  boxes are slightly better transformed, but not yet correct.

- Added possibility to load and save Irrlicht scenes to and from xml files via
  ISceneManager::saveScene and ISceneManager::loadScene. Note that not all
  scene nodes are supported yet, but most features should already work.

- Bounding box of the Skybox corrected (set to null)

- The SMaterial structure now supports 4 textures. (Currently ignored by the renderers and their materials.)

- Test scene node renamed to CubeSceneNode.

- Added scene node animator factories. This is the same as scene node
  factories, but for scene node animators.

- Added scene node factories. This is an interface making it possible to dynamicly
  create scene nodes. To be able to add custom scene nodes to Irrlicht and
  to make it possible for the scene manager to save and load those external scene nodes, simply
  implement this interface and register it in you scene manager via ISceneManager::
  registerSceneNodeFactory

- Introduced IMeshSceneNode interface with the possibility to set readonly materials to make
  it possible to use the mesh materials directly instead of overriding them. In this way
  it is possible to change the materials of a mesh causing all mesh scene nodes
  referencing this mesh to change, too.

- Added possibility to load OGRE .mesh files directly, thanks to Christian Stehno who contributed
  a loader for this.

- Merged with Irrlicht 1.0 for MacOS

- Added a method getType() to ISceneNodeAnimator.

- There is now a system to serialize and deserialize attributes of scene nodes. In this way
  it should be quite simple to to expose the attributes of your scene node for scripting
  languages, editors, debuggers or xml serialization purposes.

- Irrlicht containers and strings now have allocators, making it possible to
  use them across .dll boundaries.

- Changed the name of scene nodes from wide character to to char* for speed and memory reasons.

- Renamed IStringParameter class to IAttributes and enhanced it to be able to
  serialize its content into and from xml.

- Textures now have a method getName().

- Added the methods getTextureCount() and getTextureByIndex() to IVideoDriver.

- Most classes now derive virtually from IUnknown.

-------------------------------------------
Changes in version 1.0 (19 Apr 2006)

- Irrlicht now will load d3d 9 dlls (like d3dx9_27.dll) manually if needed. If you compile irrlicht
  with an SDK which needs one of these dlls, irrlicht will now also start up on a pc without
  these Dlls installed. Note that now these dlls will also only be loaded if your application
  uses shaders. If the dlls are missing, shader support will be disabled.

- The Apfelbaum Software Software Renderer now works in 32 bit and is capable of rendering dynamic
  lighting as well as doing alpha channel blending.

- Added support for the Code::Blocks IDE (http://www.codeblocks.org)

- It is now possible to draw temporarily to foreign windows, by specifying a window handle when
  calling IVideoDriver::endScene(). Note: This does not work in fullscreen mode and is not
  implemented for all devices (only for  D3D8, D3D9, Software1 and Software2, and only for Windows).
  In addition, you can also specify the source rectangle to present.

- Picking is now more accurate and also works with view ports and better with orthogonal cameras.

- Scene Nodes now have an additional flag, IsDebugObject. This denotes if a
  scene node is a debug object. Debug objects have some special properties,
  for example they can be easily excluded
  from collision detection, picking or from serialization, etc.

- Scene Nodes now have the possibility to return their type using
  virtual ESCENE_NODE_TYPE getType().

- Improved support for orthogonal rendering: Skyboxes and billboards can be
  used with orthogonal cameras now, too.

- Fixed a bug in collision

- Fixed some marshalling bugs in Irrlicht.NET

- Some fixes to make gcc 4 happy.

- Fixed a bug which caused the engine to crash when trying to use the
  apfelbaum software rasterizer with linux

- Several improvements to Irrlicht.NET, for example string output for vectors, viewfrustrum access
  for cameras, drawing of bounding boxes, support for orthogonal cameras.

- Updated DMF importer to support new DeleD functionalities, solid materials will now be
  shown correctly again in Irrlicht.  Thanks to Salvatore "Il Buzzo".

- Added a method to change the return value of ICameraSceneNode::isOrthogonal

- Improved md2 animation playback

- Fixed the REFLECTION_2_LAYER materials. Now also works for OpenGL. Had to change the parameters
  of this material (for all drivers), the reflection is now at texture 2 and the diffuse map at
  texture 1. This was the other way round before.

- Added examples for csharp, visualbasic, delphi.net and boo.

- Several other small bug fixes.

-------------------------------------------------------------------------------------
Changes in version 0.14.0 (30 November 2005)

- Irrlicht now includes another video driver type. Together with D3D8, D3D9, OpenGL, the NULL
  driver and the Software Renderer, an Irrlicht user now has the decision between 6 renderers:
  The new included renderer is The Apfelbaum Software Renderer, an alternative software renderer
  for Irrlicht. Basically it can be described as the Irrlicht Software renderer on steroids.
  It rasterizes 3D geometry perfectly: It is able to perform correct 3d clipping, perspective
  correct texture mapping, perspective correct color mapping, and renders sub pixel correct,
  sub texel correct primitives. In addition, it does bilinear texel filtering and supports more
  materials than the EDT_SOFTWARE driver. In short: It looks a lot like the already available hardware
  accelerated drivers, but without hardware. :) This renderer has been written entirely by
  Thomas Alten, thanks a lot for this huge contribution.

- Irrlicht now supports anisotropic filtering. Use the SMaterial::AnisotropicFilter member or
  EMF_ANISOTROPIC_FILTER flag to enable it. I implemented this for all 3 hardware accelerated
  drivers: D3D8, D3D9 and OpenGL.

- Irrlicht now supports the recently released new microsoft compiler. Irrlicht versions compiled
  with older verions of this compiler can now also be used with the new one, which wasn't possible
  previously because of a name mangeling issue.

- All 2D drawing functions can now be used to draw into textures (render targets). This also
  means for example that the whole GUI environment can be rendered into textures.

- Irrlicht.NET now supports shaders.

- Irrlicht now loads all textures in 32 bit mode by default. (Previously this
  was 16bit). To change this behavior back again, use
  device->getVideoDriver()->setTextureCreationFlag(ETCF_ALWAYS_16_BIT, true);

- Irrlicht.NET now supports Particlesystems and Shaders. Thanks to a code
  contribution by Delight.

- Fixed a bug in the mipmap generation. Now mipmaps are not that blurry
  anymore and the rendering quality has been improved a lot.

- It is now possible to assign a userData int to callback functions of shaders. In this way it
  it easily possible to use the same callback method for multiple materials and distinguish
  between them during the call.

- Directional lights are now supported in the OpenGL and D3D drivers. To switch on directional
  lighting, set the light type to ELT_DIRECTIONAL in the SLight structure.

- Fixed several bugs in the GLSL implementation. Thanks to Michael Zoech for
  sending in his improvements.

- For the windows version of Irrlicht, the engine now displays an icon in the
  program window, if there is one available in the start path with the name "irr.ico".

- It is now possible to use images with alpha channels on buttons. Use the new
  IGUIButton::setUseAlphaChannel() method to enable this feature.

- The scene manager has a new method getSceneNodeFromName() which finds a scene node by its name.

- It is now also possible to attach scene nodes to joints/bones of sceletal animated .x files.
  (Using IAnimatedMesh->getXJointNode() ). This was previously only possible with milkshape models.

- Billboards now draw their bounding box when debugdata is set to visible for them.

- Lights now draw their bounding box and radius when debugdata is set to visible for them.

- Upgraded to irrXML 1.2. Thanks to some hints by Patrik Mller, irrXML, the XML parser used
  by the Irrlicht Engine now has CDATA support and some other useful new features.

- Support for VisualC++ (Express) 2005. Added a project file and a IrrlichtPropsVC2005.vsprops
  file which sets the no deprecate define and adds needed libraries.

- Fixed size of the bounding box of billboards.

- Billboards are now also culled by default, increasing rendering speed a bit.

- Fixed a bug which caused the .ms3d loader to crash when loading .ms3d files
  without materials. Thanks to sdi2000 for posting this.

- Fixed a bug causing the possibility to crash when destructing the scene
  graph or a scene node with children.

- Fixed some bugs which caused invalid RTT operations, when for example the
  render target texture was smaller than the screen.

- Fixed a heavy bug in Irrlicht.NET causing lots of memory leaks when drawing text.

- Fixed a bug in the attachement of scene nodes to animated X files.

- Fixed a bug in the .NET Vector3D addition operator.

- Updated to Salvatore Russo's DMF loader version 1.3. Notes by him:
   This version just adds some new functionalities. First of all Alpha Blended Textures are now
   supported by DeleD as well as loader. Because of some trouble with Irrlicht 0.12.0 TGA loading,
   TGA textures are always flipped so I've added a parameter so that you can choose to
   flip or not all TGA textures coords, this way:
   SceneManager->getParameters()->setParameter(scene::DMF_FLIP_ALPHA_TEXTURES, true);
   you can also set material transparent reference value by setting:
   SceneManager->getParameters()->setParameter(scene::DMF_ALPHA_CHANNEL_REF, 0.01);
   you can use every value beetween 0 and 1, but to respect DeleD rapresentation
   0.01 is OK, just a note, if you set 0, it's just like you set 0.5, this means
   that each pixel found corresponding to a position in alpha map that has a value<127
   won't be drawn.

- Fixed a small bug in the line breaking algorithm.

- Fixed a bug which caused the engine to display strange artifact pixels when drawing 2D images
  like text in screens which odd resolutions.

- Slightly changed the interface of createDevice and createDeviceEx(): the version parameter
  now is a char* instead of wchar_t*. Also, IrrlichtDevice::getVersion() now returns char*
  instead of wchar_t*.

- Fixed some parts in the source to make Irrlicht compile in Linux 64.

- Renamed the EDT_DIRECTX8, EDT_DIRECTX9, _IRR_COMPILE_WITH_DIRECTX_8_ and
  _IRR_COMPILE_WITH_DIRECTX_8_ enumeration literals to EDT_DIRECT3D8, EDT_DIRECT3D9,
  _IRR_COMPILE_WITH_DIRECT3D_8_ and _IRR_COMPILE_WITH_DIRECT3D_9_. You might need to
  update your code and compilation settings with these new names.

- Added the remaining '..' directory in the linux version of the file list

- Updated to a faster version of the TerrainSceneNode by Spintz. Much thanks again!

- Fixed a bug causing billboards to be displayed upside down.

- The D3D drivers now won't crash anymore when they get feeded with nullpointers as shader constants.

- Irrlicht now identifies the Linux platform it runs on and returns a more detailed string
  when calling getOperationSystemVersion().

- Fixed some bugs in several collision test methods thanks to Spintz.

- Updated font tool

- Made the list::iterator constructor which took a sklistnode as parameter private,
  to make Irrlicht compatible with the Errlicht interface.

-------------------------------------------------------------------------------------
Changes in version 0.12.0 (24 August 2005)

- It is now possible to have multiple scene managers. Use ISceneManager::createNewSceneManager()
  to create a new one. This can be used to easily draw and/or store two independent scenes at
  the same time.

- Irrlicht now supports GLSL, the OpenGL Shading Language, which means Irrlicht now
  supports 14 shading modes/languages: ARB Vertex Programs, ARB Pixel Programs, HLSL,
  GLSL 100, GLSL 110VS1.1, VS2.0, VS3.0, PS1.1, PS1.2, PS1.3, PS1.4, PS2.0, PS3.0.
  Lots of thanks go to William Finlayson for implementing this and making available his code
  to be used in Irrlicht.

- Added support for pixel shader 3.0 and vertex shader 3.0.

- Irrlicht now supports detail maps, use EMT_DETAIL_MAP for this. The new terrain scene node
  tutorial shows how to use detail maps.

- Again some changes have been made in Irrlicht.NET. For example it is now a little bit more memory
  friendly, I removed several bugs and made the terrain scene node, realtime shadows and key codes
  available.
  In addition, I extended the .net example application a lot, just try it out.

- I've worked around a heavy bug in the microsoft compiler which caused lots of bugs in Irrlicht.NET.
  They are all fixed now. See http://support.microsoft.com/default.aspx?kbid=823071 for details.

- The timer of the engine has been enhanced a lot, which maybe needs a little change in your
  project if you are upgrading from an older version of Irrlicht. It is now possible
  to set the speed of the timer, a new time value, and to start and stop it. Also, all
  calls to getTime() will now return the same value within the same drawing frame.
  The timer will only advance when ITimer::tick() is called. IrrlichtDevice::run() will
  call this method automatically, but if you aren't using this method, and you are wondering
  why your scene is not animating anymore, just call Device->getTimer()->tick() before
  drawing your scene. If you need the system time, not the new virtual time,
  use ITimer::getRealTime().

- The material EMT_TRANSPARENT_ALPHA_CHANNEL now is using a configurable alpha ref value.
  The default value is 127, which means people who are using this material for drawing
  things like grass, trees etc will get nice results automatically when changing to 0.12.0.
  To change to a different alpha ref value, just change SMaterial::MaterialTypeParam value.
  See EMT_TRANSPARENT_ALPHA_CHANNEL for details.
  Also, this fixes two bugs:
   - A bug causing the D3D versions not looking like the OpenGL version.
   - A second bug which caused the texture to look like disappearing when looking at from far away.

- Upgraded to a new dmf loader version by Salvatore Russo which is able to use a texture path
  and material directories. Set DMF_USE_MATERIALS_DIRS and DMF_TEXTURE_PATH using the
  ISceneManager::getParameters() method.

- It is now possible to set a separate scale for the second texture coordinate set in the
  terrain scene node when calling ITerrainSceneNode::scaleTexture(). This is useful when using
  detail maps on the terrain.

- Added a new material flag named EMF_NORMALIZE_NORMALS. You can enable this if you need
  to scale a dynamic lighted model. Usually, its normals will get scaled too then and it
  will get darker. If you enable the EMF_NORMALIZE_NORMALS flag, the normals will be
  normalized again.

- When loading Milkshape .ms3d files, Irrlicht also loads materials and tries to apply the textures.
  Thanks to atomice for this patch.

- The ISceneManager::addCameraSceneNodeFPS() has a new parameter named 'noVerticalMovement' with which
  it is possible to disable vertical movement of the FPS camera and make the camera behave just like
  in most ego shooters today.

- Made Irrlicht 64 bit compatible, removing some 32 bit only constructs. However, I wasn't able to
  test it out extensively. If you are compiling Irrlicht for a 64 bit windows environment and get
  a linker problem, try playerdark's solution:
  "The linker settings are so that no machine is specified in the drop down field, instead,
  the command line option /MACHINE:x86 is set manually which interferes with the 64 bit linker
  of course. Removing that from the 64 bit version (and replacing it with the drop down selection
  in the 32 bit version for that matter) fixed the linker problem."

- There is now a IrrlichtDevice::postEventFromUser() method available, to make it possible to
  post key or mouse input events to the engine if you are using an own input library for
  example for doing joystick input.

- The GUI Environment now has an own basic RTTI system, and all IGUIElement derived classes
  have a method named getType(). This is needed for the .NET wrapper but will be used
  later for serializing and deserializing.
  If you wrote your own GUIElements, you need to set the type for your element as first parameter
  in the constructor of IGUIElement. For own (=unknown) elements, simply use EGUIET_ELEMENT.

- Thanks to William Finlayson, Irrlicht now also supports RTT (render to texture) when
  rendering using OpenGL.

- Thanks to William Finlayson, the EMT_REFLECTION_2_LAYER is now implemented in the
  OpenGL version of Irrlicht, too.

- There is now a mesh cache interface available. With this, is is possible to get access to
  all loaded meshes, and to remove them to free memory. You can get access to the cache
  using ISceneManager::getMeshCache(). Please note that the addMesh() method of ISceneManager
  now is now longer available, you can find it now in the IMeshCache interface.

- The VideoDriver now has a method for clearing the zbuffer at any time: IVideoDriver::clearZBuffer().
  With this, it is for example easily possible to overlay two scenes.

- Fixed a bug which caused Irrlicht to crash when loading grayscale jpeg files.

- Somebody sent me an .x file (tank_human1_crashes_irrlicht.zip) which caused Irrlicht to crash.
  It seems I've lost that mail, but maybe you are reading this: It's fixed now. :)

- Fixed a bug which caused the diffuse maps of lightmaps to disappear under certain circumstances
  in OpenGL.

- Its now possible to make IGUIStaticText draw its background.

- Removed the first two default parameters from
  IGPUProgrammingServices::addShaderMaterialFromFiles() to prevent SWIG
  to create non compilable wrapper code.

- Fixed a small bug which caused the terrain scene node to be culled incorrectly.

- Changed the names the driver return (now "OpenGL 1.5", "Direct3D 9.0" and "Direct3D 8.1")

- Added a new macro _IRR_DEBUG_BREAK_IF which is now used instead of the _asm int 3 break points in
  debug mode.

- Fixed a bug were the software renderer didn't clip 2d rectangles. This effect was visible for
  example when using list boxes, selecting an entry at the end an scrolling up so that it wasn't
  visible anymore.

- There is now a new gui event available (named EGET_COMBO_BOX_CHANGED) which will be
  sent when the selected item in a combo box has been changed. Finally.

- Fixed a Problem which caused an empty window to be created when a rendering device
  could not be initialized under special circumstances. Thanks to Sascha Plumhoff for
  the bug report.

- Fixed a bug with the FileList in Linux, reported by DrAnonymous and fixed by William Finlayson.

- Fixed some bad documentation bugs.

- The XWindow handle is now exposed too, via IVideoDriver::getExposedVideoData().

-------------------------------------------------------------------------------------
Changes in version 0.11.0 (08 July 2005)

- Antialiasing is now supported by Irrlicht in the D3D8 and D3D9 renderer. To switch
  it on, use createDeviceEx() and set SIrrlichtCreationParameters::AntiAlias to true.

- Irrlicht.NET can now run inside a pre created Windows.Form window.

- I'm no longer providing a Visual Studio 7.0 project/solution file for the Irrlicht
  Engine sourcecode, only 7.1 and 6.0 are supported. If you are using Visual Studio 7.0,
  just open the .dsp file for Visual Studio 6.0, it will be converted automatically.

- Irrlicht.NET includes now all basic GUI Elements and can capture GUI events. There are
  still some features missing, but it is already enough to do simple things like showing
  message boxes, displaying images, getting input strings, etc.

- Improved the .NET documentation a bit.

- There is a full implemented ISceneCollisionManager now available in Irrlicht.NET.

- The Linux OpenGL renderer now supports mip mapping.

- It is now possible to compile Irrlicht as shared lib in Linux. To do this, go into the source
  folder and run 'make sharedlib'. This should create a libIrrlicht.so.0.11.0 file in
  lib/Linux. To install it in /usr/local/lib, you can run 'make install'.

- The drawing of the GUI system has been refactored and a lot of redundant code has
  been removed.

- The new method IVideoDriver::draw2DRectangle() is able to draw rectangles not only
  filled with a single color, but with a gradient from four colors. This is implemented
  in all drivers except the Software driver which still uses one color for this method.

- It is now possible to customize the GUI system's skin a lot more: Simply implement your
  own IGUISkin interface and implement the draw..() methods.

- There are now two build-in skins available: Windows Classic and Windows Metallic. The
  default skin is now Windows Metallic, if you want to change back to the old skin, use the
  following code:
  gui::IGUISkin* newskin = environment->createSkin(gui::EGST_WINDOWS_CLASSIC);
  environment->setSkin(newskin);
  newskin->drop();

- Added improved keyboard input handling for the Linux version of Irrlicht, thanks to
  Fabien Coutant for the fix.

- Fixed a bug in the Linux OpenGLDriver which caused to load a wrong OpenGL extension
  and made multitexturing look quite strange. Thanks to hybrid for spotting out that
  bug.

- COLLADA file loading now works the same like the loading of other meshes: Just
  call ISceneManager::getMesh("yourfile") and display it using for example
  ISceneManager::addAnimatedMesh(yourLoadedMesh);
  To make it possible to create instances from meshes, lights and cameras in COLLADA
  files again as in irrlicht 0.10, just enable the collada instance creating mode:
  SceneManager->getParameters()->setParameter(COLLADA_CREATE_SCENE_INSTANCES, true);

- Added lots of useful methods to the IStringParameters class. It is now possible to
  set not only strings but also boolean, integer and float values as parameters.
- Fixed a bug with the TRANSPARENT_ALPHA_CHANNEL materials in all renderers to make them
  work more as expected: They didn't write to the zbuffer. If you are using this
  material and you don't want the new setting, just set the ZWriteEnable flag in the
  SMaterial structure of your transparent material to false. Thanks to Fabien to
  point this out.

- There are now some new defines making it possible to use system installed libs instead of
  the ones which come with Irrlicht: _IRR_USE_NON_SYSTEM_JPEG_LIB_,
  _IRR_USE_NON_SYSTEM_LIB_PNG_ and _IRR_USE_NON_SYSTEM_ZLIB_, which are defined by default
  in the file IrrCompileConfig.h

- Renamed ISceneManager::getStringParameters() to ISceneManager::getParameters()
- Changed the define _IRR_D3D_SHADER_DEBUGGING to _IRR_D3D_NO_SHADER_DEBUGGING to be
  able to make it defined by default and to let it be included in the doxygen documentation.

- The SceneManager now does not do any culling tests for cameras, lights and skyboxes.

- Added a transformBoxEx() method to matrix4 which transforms a bounding box more accurate.

- Small edit box copy & paste bug fixed thanks to Fish HF

- Fixed a bug which caused the engine to read windows messages when embedded in
  a custom win32 control when called IrrlichtDevice::setResizeAble(). Thanks for
  Duncan Mac Leod to find that bug.

- Fixed a bug in the HLSL renderer which caused Irrlicht to crash, if no vertex shader
  was specified. Thanks to mightypanda for reporting this.

- Fixed a bug in the normal map generation thanks to jox. Parallax mapping and
  normalmapping now even look a lot better because of this. ;)

- Updated to irrXML 1.1:
  - The XML parser is now also able to parse embedded text correctly when it is shorter than
  2 characters.
  - The XML parser now treats whitespace quite smart and doesn't report it when it is
  obviously used for formatting the xml file. (Text won't be reported when it only contains
  whitespace and is shorter than 3 characters)
  - The XML parser won't crash anymore when the xml file is malformed and an attribute has
  an opening but no closing attribute.
  - Removed a documentation which claimed that the xml parser doesn't work as the xml standard
  when replacing special characters, which wasn't true.

-------------------------------------------------------------------------------------
Changes in version 0.10.0 (26 May 2005)

- The engine is now able to use parallax mapping. It's implemented for D3D9, D3D8 and OpenGL.
  The perPixelLighing tutorial shows how to use it. Thanks go to Terry Welsh who wrote
  the 'Parallax Mapping with Offset Limiting'-paper on which the Irrlicht implementation
  is based and who allowed me to use his texture for use in the example.

- Added render to texture support. Currently, only the D3D9, D3D8 and the software renderer
  are able to use this feature. There is a new example, showing how to render scenes into
  a texture.

- Irrlicht now can load .png textures. There is also a new compile configuration
  define to exclude the png loading option: _IRR_COMPILE_WITH_LIBPNG_. Thanks to
  rt who originally wrote the png loader and who allowed me to use and modify his code
  and place it under the Irrlicht Engine license.

- Added support for COLLADA files. COLLADA is an open Digital Asset Exchange Schema for the
  interactive 3D industry. There are exporters and importers for this format available
  for most of the big 3d packages at http://collada.org. Irrlicht can import COLLADA files
  by using the ISceneManager::getMesh() method. As COLLADA need not contain only one single mesh
  but multiple meshes and a whole scene setup with lights, cameras and mesh instances,
  this loader sets up a scene as described by the COLLADA file instead of loading
  and returning one mesh. The returned mesh is just a dummy object. However, if the
  COLLADA file does not include any <instance> tags, only meshes will be loaded by the
  engine and no scene nodes should be created. Meshes included in
  the scene will be added into the scene manager with the following naming scheme:
  path/to/file/file.dea#meshname. The loading of such meshes is logged.
  Currently, this loader is able to create meshes (made of only polygons), lights,
  and cameras. Materials and animations are currently not supported but this will
  change with future releases.

- Added Delgine DeleD .dmf mesh loading support. I simply added Salvatore Russo's .dmf loader to
  Irrlicht, and changed some parts of it. Thanks to Salvatore for his work and for allowing
  me to use his code in Irrlicht and put it under Irrlicht's license.

- Specular highlights are now finally usable the engine. To activate, simply set the shininess
  of a scene node to a value other than 0: sceneNode->getMaterial(0).Shininess = 20.0f;
  You can also change the color of the highlights using
  sceneNode->getMaterial(0).SpecularColor.set(255,255,255,255);. The specular color of the
  dynamic lights will influence the highlight color, too, but they are set to a useful
  value by default when creating the light. This feature is currently only available in
  the D3D drivers.

- Added a new material type: EMT_TRANSPARENT_ALPHA_CHANNEL_REF. This draws a pixel of the
  material only when the alpha channel has a value greater than 128. It is ideal for drawing
  for example leaves of plants and does not use alpha blending, so it is a lot faster than
  EMT_TRANSPARENT_ALPHA_CHANNEL.

- There is now a createDeviceEx() method with which it is possible to create an Irrlicht Engine
  device into an already existing window. This currently only works in Windows.
  This method will be extended in the future with other options.

- Irrlicht.NET has been extended with ports of the SceneNodeAnimators, TriangleSelectors
  the FileSystem and Font drawing. Also the documentation of it has been improved a lot.

- There are two new tutorials/examples available. One demonstrates how to use render to texture
  feature, the other one shows how to run Irrlicht inside a precreated Win32 window/widget.
  This means there are now 17 examples available in the SDK.

- The software renderer now renders 3d geometry transparent when its material is
  somewhat transparent.

- The XML Parser has been enhanced. Several small bugs have been fixed and there are some
  new features: The parser can now read ASCII, UTF-8, UTF-16 and UTF-32 (both little and
  big endian) files, and return the parsed string data in one selectable format from the
  same list. In addition, it is now completely independent from Irrlicht. If you wish to
  use the parser without the engine, take a look at the newly created project at
  http://irrxml.sourceforge.net.

- Upgraded to DirectX Exporter Mod 1.3.1

- Upgraded dev-cpp project file to Dev-C++ 4.9.9.2. Removed dependency to zlib and
  jpeglib for devcpp, the necessary .c files are now simply included in the project.

- Renamed the VisualStudio and DevCpp sub directories in the SDK to Win32-gcc,
  Win32-VisualStudio.

- Fixed a bug in irrXML causing it to replace xml characters wrongly sometimes.

- The C++ decorations at createDevice() have been added again, because lots of people
  started to mix the gcc and the microsoft .DLL and got confused why the thing crashed
  at random positions.

- Moved heapsink and heapsort into the core namespace.

- Updated to My3D version 3.15

- Fixed the wrongly drawn alpha channel material in OpenGL driver and a problem with the
  VertexAlpha material in the same driver.

- Implemented multipass rendering in the OCTTree scene node now too. This means that octtrees can
  now contain transparent materials as well.

- Improved string comparison speed, especially when comparing with pointer to char or w_char,
  no more temporary strings are being constructed now. In addition, there are some new
  string comparison methods in this class.

- Added string::replace() method.

- Added string::trim() method.

- Addes string::erase() method.

- Fixed a bug in array which caused data corruption if an element which already inside the
  the array was pushed_back. Thanks to vox for reporting this and to provide a solutin

- Added ISceneManager::addMesh() method.

- Added IMeshManipulator::recalculateNormals(IMeshBuffer*) method.

- The file array.h has been renamed to irrArray.h

- Due to a bug, Irrlicht 0.9 didn't cull the scene nodes anymore which resulted in a huge
  performance loss. This is fixed now.

- After lots releases ignoring the 'make the fps camera smoother request', it is now
  finally integrated.

- Removed audiere dependency and the mp3 file, reeducing SDK download size.

- A bug was fixed causing the binding of the wrong fragment program sometimes in OpenGL.

- Lots of internal filenames have been renamed. All CVideo* files have been renamed to
  fit the other name conventions, CD3D9Driver.h into CD3D9Driver.h for example.

- The IMaterialRenderer interface now has the new method getRenderCapability() which
  returns if the material is able to be rendererd with all settings on current hardware.

- Added IMeshManipulator::setVertexColors();

- Added float color reading support in the 3DS loader.

- video::EVDF_BILINEAR_FILER renamed to EVDF_BILINEAR_FILTER

- core::equals function added.

- fixed a small bug in fast_atof thanks to jox

- Added a method ICamera::isOrthogonal() which is being used by
  ISceneCollisionManager::getRayFromScreenCoordinates(), thanks to a bug report and fix by
  jox in this thread: http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=6243

- Added some fixes to the GUI environment to make the parent and child pointers be more
  consistent as suggested by jox in this thread: http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=6220

- Fixed a bug which caused the ambient light not to be reset after a window resize in D3D8 and 9.
  Thanks to jox for this bug report and fix.

- vector3df equals method added.

- added SColorf::getInterpolated() method

- Moved ITextSceneNode interface to include folder.

- Fixed a small bug in the My3DLoader which failed sometimes finding the right textures.

- Fixed bounding box problem with meshes without joints in .X file loader, thanks to
  jox. (http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=6669)

- Fixed IFileSystem::getWorkingDirectory in Linux version.
  (http://irrlicht.sourceforge.net/phpBB2/viewtopic.php?t=6678)

-------------------------------------------------------------------------------------
Changes in version 0.9 (28 Mar 2005)

- There is now a 100% working terrain renderer available. The old buggy and unfinished terrain
  scene node has been replaced by a new TerrainSceneNode which is based on Spintz's
  GeoMipMapSceneNode and Soconnes terrain renderer. Lots of thanks for their work on
  this and that they allowed it to be modified and integrated into Irrlicht.

- It is now possible for a scene node to draw itself in multiple passes. This means it can
  register itself for multiple render passes (E_SCENE_NODE_RENDER_PASS) and during rendering
  it can query the current render pass using ISceneManager::getSceneNodeRenderPass(). With
  this, SceneNodes can contain solid and transparent materials at the same time and will be
  rendered in the correct order from now on.
  The IAnimatedMeshSceneNode and the IMeshSceneNode implement this feature, so it is now
  possible to create for example cars with transparent windows without the need of a separate
  scene node. Because of this change, all render time enumeration values have been renamed.

- Irrlicht is now able to load OCT files directly. OCT files
  can be created with Paul Nette's Radiosity Processor from http://www.fluidstudios.com
  or exported from Blender with Murphy McCauley's exporter. This exporter can be found
  in the directory \exporters\OCTTools of the Irrlicht SDK or from his homepage
  http://www.constantthought.com/project/OCTTools. A lot of thanks go to Murphy McCauley
  for this work on this and his permission to include his OCTTools into Irrlicht.

- Irrlicht is now able to load Cartography shop 4 (.csm) files directly. A lot of
  thanks go to Saurav Mohapatra for this work on this and his permission to adapt and
  include his IrrCSM library into Irrlicht. If you are using .csm files, please note that
  you'll have to set the path of the textures before loading meshes. You can do this using
  SceneManager->getStringParameters()->setParameter(scene::CSM_TEXTURE_PATH,
   "path/to/your/textures");. The original loader can be obtained from
  http://www.geocities.com/standard_template/index.html

- Irrlicht is now able to load Pulsar LMTools (.lmts) files directly because it now
  integrates a modified version of Jonas Petersen's lmts loader in version 1.5 (from
  http://development.mindfloaters.de/). Lots of thanks go to him for creating this
  loader and giving his permission to add it to Irrlicht. If you are using this loader,
  please note that you can set the path of the textures before loading .lmts files.
  You can do this using SceneManager->getStringParameters()->setParameter(
  scene::LMTS_TEXTURE_PATH, "path/to/your/textures");

- Irrlicht is now able to load my3D files directly. The My3DTools 3.12 loader by
  Zhuck Dimitry was (a bit modified and) integrated into the engine. Lots of thanks
  go to him for his work and for giving his permission to do that. Newer versions
  of this loader can be found at http://my3dproject.nm.ru. The exporters for this
  file format have also been added into the \exporters directory of the SDK.

- To be able to replace built-in meshloaders with newer external versions without the
  need of recompiling the engine, now mesh loaders which are added to the engine using
  ISceneManager::addExternalMeshLoader() are prefered over built-in mesh loaders.
  Thanks to for his suggestion of this.

- D3D8 and D3D9 support for dev-cpp has been improved. If you are using Dev-Cpp and
  a DirectX-Devpack for recompiling the engine, just add
  -DIRR_COMPILE_WITH_DX9_DEV_PACK to your compiler
  settings and something like -ld3dx9 -ld3dx8 to the linker settings and
  press 'compile'.

- The SceneManager now contains an interface for storing and exchanging parameters.
  ISceneManager::getStringParameters() returns IStringParameters, which can be used for
  example by extensions like external mesh loaders to set and read independent parameters.
  This is also currently used by the newly built in CMS, LMTS and MY3D loader: It is possible to
  set a value 'CSM_TexturePath', 'LMTS_TexturePath' or 'MY3D_TexturePath' to let them know
  the path of the textures.

- IAnimatedMeshSceneNode now has two new methods for being able to have more influcence
  on the animation playback: It is now possible to set the playback mode to looped or
  non looped with IAnimatedMeshSceneNode::setLoopMode() and it is possible to set
  a callback interface which will be called when animation playback has finished
  using IAnimatedMeshSceneNode::setAnimationEndCallback(). Thanks to Electron for his
  suggestion for this addition.

- The software renderer has a new triangle renderer specialized on disabled zread and write.
  This means that skyboxes are now rendered in the correct order when using the software
  renderer.

- Multitexturing and other extensions in Linux are now turned on by default. There is a new
  #define in the file IrrCompileConfig.h for disabling this again: LINUX_OPENGL_USE_EXTENSIONS

- There is now a EET_USER_EVENT user event type for making it possible to send custom
  events through the system.

- The setTarget()-method of the FPSCameraSceneNode now is finally correctly implemented.

- Changing parents of scene nodes is now much safer. The parent member of a scene node now is
  set to 0 in all cases and should never point to invalid data when rearranging the scene node
  tree. In addition, there is now a getParent() method in the ISceneNode class.

- Debug breakpoints using "_asm int 3" are now only being used when in debug mode and
  using Micosoft's compiler. Now more exotic compilers like BorlandC++ will like
  Irrlicht better because of this.

- Updated zlib version to 1.2.2

- An implementation of 3D triangle clipping in the software renderer has been started. It
  is not 100% ready, but it is a beginning. This means now for version 0.9, that there are
  not that much artifact triangles drawn anymore. But this means also that drawing is
  a lot faster and that triangles clipped at the border of the screen will disappear
  too fast. If anyone wants to finish the drawClippedIndexedTriangleListT() method
  in the CSoftwareDriver class, he is welcome :)

- There is a new parameter in the IVideoDriver::createImageFromData() which causes the
  image to be able to own foreign memory.

- A renderstate setting has been fixed which caused to disable mip maps on wrong geometry
  when there was other geometry which had no mip maps. At least this bug doesn't appear
  on my hardware any more, I hope this means the problem it is now fixed.

- A bug in the D3D version of the stencil shadows has been fixed thanks to Murphy. Sometimes
  you could see a small shadow similar to the the real shadow in the scene. This should now
  be fixed.

- Irrlicht can now draw non filled concyclic reqular 2d polyons like triangles, tetragons,
  pentagons, hexagons, heptagons, octagons, enneagons, decagons, hendecagons, dodecagon and
  triskaidecagons. And circles. Yes, I was a little bit bored. Christian Lins made a
  suggestion to add 2D circle drawing support to Irrlicht, and I did this, but also added
  support for drawing these figures using the same method. Check out
  IVideoDriver::draw2DPolygon().

- Removed a memory leak when creating hlsl pixel shaders.

- I've made varoius updates to the documentation and moved to doxygen 1.4

- Fixed a bug in the xml reader which caused it to crash when reading empty xml files.

- Removed the buggy bsp tree scene node from the engine.

- Tweaked some settings with some GUI elements.

- ISceneNode::getAbsolutePosition now should be way faster.

- Applied a fix by William Finlayson to the opengl stencil shadow drawing code which
  fixes several bugs.

- There is now a min_ and max_ template function available in the core namespace.

- Added some bugfixes to MayaCameraSceneNode by jox. An even more improved version can
  be found at http://development.mindfloaters.de/Downloads.12.0.html.

- core::array now has a push_front method.

- core::array now has an insert method. (Thanks to jox)

- IrrlichtDevice now has a getEventReceiver() method.

- Fixed a mouse wheel - mouse coordinates bug thanks to a bug report and fix by jox.

- Changed the first parameter in IGUIContextMenu::addItem(wchar_t* text, ...) to const.
  Thanks to jox.. again. :)

- Fixed ignore path bug in zip file reader thanks to Pr3t3nd3r. It is now possible
  to use zip files with the complete path to the files from the archive.

- Fixed matrix4::rotateVect method after a suggestion by several users. (I think Electron,
  Pr3t3nd3r, Jox) Thanks all :)

- Fixed a bug in CGUIEditbox that enables you to write more characters than the max set
  limit, thanks to Rush for the bug report and fix.

- Added getAngleTrig() method to vector2d as suggested by Pr3t3nd3r, thanks!

- After a suggestion by schick, plane3d<T> now stores the normal vector first, and then
  the distance to the origin.

- A bug was fixed which caused 2D elements to be drawn with a second texture set in OpenGL
  mode when 3D geometry with >1 textures has been rendered before. This effect has often
  been reported as darkened 2D gui in the forum.

- A bug in IrrCompileConfig prevented users to be able to recompile irrlicht with D3D9
  with gcc. This is now fixed, thanks to Jedive.

- The project setup for Dev-C++ is now nicer. Added lots of folders and cleaned up the
  whole setup a little bit with this.

- Fixed a small bug in CGUIScrollbar reported by Klaus Niederkrueger.

- The Checkbox rect is now clipped correctly, thanks to jox for that bug report.

- The debug names of all scene nodes and GUI elements are now set correctly.

- Applied a patch making it possible to compile Irrlicht without OpenGL in Linux.

- core::rect::clipAgainst was fixed thanks to a bug report and correction by Jox.

-------------------------------------------------------------------------------------
Changes in version 0.8 (19 Feb 2005)

- Irrlicht now supports HLSL. This is possible using the new
  IGPUProgrammingServices::addHighLevelShaderMaterial() methods. Also, methods for setting high
  level shader constants have been added.

- Irrlicht.NET now supports events and cursor control. This means now you can read mouse
  and keyboard input from .NET projects like C# and VB.net too.

- There are three new built in materials for doing normal/bump mapping available:
  EMT_NORMAL_MAP_SOLID, EMT_NORMAL_MAP_TRANSPARENT_ADD_COLOR and
  EMT_NORMAL_MAP_TRANSPARENT_VERTEX_ALPHA. If the hardware does not
  support these, the materials will fall back to their base materials. To be able to
  use these materials, there is the new vertex type 'S3DVertexTangents', the material
  does not work with any other vertex types. There are some new methods to create meshes
  with this vertex type (IMeshManipulator::createMeshWithTangents()).

- A new example/tutorial (11.PerPixelLighting) shows how to use per pixel lighting
  in your applications.

- The software renderer now works in Linux, too.

- Irrlicht now has a built-in normal map generator. It creates on the fly 32 and 16 bit
  normal maps from height maps (IVideoDriver::makeNormalMapTexture). As most other things
  in Irrlicht, the generator does not depend on D3D, D3DX or OpenGL.

- Added shader debugging capabilities to Irrlicht. If _IRR_D3D_SHADER_DEBUGGING is
  defined in IrrCompileConfig.h (commented out by default), it is now possible to
  debug all D3D9 shaders in VisualStudio. All shaders (which have been generated in memory
  or read from archives for example) will be emitted into a temporary file for this purpose.
  To debug your shaders, choose  Debug->Direct3D->StartWithDirect3DDebugging in Visual Studio,
  and for every shader a file named 'irr_dbg_shader_%%.vsh' or 'irr_dbg_shader_%%.psh'
  will be created. Drag'n'drop the file you want to debug into visual studio. That's it.
  You can now set breakpoints and watch registers etc. This works both with ASM, HLSL,
  pixel and vertex shaders.
  Note that the engine will run in D3D REF for this, which is a lot slower than HAL.

- Support for compressed .tga texture loading added. (Support from 0.4.1 was buggy)
  Thanks to neojzs for posting his improvement.

- Support for 32 bit .bmp texture loading added.

- Global particles are now possible. Use IParticleSystem::setParticlesAreGlobal()
  to switch between global and local particles. A demonstration of this can be seen in the
  new tutorial (11.SpecialFX2).

- It is now possible to let IGUIImages draw themselves using the alpha channel of the texture
  they show. Use IGUIImage::setUseAlphaChannel() for this.

- ITexture now has a method for rebuilding the mip map levels: regenerateMipMapLevels().
  This is useful for example after locking and modifying the texture.

- Gravity acceleration speed in CollisionResponseAnimator was changed thanks to a suggestion
  by Morrog. The accelerationPerSecond value has been removed beacause of this, you
  can now control everything just with the gravity vector. Note that the gravity value
  must now be a little bit smaller to achieve the same effect as before.

- Fixed a problem with several material renderers which weren't able to update their states
  at the right time sometimes. A new method OnRender() will be called every time the
  material is actually used.

- Adjusted all tutorials to fit some interface changes.

- Changed the opengl shader of tutorial 10 to fit the d3d shaders. The now look the same.

- The MeshManipulator has a new method createMeshWithTangents() which creates a mesh
  with normals, tangents and binormals from any mesh.

- Wrong 2D alpha channel renderstates have been set when using D3D9 and 8. This has been fixed now.

- When loading 32 bit images with an alpha channel and storing them internally as 16 bit, the
  alpha channel got lost. This is now fixed, the remaining one bit alpha channel is now
  stored correctly.

- There is a new overloaded IGUIEnvironment::addImage method, which creates an image directly with
  a texture as parameter, adjusting its size to the original size of the texture.

- A small bug in rect<T>::isValid() has been fixed, thanks to jox.

- Fixed a bug in D3D8, D3D9 and OpenGL, which caused Materials be set and unset with an unequal
  amount when mixing 3d with 2d grafics or stencil buffer shadows.

- If you are recompiling the whole engine with Visual Studio 6 (which means
  Irrlicht.dll, NOT the application which is using Irrlicht), DirectX9 support is disabled
  now by default, because Microsoft stopped support for DX9 on VS6 in December
  2004. You can reenable this by uncommenting the new define at the bottom of
  IrrCompileConfig.h, if you have an old SDK for example.

- The mixed fvf and vertex shader system in D3D8 caused a slight issue in Irrlicht ending up
  in really messed up render states sometimes. This is now fixed.

- A major bug with the OpenGL renderer which occurred on some OpenGL implementations
  has been removed thanks to a bugfix by Murphy and a great report and some investigations
  by ElectroDruid.

- Sorting transparent scene nodes was broken in all previous versions of Irrlicht. This
  didn't attract a lot attention because most users used the ADD_COLOR transparencies for which
  the sorting is not relevant. Thanks to Morrog and mmm76, sorting now is right.
- After the application window is resized, getViewport() no longer returns viewport as the
  first time the window has been created.

- The draw primitive functions are no longer wrongly checking the maximum primitive count with
  the vertex amount value. Thanks to Spintz for the bug report.

- Template materials in X files just like exported in the panda exporter are now
  supported, thanks to JoeWright.

- Changed the stringc typedef slightly to make it work with people not using
  namespace irr. Thanks to schick.

- Refactored the MeshManipulator code, which in some cases now uses template methods for performing
  calculations on different vertex types.

- Fixed an interface problem with newer versions of libJPEG.
  Thanks to Fabien Coutant and Simon Barner for some help and clues into the right direction.
  Was not able to add system specific zlib/jpeglib support due to issues on
  some strange systems/users and a lack of time, sorry.

- Typo in plane3d and triangle3d: method isFrontFacting renamed to isFrontFacing.

-------------------------------------------------------------------------------------
Changes in version 0.7.1: (26 Sep 2004)

- Fixed some bugs which prevented the engine to compile with gcc 3.4.1.

- Fixed a problem with the OpenGL driver, which caused the renderstates not to be reset correctly
  when drawing scene nodes with reflective materials.

- Fixed error in Irrlicht's software mip map generation, which caused that some mipmap levels
  looked strange. This fix was found by jox, the hardcore bug fixer,
  so many thanks go to him. Again. :)

- Disabled hardware mip map generation in D3D9 again, because it seems to cause problems on
  some hardware. I don't have any hardware where this problem occurs, but I hope this helps.

- Fixed a small bug in fast_atof submitted in the forum by da_dude.

- Fixed string operator + after a bug report by osre and a fix suggestion by jox.

- IEventReceiver now has a virtual destructor for the people who needed it.

- 3DS-Loader patched due to some suggestions of Daniel Azkona Coya.

-------------------------------------------------------------------------------------
Changes in version 0.7: (11 Sep 2004)

- The first version of Irrlicht.NET is included in this release. It is a managed C++
  wrapper .DLL which makes the most important features of the engine available for all
  .NET languages. The wrapper is incomplete, but it can already be used.
  You can find the documentation for this .DLL in the compiled help file doc\IrrlichtNET.chm.
  There are also two very basic examples available, which show how to use Irrlicht.NET
  from C# and VisualBasic.

- Low level vertex and pixel shader programming is now possible. There are
  now some methods with which you can write GPU programs in vertex/pixel shader assembler
  using Direct3D 8 and 9 and in ARB vertex and fragment program assembler for OpenGL.
  You can use the IGPUProgrammingServices interface which can be reached by
  IVideoDriver->getGPUProgrammingServices() for this. The new material types you can create
  with this can be combined with all other already existing material types.
  For example, it is possible to create a new material which uses a vertex shader to
  calculate texture coordinates and diffuse colors, and let this be rendered by the built in
  material video::EMT_TRANSPARENT_ADD_COLOR.
  Support for high level programming languages like GLSL or HLSL is planned for the
  following releases. Also note that you won't be able to use all techniques shaders offer with
  Irrlicht, due to its current high level abstraction of the 3D APIs. For example, the engine
  does not expose vertex streams or vertex buffers currently.

- There is a new tutorial showing how to use shaders with the engine. In addition, all
  old tutorials have been rewritten and adapted. For example, the hello world
  tutorial now also shows how to set up visual studio .NET to use it with
  the engine.

- Hardware mip map level generation of textures is now supported when using D3D9.

- Internal pointers and data of the video drivers can now be exposed for experienced users with
  VideoDriver::getExposedVideoData(). For example, you can get a pointer to the IDirect3DDevice9
  interface and the HWND window handle, if the engine is running with D3D9.

- The createDevice() function has a new additional parameter: bool vsync. With this, it is now
  possible to enable or disable the waiting for the vertical retrace period. This is implemented
  in D3D9, D3D8, and the Windows OpenGL driver only, the software driver will ignore this flag.

- The engine now behaves like in the documentation: irr::createDevice() returns 0, if
  the desired driver could not be initialized.

- There is a new SceneNode available: The ITextSceneNode is able to display 2D text at a
  position in 3D space. Use ISceneManager::addTextSceneNode() to create one.

- Finally now all VideoDrivers have a draw2DLine() implementation, thanks to some additions sent in
  by Vash TheStampede.

- Applied some changes to the compilation configuration, so that it should now
  be easier to use the engine with XBOX projects. Thanks to MattyBoy for sending
  in some clues for this.

- Some improvements for the linux version of the engine: The NULL device is finally fully operational with Linux
  too, and also all examples and even the techdemo compile and run with this OS.

- The default field of view in the cameras of the irrlicht engine was a little bit
  extreme, so I changed it now from core::PI / 3.5f to core::PI / 2.5f.

- Added a new draw2DImage method for partially draw a 2d Texture, as sent in by zola with
  implementations for OpenGL, D3D8 and D3D9. Software implementation is missing.

- The string class is now able to convert integer values into a string or append it as string
  to itself.

- Added a getDriverType() method to the IVideoDriver interface.

- Added a getTransform() method to the IVideoDriver interface.

- The EMT_TRANSPARENT_ALPHA_CHANNEL material in OpenGL is now implemented.

- The integrated XML Parser now works better with different text file formats. (ASCII, UFT-16,..)

- IGUIEdit Box now feels more like a windows editbox, thanks to some changes by Jox

- Added a new method to IVideoDriver: createImageFromData as suggested by Oliver Klems.

- Fixed a the EMT_TRANSPARENT_ALPHA_CHANNEL problem in D3D8 and D3D9 due to a suggestion by Jox.

- Added 3 methods created by zola to the quaternion class: fromAngleAxis(), toEuler() and
  operator*(vector3df&).

- A bug in a matrix multiplication operator was fixed.

- Changed visual studio project files to version 7.1, but provided 7.0 project files
  for people with that version.

- Added SceneNodeAnimatorRotation rotation fix as posted by warui

- Added normalization fix to vector2d and 3d. Warui suggested a fix like that in the forum.
  The one I made has the same result, but is a little bit faster.

- Fixed some problems with the drawStencilShadow() method in the OpenGL implementation of the
  IVideoDriver interface after some suggestions by Nicholas Bray.

- Added IGUIButton::setPressed() and isPressed().

- Fixed checkPrimitiveCount() bug in NullDevice.

- Applied jox's matrix4::getRotationDegrees() fix, many thanks for posting this!

- Changed aabbox3d::getExtend() to getExtent().

- Changed IXMLReader::isEmtpyElement() to isEmptyElement()

- Fixed a bug in CSceneManager::getSceneNodeFromId() which caused the engine to crash sometimes.

- Fixed a bug in CGUISkin::setSize reported by REAPER. This method never worked before.

- Improved texture mapping and normals of the TestSceneNode, thanks go again to Jox.

- ScrollBar is now posting mousewheel events, thanks go to REAPER to post this bug and a fix for it.

- Added - operator to vector2d and vector3d, thanks to calimero

- Fixed a bug in vector2d::getAngle() and vector2d::rotateBy() thanks to Jox.

- Fixed a bug in quaternion::set(f32 x, f32 y, f32 z) thanks again to Jox.

- Fixed a bug in list::insert_before and list::insert_after, reported by Haddock.

- Fixed a bug in XML Parser which caused a seqfault on linux. Thanks for G.o.D reporting this problem.

- EDriverType enumeration renamed to E_DRIVER_TYPE

- SceneNodeRenderTime enumeration renamed to E_SCENE_NODE_RENDER_PASS

-------------------------------------------------------------------------------------
Changes in version 0.6: (09 Mar 2004)

- Irrlicht now includes its own XML parser. It provides forward-only, read-only
  access to a stream of non validated XML data. It can read everywhere Irrlicht can,
  also in compressed .zip-Files for example. Use IFileSystem::createXMLReader() to
  use it.

- Like the new XMLReader, there is also a IXMLWriter available for making it easier
  to write xml files.

- There is a new tutorial available in the SDK. It is for more advanced users, and
  shows how to create a 3d model viewer with the engine easily. It shows how to
  use menus, tabcontrols, edit-, message- and sky boxes.
  The resulting program  can also be used as tool, to check if the engine
  loads exported 3d models correctly.

- Again, there are some new GUI widgets available: A ComboBox, a ToolBar, a PushButton
  and an ImageButton. The last two are simply the old IGUIButton, but it is now able
  to display additional images and behave like a PushButton.

- It is now possible to make the drawing window resizeable, if it is in windowed mode.
  Use IVideoDriver::setResizeAble(true) to do this.

- The .x file reader and animation player now should work with 99% of all text .x files.
  This is achieved by most of the following bug fixes.

- Fixed a huge bug in the .x file reader, which caused that negative coordinates were
  interpreted as positive ones sometimes. This caused that sometimes .x animations
  were played wrong.

- Slerp interpolation of the quaternion class fixed. This means that also some bugs
  in the animation of .x files are removed now.

- Added virtual joints to not weighted vertices to improve .x file animations.

- The FileSystem is now 100% implemented. Finally it is now possible to write files
  too. There is a new Class IWriteFile and the corresponding
  IFileSystem::createAndWriteFile()

- Added lots of text and sample code to the documentation. In most parts
  documentation should be clearer now.

- The ISceneManager has a clear() method, which clears the whole scene, all scene nodes
  are removed.

- All ISceneNodes now own a new method called removeAll(), which deletes all children
  of the node.

- Fixed a bug which prevented the possibility to compile directx8 without
  having installed directx9.

- Fixed a bug in 3d line dawing in D3D 8 and 9.

- All video drivers now print out the gfx adapter type, vendor and driver version
  into the log strings.

- The D3D9 device is now as fast as the D3D8 device.

- The string class has an additional new constructor for creating a string from
  character data with a specific length.

- Bug fixed in string class assignment operator which might cause a crash in very
  special circumstances.

- Added a findNext() method to the string class.

- The ISceneNode class now has a isDebugDataVisible() method.

- Some lines were changed to make the source of the engine compatible to VS.NET 2003.

- Some functionality of the IFileList and IFileSystem was missing in the Linux version
  of the engine. This caused the FileOpen-Dialog not to work. I fixed this problem.

- The Middle and Right mouse button were swapped in the Linux version. This is now
  fixed.

- Multitexturing should now work with most linux systems too, thanks to a bug
  report by Martin Piskernig.

- The logger now has an additional log() method which accepts another combination
  of strings.

- Fixed a bug which caused fonts to be displayed very transparent in OpenGL.

- Removed one of the redundant overloaded IGUIEnvironment::updateAbsolutePosition()
  methods.

- Fixed lots of clipping problems in all GUI Widgets.

- core::rect has the new methods getCenter() and isValid().

- Scrollbar buttons are now disabled if it is not possible to scroll.

-------------------------------------------------------------------------------------
Changes in version 0.5: (17 Feb 2004)

-------------------------------------
/ Highlights in short:
/ * DirectX 9 support
/ * .x file support in all render devices including opengl and software
/ * new materials like lightmaps with dynamic lighting
/ * fog
/ * stencil buffer shadows now also work in OpenGL device
/ * more gui widgets: tab controls, edit boxes, menus
/ * spline animation support
/ * mouse wheel support
/ * triangle fan drawing
/ * quaternions
/ * improved keyboard input control
/ * lots of bugfixes including improved quake 3 map support
-------------------------------------

- DirectX 9 is now supported by Irrlicht. This does not mean that it replaces
  DirectX 8. The engine now supports both. You can now select between OpenGL,
  DirectX8, DirectX9, Software and the Null device.

- The engine now is able to read and display .x files. Using
  Microsoft's excellent .x file exporter for Maya or MAX which comes
  with the DX8 and DX9 SDK, it is now possible to create content for
  the engine easily. Using .X files with Irrlicht is independent of D3D,
  they can be used with OpenGL and with Linux for example too.
  Currently only text file .x files are supported, and some animated .x
  files may be displayed not 100% correctly, because the animation player
  may still have some small bugs. It works perfectly with most .x files which
  come with the DX9-SDK. Some skinned mesh .x files which use
  quaternions for animating joints have some problems, there might be a
  bug somewhere. I commented the lines with a possible bug in CXAnimationPlayer.cpp.

- The GUI Environment now supports edit boxes. They should support unicode input
  from every keyboard around the world, scrolling, copying and pasting (exchanging
  data with the clipboard directly), maximum character amount, marking and all
  shortcuts like ctrl+X, ctrl+V, ctrg+C, shift+Left, shift+Right, Home, End,
  and so on. Wow, I never programmed an edit box, its much more work than it
  seems to be.

- Tabcontrols are now available in the GUI environment. It is also
  possible to create tabs without tabcontrols, to be able to create
  invisible gui elements for grouping other elements together.

- Another new supported GUI Element are context menus. They support
  ordinary text menu items, separators and sub menus. In Addition,
  a standard menu as seen at the top of most windows can be
  created easily with them.

- Rewrote all tutorials to fit the new API.

- Spline animations are now supported thanks to a spline scene node animator
  written by Matthias Gall.

- Taskswitching now works with Direct3D 8 and 9 devices in fullscreen mode.

- Added Material types EMT_LIGHTMAP_LIGHTING, EMT_LIGHTMAP_LIGHTING_M2,
  EMT_LIGHTMAP_LIGHTING_M4 and EMT_LIGHTMAP_ADD.

- The engine now supports drawing of trianglefans. To do this, use
  IVideoDriver::drawIndexedTriangleFan(). Mario Gruber sent in code for this,
  so lots of thanks go to him!

- It is now possible to draw 3d objects with fog. Simply switch on the fog flag
  in the objects material. To change to way fog is drawn (per pixel/vertex, color,
  linear/expontential) use IVideoDriver::setFog();

- With IrrlichtDevice::getOSOperator() a pointer to an interface is returned, with
  which it is possible to do some operation system specific operations. Currently
  there are only 3 methods supported, but more will be added in the future.

- Mouse wheel input is now supported.

- The Key Event structure of SEvent now contains a Char entry, describing the
  corresponding character of the pressed key. Also two bools were added,
  specifying if shift or ctrl was pressed too.

- The version of the Operating System is now printed out into the log at
  startup.

- There is now a non-const getBoundingBox() method in IMeshBuffer and
  IMesh available.

- IGUIElement now has a method getElementFromId(), which searches children
  (and its children if wanted) for an element with a specific id. If you
  want to search all items, just do
  IGUIEnvironment::getRootGUIElement::getElementFromId().

- ISceneNode::updateAbsolutePosition() is now public

- Small bug fixed in CMeshManipulator::scaleMesh().

- The engine now supports Quaternions.

- A bug was fixed causing the windows caption not to be displayed in
  Windows 95/98/ME.

- IGUIEnvironment::getBuildInFont() was renamed to getBuiltInFont().

- IGUIElement::bringToFront() is able to brint a child to the front.
  Windows for example are now using this new feature.

- Changed the texture mapping of the test scene node a little bit based on
  code sent in by Dr Andros C Bragianos.

- Added code to fix some bug in some ATI drivers. Thanks to ariaci for posting
  this code.

- Stencil buffer shadows now also work with the OpenGL device, they worked only
  in D3D in earlier versions. Lots of thanks go to Philipp Dortmann, who
  sent in a modification to the opengl driver!

- IGUIStaticText::setWordWarp() renamed to setWordWrap(),
  IGUIStaticText::enableOverrrideColor() renamed to enableOverrideColor()
  [thanks to saigumi]

- A bug was fixed, causing that the window was not able to be closed with Alt+F4
  in Win95/98.

- Optimized the Octree-Scene node a little bit for getting more rendering speed.
  Culling is now done with the real frustum, not the bounding box around it.
  Speed increase is about 5%, it's not much but ok.

- Bug fixed in the Quake 3 .bsp file loader, which caused holes to appear in
  some maps.

- Combination of 3D displaying and drawing GUI elements was improved, and the
  priority of input receiving of 3d cameras and gui elements swapped.

- A bug in the static text was fixed, which caused it to draw itself outside
  of its clipping rectangle.

- KeyFocus and MouseFocus methods in GUIEnvironment are now merged into one method.

- The Clamptexturecoordinates flag in the material was removed.

- IVideoDriver::draw3DLine in all devices was improved.

- The devcpp-version of the binary DLL which comes with the SDK is now faster.
  I'll compile this version from now on always with optimization switched on.

- Other, Minor New/Changed methods in public interfaces:
  * buildShadowMatrix in matrix4
  * getRotationDegrees in matrix4 (sent in by Chev)
  * rotateVect in matrix4
  * linear_search in array
  * recalculateBoundingBox in MeshManipulator
  * ISceneManager::addStaticText() now has a parameter for word wrapping
  * getCharacterFromPos() in IGUIFont
  * drawMeshBuffer() in IVideoDriver;
  * interpolate() in matrix4
  * getLast in array

-------------------------------------------------------------------------------------
Changes in version 0.4.2: (13 Dec 2003)

- The engine does no more use only 16 bit textures internaly. Now all
  other texture formats are supported too. This means higher precision
  and better quality images. In this context, the ISurface interface has
  been replaced by IImage, and the ISurfaceLoader by IImageLoader.

- By changing the texture creation mode of the IVideoDriver, it is now
  possible to influence how textures are created: You can choose between
  'optimized for speed', 'optimized for quality' or simply set constant
  bit depth like 'always 32 bit'. Also, you can now enable and disable
  Mip map generation with these flags. Take a look at
  IVideoDriver::setTextureCreationFlag() for details.

- There is now some support for outdoor or terrain rendering available.
  You can create a static mesh from a heightmap and a texture using
  ISceneManager::addTerrainMesh(). You can specify a huge texture if you
  like, even bigger as your hardware allows to render, because the texture
  will be splitted up if necessary.
  Another possibility for doing terrain rendering is the new Terrain Scene
  node. But it is only in a very early alpha stage, I disabled for example
  the use of different level of details.

- It is now possible to load software images into memory from files on
  disk, without creating a hardware texture. You can do this by calling
  IVideoDriver::createImageFromFile(). This is very useful for example
  for loading heighmaps for terrain renderers.

- The Quake 3 Map Loader now supports curved surfaces, thanks to by Dean P. Macri
  who sent in his code. (He also sent in lots of other cool stuff, which I will merge
  with the code of next releases, lots of thanks to him!)

- It is now possible to control what text is printed out to the console and
  the debug window of Visual Studio. By getting a pointer to the ILogger
  interface, is is possible to adjust if Warning, Error or Informational
  texts should be printed out. In addition, now every text can be caught
  by the event receiver.

- The engine is now capable of loading .PCX files. Only a few PCX formats
  are supported currently, but at least the common used formats
  of most textures of the quake 2 models. Thanks go to Dean P. Macri who
  sent in the code for the new PCXLoader!

- A new Scene node is available, which simply does nothing. It is useful for doing
  advanced transformations or for structuring the scene graph.

- The ISceneManager::addOctTreeSceneNode() now takes AnimatedMeshes as parameter.
  If this new method is called, the first frame in the animated mesh is taken as
  mesh to construct the octree. This means that you won't have to write
  addOctTreeSceneNode(yourMesh->getMesh(0)) anymore, but can use
  addOctTreeSceneNode(yourMesh), which is a little bit more intuitive.

- The Driver type enumeration have been adapted to the Irrlicht
  naming conventions. For example instead of writing DT_OPENGL, now write
  EDT_OPENGL.

- The ITexture interface has two new methods for getting the size of the
  texture: ITexture::getSize() and ITexture::getOriginalSize(). This replaces
  the old getDimension()-method and allows to disable bugs which are generated
  by the automatic scaling to optimal sizes of textures.

- There are some new keycodes available: KEY_COMMA, KEY_PLUS, KEY_MINUS, KEY_PERIOD.

- There are now 3 lightmap Material types: EMT_LIGHTMAP, EMT_LIGHTMAP_M2 and
  EMT_LIGHTMAP_M4, which are making the lightmaps 2 or 4 times brighter. If you used
  the Material EMT_LIGHTMAP in your code, you should replace it now with
  EMT_LIGHTMAP_M4.

- The transformation enumeration names have been adapted to the irrlicht
  naming conventions. For example instead of writing TS_VIEW, now write
  ETS_VIEW.

- Video driver feature enumeration names have been changed from
  EK3DVDF_... to EVDF_...

- The GUIEnvironment now has a new method: getRootGUIElement(). With this it
  is possible now to add external created custom GUI Elements to the gui environment,
  without an existing internal GUI element as parent.

- The setViewPort()-Method of the OpenGL-device now works, too. Nothing stands now
  in the way of creating splitscreen applications using the OpenGL device.
  Oliver Klems sent code for this, I slightly modified it. Thank you!

- Corrected a bug, which made the EMT_REFLECTION_2_LAYER Material disappear on some
  hardware.

- Sirshane sent in a bug fix: It is now possible to make the mouse cursor
  invisible in the Linux version of the engine. Thanx sirshane!

- getFrameNr() of IAnimatedMeshSceneNode is now public.

- Again a small bug in the 3ds file loader was fixed.

- A small bug causing light positions being transformed in the OpenGL
  driver differently compared to D3D. Thanx to Matthias Gall for reporting
  this!

- Typing error fixed: ISceneCollisionMananger::getRayFromScreenCoordiantes renamed to
  getRayFromScreenCoordinates.

- Linux support with multitexturing and mipmap generation has been improved.

- A bug was fixed which caused the Engine not to run when compiled
  as dynamic library under linux. Thanks to Shane Parker who pointed out
  the problem.

- A bug was fixed in position2d.h in the operator +=, and the list iterator now
  has per and postfix operators. Thanks to Isometric God for spotting this out.

- A bug was fixed in the Metatriangleselector, causing it to detect only collisions
  with the last TriangleSelector in it.

-------------------------------------------------------------------------------------
Changes in version 0.4.1: (18 Sep 2003)


- Input events are now processed faster than repaint and window events. This
  means that input commands now effect things directly, in earlier versions
  there could be a delay when there were low frames per second. Some people
  noticed this when moving with the fps camera in large levels: The camera
  sometimes stopped seconds after the button was released. This is now fixed.

- A Message Box is now available in the GUI Environment. It looks like the
  windows message boxes and supports OK, Cancel, Yes and No buttons, which
  can be combined freely. Also, it shows multiline text and adjusts its size
  based on the amount of text it shows, so it should be very useful for displaying
  (debug) messages during runtime.

- It is now possible to make all windows (message boxes, file open dialogs,
  simple windows) modal.

- IGUIStaticText now supports multiline text via automatic word warp and manual
  line breaking with '\n'. You only need to switch it on with
  yourText->setWordWrap(true);

- Non default MD2 animations are now supported. Which means simply that you can
  enumerate the names of all md2 animations and the AnimatedMeshSceneNode now supports
  a setMD2Animation() with a character string as parameter instead of a constant.

- You do not need an event receiver anymore for sending user events to the active
  camera, this is now done autmaticly. In addition, it is now possible to
  set a new event receiver during runtime of the engine using IrrlichtDevice::
  setEventReceiver().

- It is now possible to disable and enable the input receiver of a camera. This
  is useful for example for removing the users control of the camera. To do this,
  call camera->setInputReceiverEnabled(false);

- The first person shooter camera now supports a keymap: You can define your own
  key mapping to control the camera when you create it with ISceneManager::
  addCameraSceneNodeFPS().

- Thanks to Jon Pry, the engine now also loads compressed TGA texture files. Now only
  8 bit palette using TGAs are missing. :)

- There are methods for converting 3d coordinates in 2d coordinates and the other
  way round. You can find them as two new methods of the ISceneCollisionManager:
  getRayFromScreenCoordiantes() and getScreenCoordinatesFrom3DPosition().

- There are now access methods in IGUIWindow for getting pointers to the
  maximize, minimize and close buttons, to be able to remove them for
  example.

- Before starting up the engine, a version check now is performed and a warning is
  written, if Irrlicht.DLL version and header version of your application do
  not match.

- A bug with the skybox has been fixed: In OpenGL, it was possible to see the
  borders of the skybox. In addition, when a skybox was visible, there were
  errors in the texture coordinates of other meshes. This is all fixed now.

- A bug has been fixed causing the engine to crash when removing gui childs
  which where created inside the .dll but are removed from outside.

- A bug was fixed causing the engine to crash when drawing debug data of
  octtree scene nodes with geometry data with vertices with one texture
  coordiante.

- Multitexturing now works with linux, too. Thanx to Jon Pry again, for showing
  me where the problem was.

- The bug (reported by saigumi) preventing scene nodes attached to a camera
  from moving correctly is now fixed.

- The "Climb-Walls" bug (reported first by Matthias Gall) is fixed. Gravity
  acceleration is now quadratic instead of linear.

- A warning is now printed out, if more vertices are rendererd with one call
  than the hardware supports.

- Other, Minor New/Changed methods in public interfaces:
   * get and setText() in IGUISkin
   * += operators are now available in the string class.
   * setRelativePosition() in IGUIElement
   * enumeration EKEY_CODES renamed to EKEY_CODE
   * getMaximalPrimitiveCount() in IVideoDriver
   * getAnimationCount() in IAnimatedMeshMD2
   * getAnimationName() in IAnimatedMeshMD2

-------------------------------------------------------------------------------------
Changes in version 0.4: (04 Sep 2003)

- Collision detection and reponse based on ellipsoids in now implemented.
  There is a new method available in the ISceneCollisionMananger, which returns
  a collision response point. In addition, a new SceneNodeAnimator is available,
  which causes a scene node, to which it is attached to, not to move through
  walls, to climb stairs and to be affected by gravity. This scene node animator
  can be attached to any scene node. For example adding it to the FPSCamera, it makes
  the user possible to walk through the 3d world as in first person shooters.

- There is now a full featured Particle System included in the engine for
  creating fire, explosions, snow, smoke and so on.
  It is customizeable and extensible. There is a ParticleSystemScene node
  available in the SceneManager and some standard particle emitters and
  affectors are already implemented.

- Realistic water: The engine now features an IWaterSurfaceScene node, which
  animates a static mesh with water waves. In combination with the new
  EMT_REFLECTION or EMT_TRANSPARENT_REFLECTION material type, you can easily
  create realistic animated water surfaces.

- Triangle base picking is now possible using the ISceneCollisionMananager.
  If a collision happened, the intersection point and the triangle causing
  the intersection is returned.

- Stencil shadows are now drawn using the ZFail method by default, but it is
  possible to choose ZPass, if wished. This means that the camera may now move
  inside the shadow volumes and no errors will occur. In addition a stencil
  shadow bug is now fixed: In 0.3 there where no shadows visible in the TechDemo.

- The interface of ISceneNode has changed: There is no more a RelativeTransformation
  and AnimatedRelativeTransformation matrix. They have been replaced by 3 vectors:
  RelativeTranslation, RelativeRotation and RelativeScale, which can be accessed by
  the corresponing get() and set() methods. This simplifies the interface
  a lot. Also, the set/getRelativePosition was renamed to set/getPosition.

- The new IAnimatedMeshMD2 interface now returns start, begin time and
  fps of every MD2 animation type. In this context, IAnimatedMeshSceneNode
  got a new method called setMD2Animation(), which accepts a single constant
  like EMAT_ATTACK, which starts and plays the fitting animation (attack
  animation in this case), simplifying the interface a lot.

- Some scene nodes can now draw debug data like their bounding boxes.
  This feature is switched on for a single node by calling
  ISceneNode::setDebugDataVisible(true). Looks really interesting for
  animated scene nodes like particle systems or animated meshes.

- There is now a IGUIInOutFader avaiable, which is able to fade in or
  out the whole screen or parts of it.

- The new IVideoModeList is a list with all available video modes. It can
  be retrieved with IrrlichtDevice::getVideoModeList(). If you are confused
  now, because you think you have to create an Irrlicht Device with a video
  mode before being able to get the video mode list, let me tell you that
  there is no need to start up an Irrlicht Device with DT_DIRECTX8, DT_OPENGL or
  DT_SOFTWARE: For this (and for lots of other reasons) the null device,
  DT_NULL exists.

- With the new IMeshManipulator interface accessible with
  ISceneManager::getMeshManipulator() it is possible to perform some basic
  operations on meshes: Flipping all surfaces, recalculating all normals,
  scaling the mesh, creating a new texture mapping and so on.

- A new material for creating water surfaces or glass with reflections on it
  is available: EMT_REFLECTION_2_LAYER and EMT_TRANSPARENT_REFLECTION_2_LAYER.
  It has uses a reflection map, and an additional optional texture.
  The transparency of this material is set by the alpha color value in the vertices.

- Another new material is EMT_SOLID_2_LAYER. It is a material with 2 textures,
  blended together with the alpha value of the vertex color. This material is
  currently only available in DirectX.

- Trilinear Filtering is now supported by the engine.
  There is a new option in SMaterial: TrilinearFilter and EMF_TRILINEAR_FILTER.

- The addChild() method of the IAnimatedMeshSceneNode for adding SceneNodes to
  joints of skeletal animated meshes was removed.
  Instead there is now a new method: getMS3DJointNode(). This returns a pointer
  to a child node, which has the same transformation as the corresponding joint.
  In this way it is possible to do more advanced operations with joints and
  attaching scene nodes to joints. Also, the IAnimatedMeshMS3D interface now gives
  access to all joints. In this way, you can easily enumerate all names of all
  joints in the mesh.

- Font and color of every IGUIStaticText can now be set separately, without
  modifying the IGUISkin.

- There is now a ELEMENT_LEFT gui event, which all hovered elements receive when they
  are left.

- All features of the FileOpenDialog are now working.

- Debug informations are now printed out to the console window
  also on the win32 platform.

- FPSCamera now supports setTarget(). Its not precise but working.

- Textures of 3ds files are now loaded from the same directory in which the
  3ds file is. If the texture is not found there, the texture is tried to be
  loaded from the current working directory.

- A small bug in the 3ds file loader has been fixed. There were 3ds files exported
  by anim8or, where the reading of the 3ds file never stopped.

- It is now possible to configure the minimal amount of polygons contained
  in every node in an OctTree via addOctTreeSceneNode().

- There is a new template class in the core namespace: triangle3d. With this,
  it is easy to find intersections between lines and triangles, find out if
  a point is within a triangle and so on.

- A small bug in ISceneManager::addHillPlaneMesh() was fixed: Now the right tile
  amount is created.

- There is a new SceneNode available: IDummyTransformationSceneNode. It exists
  for making it possible to insert matrix transformations anywhere into the
  scene graph.

- Added a new SceneNode animator for deleting Scene nodes automatically after some
  time. Create it with ISceneManager::createDeleteAnimator().

- The techdemo now is interactive. After a short non-interactive flight over
  the quake 3 level, you are placed as player inside the level, may move around,
  shoot fire balls and take a look at some animated characters which are placed
  on the map.

- I fixed a bug which caused the screen get black when choosing shadows and fullscreen
  on some special 3d adapters.

- I fixed some bugs in the linux port: The timer returned an incorrect time, causing
  wrong animations everywhere and the releasing of keys and mouse buttons was not
  sent as event. In addition, I placed a copy of the zlib.a and jpeglib.a into the
  /lib/Linux directory and changed the Makefiles of the examples and the source
  of the engine for doing this automatically in the future, so I hope there will be no
  problems with other versions of zlib and jpeglib anymore.

- There are 2 new tutorials: One showing how to do collision detection and
  for special effects.

- Other, Minor New/Changed methods in public interfaces:
  * getVersion() in IrrlichtDevice
  * getLengthSQ() in vector3d
  * getInterpolated() in vector3d
  * getInterpolated() in SColor
  * getAngle() in vector2d
  * getAngleWith() in vector2d
  * getPrimitiveCountDrawed() in IVideoDriver renamed to getPrimitiveCountDrawn()
  * getSceneNodeFromSceenCoordinates() renamed to getSceneNodeFromScreenCoordinates()
  * getMeshType() in IAnimatedMesh
  * getInterpolated() in aabbox
  * setMD2Animation() in IAnimatedMeshSceneNode
  * getFullFileName() in IFileList
  * addShadowVolumeSceneNode() in IAnimatedMeshSceneNode extended with zfail parameter
  * drawStencilShadowVolume() in IVideoDriver extended with zfail parameter
  * getDistanceFromSQ() in vector3d
  * subString() in string
  * findFirst() in string
  * findLast() in string
  * getTriangleSelector() in ISceneNode
  * setTriangleSelector() in ISceneNode
  * draw3DTriangle() in IVideoDriver
  * setShadowColor() in ISceneManager
  * getShadowColor() in ISceneManager
  * addToDeletionQueue() in ISceneManager
  * getSceneNodeFromId() in ISceneManager

-------------------------------------------------------------------------------------
Changes in version 0.3: (18 Jul 2003)

- Linux port: The Irrlicht Engine now compiles and runs on Linux. Currently only
  the OpenGL driver is available. The Software driver would be there too, if
  somebody could tell me a fast way to blit a A1R5G5B5 surface to the screen
  using X.
  All examples do compile and run, but there are some things missing:
   * It is not yet possible to make the mouse cursor invisibe.
   * The timer seems not to return the currect time.
   * Multitexturing does not work correctly on all gfx adapters.

- Ms3D Animations: The engine is now able to play skeletal animations directy
  from Milkshape 3D (.ms3d) files. It is also possible to attach objects to
  parts of the animated mesh. For example a weapon to the left hand of
  the animated model.

- Because the swprintf function in Windows32 does not match the ISO C standard,
  and it does in linux and all other platforms, there is now a define in Irrlicht.h,
  to make the code be the same on all platforms:
  #define swprintf _snwprintf
  This simply means that you need to add a parameter to your swprintf calls if
  you used this function in your win32 irrlicht engine projects. For example instead
  of writing
      wchar_t tmp[255];
      swprint(tmp, "FPS: %d", fps);
  you now write
      wchar_t tmp[255];
      swprint(tmp, 255, "FPS: %d", fps);

- Automatic culling has changed a little bit: It is now done by the SceneManager.
  Scene nodes now only need to return a valid, non transformed bounding box to be
  culled automatically. It is explained in the CustomSceneNode Tutorial how this works.

- It is now possible to use the engine easily for 2D graphics: There are now to new
  methods in the IVideoDriver, which create an 1bit alpha channel for textures
  using an color key. The methods are both named makeColorKeyTexture. There is a
  tutorial '2d graphics' which explains how this works.

- The rect template class was removed and replaced by the rectEx class. There
  is now only one rectangle template available, called 'rect' for simplifying
  the interface.

- The texture coordinate bug in Milkshape 3d models with lots of shared vertices
  was fixed.

- Bugfix with GUI environment hovering invisible elements.

- There are two new tutorials: One for 2d graphics, and one for user interface.

- Tutorial changes:
   * All backslashes replaced by slashes in file names in
     all tutorials for linux compatibility.
   * RectEx replaces with rect in 1.HelloWorld
   * Added second parameter to swprintf in 2.Quake3Map
   * Added bounding box creation to 3.CustomSceneNode
   * Added second parameter to swprintf in 4.Movement

- New/Changed methods in public interfaces:
   * getClosestPoint in line3d
   * getMatrixOfMeshPart in IAnimatedMesh
   * removeChild in ISceneNode now returns true or false
   * addChild in IAnimatedMeshSceneNode
   * setParent in ISceneNode

-------------------------------------------------------------------------------------
Changes in version 0.2.5: (22 Jun 2003)

- A new material type is available: EMT_TRANSPARENT_VERTEX_ALPHA, which
  realizes transparency based on the vertex alpha color. It currently is
  only implemented in the DirectX device.

- There is now an ISceneCollisionManager available. Get it with
  getSceneCollisionManager() from the ISceneManager. It currently only implements
  picking, but more is coming soon.

- Automatic Culling based on Bounding Boxes is implemented now. It can be switched on
  or off for every SceneNode seperately using ISceneNode::setAutomaticCulling().
  It is on by default.

- It is now possible to remove loaded textures for freeing memory or reloading them.
  Use IVideoDriver::removeTexture() or removeAllTextures().

- New drawing methods in the IVideoDriver interface:
   * Draw3dLine(), drawing a 3d line.
   * Draw3dBox(), which draws an axis aligned bounding box.
   * Draw2dLine(), currently only supported by the Software device.

- MD2 bugfixes:
   * There was a small bug with texture coordinates.
   * Frames are now correctly interpolated when playing animations.

- Bugfix in the 3ds file format loader: Single objects in the 3ds file with multiple
  materials attached are now loaded correctly.

- list.h renamed to irrlist.h due to compatibility issues.

- Now works with Dev-C++ 5 Beta 8. (4.9.8.0)

- New/Changed methods in public interfaces:
   * 'getInverse' in matrix4.
   * 'transformBox' in matrix4.
   * 'repair' in aabbox.
   * 'intersectsWithLine' in aabbox.
   * 'getVector' in line3d.
   * 'getMiddle' in line3d.
   * 'normalize' method in vector3d and vector2d now returns reference to vector.
   * 'getTransformedBoundingBox' in ISceneNode.
   * 'getChildren' in ISceneNode
   * 'setRotation' in ISceneNode
   * 'addHillPlaneMesh' in ISceneManager now accepts a texture repeat count parameter.


-------------------------------------------------------------------------------------
Changes in version 0.2: (19 May 2003)

- The engine is now able to load .3ds files, with their materials and textures.

- There are some new SceneNodeAnimators: A fly straight animator and a texture animator.

- Texture coordinates can now be set to clamp or wrap mode with
  a flag in the SMaterial struct.

- Skyboxes are implemented.

- Billboards now work 100% correctly.

- The IAnimatedMeshSceneNode is now able to draw shadows of itself. To enable this, just call
  addShadowVolumeSceneNode(). Please note that shadows are currently just experimental,
  there are some bugs, and they only only in Direct3D mode.

- A small bug in the view frustum and the octree fixed.

- The default aspect ratio in all camera scene nodes was changed.

- Some changes and extenstions to the core::matrix4, SViewFrustum, plane3d and
  aabbox were made. The plane3dex was removed, there is now only one plane implementation
  available. Implemented some ideas and suggestions by Mark Jeacocke. Thanx a lot!

- The interface for adding dynamic lights has been enhanced. There are some new methods
  for handling dynamic light in the IVideoDriver interface. For example, it is now possible
  to change the ambient light.

- There is a new parameter in the createDevice() function, which specifies if the
  stencil buffer should be activated. Also, now all parameters have default parameters.

- There is now a timer object to get the current timer. It can be received using
  the getTimer() method from the IrrlichtDevice.

- The first person shooter camera is now able to be moved by external using
  setRelativePosition() and the sceneNodeAnimators. In addition, it now supports
  multiple FPS cameras.

- Mesh format loading extenstions are now possible. To extend the engine with a
  mesh format it currently does not support (e.g. .cob), just implement a
  IMeshLoader interface and add it to the engine calling
  ISceneManager::addExternalMeshLoader().

- It is now possible to extend the Irrlicht Engine easily with new texture file format
  loaders. If there is an image file format the engine does not support (for example
  .gif files) the IImageLoader interface can be implemented to load .gif files
  and added to the engine via IVideoDriver::addExternalSurfaceLoader().

-------------------------------------------------------------------------------------
Changes in version 0.1.5: (03 Apr 2003)

- The zlib and libjpeg are now included in the SDK.

- It is now possible to let the scene manager generate a hilly plane on the fly.

- The Interface for handling dynamic lights was simplified.

- The OpenGL 2D and 3D device is now full implemented.

- There is now a way to access to root scene node from the scene manager, and so it
  is possible to add external created custom scene nodes to the scene.

- There is a new Camera control scene node available in the engine: First Person Shooter
  Camera Control. Look with mouse movement, move and strafe with the cursor keys.

- The engine now compiles with g++ and the Microsoft compilers, which enables it to
  develop applications for the engine with VisualC++6.0, VisualC++.NET and Dev-C++.

- There is now a ICursorControl available in the engine, which is able to modify the
  mouse cursor: Get/Set the position of the cursor, make it invisible or visible.

- video::Color was renamed to video::SColor to fit the Irrlicht Engine naming conventions
  and for g++ compatibility issues in the Vertices.

-------------------------------------------------------------------------------------
Release notes of version 0.1: (14 Mar 2003)

  This is an alpha version of the SDK. So please note that there are
  features missing in the engine and maybe also some bugs. The following
  list is a complete list of parts of this alpha SDK which do not work
  100% correct. All other parts which can be found in the documentation
  and accessed with the Irrlicht header files work and can already be
  used.

- OpenGL Device
  The OpenGL Device is currently only able to load textures and draw basic
  3D primitives. No 2D functions, complex materials and dynamic light are
  implemented. Please use the DirectX8 or the Software Device instead.
  In the next release (0.2) the OpenGL device will be complete.

- Software Device
  Dynamic lighting, multitexturing, 3d clipping and bilinear filtering are
  not implemented because the Software Device was intented to to only 2d
  functions, the primitive 3d functions are only an addition. Until the
  first non beta release (1.0) of the Engine, some more 3d functionality
  will be added.

- BspTree
  The binary space partition scene node does not work correctly and has
  some bugs in it, which might lead to crashes. Please use the OctTree
  scene node instead. There is nearly no difference between the interface
  of them.

- MeshViewerGUIElement
  The camera control of this element is currently disabled.

- FileOpenDialog
  Not all functions are implemented.

- Render to Texture support
  Is not implemented yet.

- MS3D Skeletal Animation
  A loaded mesh is currently not animated and only drawn static.

- Quake 3 maps
  No support for curved surfaces yet.

- Linux Support
  The engine currently only runs with Windows platforms. A linux version
  will be available somewhere between the versions 0.2 and 0.5, it depends
  on the need of the users.

-------------------------------------------------------------------------------------
