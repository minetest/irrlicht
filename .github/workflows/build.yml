name: build

# build on c/cpp changes or workflow changes
on:
  - push
  - pull_request

jobs:

  linux-gl:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install g++ cmake libxxf86vm-dev libgl1-mesa-dev libpng-dev libjpeg-dev zlib1g-dev -qyy

      - name: Build
        run: |
          cmake .
          make VERBOSE=1 -j2

      - name: Package
        run: |
          make DESTDIR=$PWD/_install install
          tar -c -I "gzip -9" -f irrlicht-linux.tar.gz -C ./_install/usr/local .

      - uses: actions/upload-artifact@v2
        with:
          name: irrlicht-linux
          path: ./irrlicht-linux.tar.gz

  linux-gles:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install g++ cmake libxxf86vm-dev libgles2-mesa-dev libpng-dev libjpeg-dev zlib1g-dev xvfb -qyy

      - name: Build
        run: |
          sed '/#define _IRR_COMPILE_WITH_OGLES2_/ s|^//||g' -i include/IrrCompileConfig.h
          sed '/#define _IRR_COMPILE_WITH_OPENGL_/ s|^|//|g' -i include/IrrCompileConfig.h
          cmake . -DBUILD_EXAMPLES=1
          make -j2

      - name: Test (headless)
        run: |
          cd bin/Linux
          ./AutomatedTest null

      - name: Test (Xvfb)
        run: |
          cd bin/Linux
          LIBGL_ALWAYS_SOFTWARE=true xvfb-run ./AutomatedTest

  win32:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install cmake g++-mingw-w64-i686 -qyy

      - name: Build
        run: |
          ./scripts/ci-build-mingw.sh
        env:
          CC: i686-w64-mingw32-gcc
          CXX: i686-w64-mingw32-g++

  win64:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install cmake g++-mingw-w64-x86-64 -qyy

      - name: Build
        run: |
          ./scripts/ci-build-mingw.sh
        env:
          CC: x86_64-w64-mingw32-gcc
          CXX: x86_64-w64-mingw32-g++
  macos:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
      - name: Install deps
        run: |
          brew update
          brew install cmake libpng jpeg

      - name: Build
        run: |
          cmake . -DCMAKE_FIND_FRAMEWORK=LAST
          make -j3
  msvc:
    name: VS 2019 ${{ matrix.config.arch }}
    runs-on: windows-2019
    env:
      VCPKG_VERSION: 0bf3923f9fab4001c00f0f429682a0853b5749e0
#                    2020.11
      vcpkg_packages: zlib libpng libjpeg-turbo
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              arch: x86,
              generator: "-G'Visual Studio 16 2019' -A Win32",
              vcpkg_triplet: x86-windows
            }
          - {
              arch: x64,
              generator: "-G'Visual Studio 16 2019' -A x64",
              vcpkg_triplet: x64-windows
            }
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Restore from cache and run vcpkg
        uses: lukka/run-vcpkg@v5
        with:
          vcpkgArguments: ${{env.vcpkg_packages}}
          vcpkgDirectory: '${{ github.workspace }}\vcpkg'
          appendedCacheKey: ${{ matrix.config.vcpkg_triplet }}
          vcpkgGitCommitId: ${{ env.VCPKG_VERSION }}
          vcpkgTriplet: ${{ matrix.config.vcpkg_triplet }}

      - name: CMake
        run: |
            cmake ${{matrix.config.generator}}  `
            -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake"  `
            -DCMAKE_BUILD_TYPE=Release .

      - name: Build
        run: cmake --build . --config Release

      - name: Create artifact folder
        run: |
          mkdir artifact/
          mkdir artifact/lib/

      - name: Move dlls into artifact folder
        run: move lib\Win32-gcc\Release\* artifact\lib\

      - name: Move includes into artifact folder
        run: move include artifact/

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: msvc-${{ matrix.config.arch }}
          path: artifact/
