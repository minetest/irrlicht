This file contains API changes between consecutive versions. You can get the
relevant information about all changes to the public Irrlicht API needed for
upgrading your code (esp. custom scene nodes and GUI elements) to a new Irrlicht
version. Since all changes are incremental you should skip forward to the
version you use right now and check each note until you reach the desired
version.
Please note that the changes described here do not contain functional changes,
but only syntactical ones. Also, new methods are not documented here and
have to be looked up in the API documentation instead.

Basically, all changes have to be reflected in user code where used. Removed
and renamed methods are obviously not existant anymore. A hint is usually given
for such changes on how to remedy the situation.
Changed signatures of methods might go unnoticed. That need not be a bad thing,
e.g. for changes from s32 to u32 the parameters are usually automatically
converted by the compiler. However, one should be careful when writing custom
scene nodes or GUI elements. It might happen that the methods are not properly
chosen as candidates for virtual overloading. So always check that methods in
the user code have the proper signatures just as the interface versions. The
change hint will help to identify necessary changes.

Changes for Version 1.2
-----------------------
Removed compile flag (always used where available)
_IRR_LINUX_OPENGL_USE_EXTENSIONS_

IAnimatedMeshB3d:
Removed (no replacement available)
	virtual void AddMatrixToJoint(s32 jointNumber, core::matrix4* matrix) = 0;

IGUIElement.h
Changed signatures (made const)
	IGUIElement* getParent() const
	core::rect<s32> getRelativePosition() const

IGUITabControl.h
Changed signatures (const param)
	virtual IGUITab* addTab(const wchar_t* caption, s32 id=-1) = 0;

IImage.h
Changed signatures (made const)
	virtual ECOLOR_FORMAT getColorFormat() const = 0;

IParticleAffector.h
Changed inheritance (from irr:IUnknown)
	class IParticleAffector : public virtual io::IAttributeExchangingObject

IParticleEmitter.h
Changed inheritance (from irr:IUnknown)
	class IParticleEmitter : public virtual io::IAttributeExchangingObject

IParticleSystemSceneNode.h
Changed signatures (const param)
 	virtual IParticleEmitter* createPointEmitter(
		const core::vector3df& direction = core::vector3df(0.0f,0.03f,0.0f),
 		u32 minParticlesPerSecond = 5,
 		u32 maxParticlesPerSecond = 10,
 		video::SColor minStartColor = video::SColor(255,0,0,0),
 	virtual IParticleEmitter* createBoxEmitter(
 		const core::aabbox3df& box = core::aabbox3df(-10,28,-10,10,30,10),
 		const core::vector3df& direction = core::vector3df(0.0f,0.03f,0.0f),
 		u32 minParticlesPerSecond = 5,
 		u32 maxParticlesPerSecond = 10,
 		video::SColor minStartColor = video::SColor(255,0,0,0),

 	virtual IParticleAffector* createGravityAffector(
 		const core::vector3df& gravity = core::vector3df(0.0f,-0.03f,0.0f),
 		u32 timeForceLost = 1000) = 0;

ISceneManager.h
Changed signatures (additional param)
 	virtual ISceneNodeAnimator* createFlyCircleAnimator(const core::vector3df& center,
		f32 radius, f32 speed=0.001f, const core::vector3df& direction= core::vector3df ( 0.f, 1.f, 0.f ) ) = 0;

ITexture.h
Changed signatures (made const)
	virtual ECOLOR_FORMAT getColorFormat() const = 0;

IVideoDriver.h
Changed signatures (changed default param, use ECF_A1R5G5B5 explicitly for old behavior)
	virtual ITexture* addTexture(const core::dimension2d<s32>& size,
			const c8* name, ECOLOR_FORMAT format = ECF_A8R8G8B8) = 0;
Changed signatures (made const)
	virtual ITexture* createRenderTargetTexture(const core::dimension2d<s32>& size) = 0;

matrix4.h
Changed signatures (swapped parameter, it was (col, row) before although the names did not represent this)
	f32& operator()(s32 row, s32 col);
	const f32& operator()(s32 row, s32 col) const;

S3DVertex.h
Changed signatures (unconst param)
	S3DVertex(f32 x, f32 y, f32 z, f32 nx, f32 ny, f32 nz, SColor c, f32 tu, f32 tv);
 	S3DVertex(const core::vector3df& pos, const core::vector3df& normal,
		SColor color, const core::vector2d<f32>& tcoords);
	S3DVertex2TCoords(f32 x, f32 y, f32 z, SColor c, f32 tu, f32 tv, f32 tu2, f32 tv2);
	S3DVertex2TCoords(const core::vector3df& pos, SColor color,
 		const core::vector2d<f32>& tcoords, const core::vector2d<f32>& tcoords2);
	S3DVertex2TCoords(f32 x, f32 y, f32 z, f32 nx, f32 ny, f32 nz, SColor c, f32 tu, f32 tv);
 	S3DVertex2TCoords(const core::vector3df& pos, const core::vector3df& normal,
		SColor color, const core::vector2d<f32>& tcoords);
 	S3DVertexTangents(const core::vector3df& pos,
		const core::vector2df& tcoords,	SColor c);

SColor.h
Changed signatures (changed param types from signed to unsigned)
	inline u16 RGBA16(u32 r, u32 g, u32 b, u32 a);
	inline u16 RGB16(u32 r, u32 g, u32 b);
	inline u16 X8R8G8B8toA1R5G5B5(u32 color);
	inline u32 A1R5G5B5toA8R8G8B8(u32 color);
	inline u32 R5G6B5toA8R8G8B8(u16 color);
	inline u16 R5G6B5toA1R5G5B5(u16 color);
	inline u16 A1R5G5B5toR5G6B5(u16 color);
	inline u32 getAlpha(u16 color);
	inline u32 getRed(u16 color);
	inline u32 getGreen(u16 color);
	inline u32 getBlue(u16 color);
	inline u32 getLuminance(u16 color);
	inline SColor (u32 a, u32 r, u32 g, u32 b);
	inline SColor(u32 clr);
	inline u32 getAlpha() const
	inline u32 getRed() const
	inline u32 getGreen() const
	inline u32 getBlue() const
	inline void setAlpha(u32 a);
	inline void setRed(u32 r);
	inline void setGreen(u32 g);
	inline void setBlue(u32 b);
	inline u16 toA1R5G5B5() const
	inline void toOpenGLColor(u8* dest) const
	inline void set(u32 a, u32 r, u32 g, u32 b);
	inline void set(u32 col);
Changed signatures (const param)
	inline SColor getInterpolated(const SColor &other, f32 d) const
Changed public member (type changed)
	u32 color;


Changes for Version 1.3
-----------------------
Globally renamed Frustrum to Frustum in all signatures and code parts

IAnimatedMeshB3d.h
Renamed methods (small first letter)
	virtual void setInterpolationMode(s32 mode) = 0;
	virtual void setAnimateMode(s32 mode) = 0;

IAnimatedMeshSceneNode.h
changed signature (changed types)
	virtual void setAnimationSpeed(f32 framesPerSecond) = 0;

ICameraSceneNode.h
Renamed methods and changed signature (changed types, frustum renaming)
	virtual const SViewFrustum* getViewFrustum() const = 0;

IFileSystem.h
Renamed method (from addUnZipFileArchive)
	virtual bool addFolderFileArchive(const c8* filename, bool ignoreCase = true, bool ignorePaths = true) = 0;

IGUIContextMenu.h
Changed signature (added param)
 	virtual s32 addItem(const wchar_t* text, s32 commandId=-1, bool enabled=true,
			bool hasSubMenu=false, bool checked=false) = 0;

IGUIElement.h
Changed inheritance
	class IGUIElement : public virtual io::IAttributeExchangingObject, public IEventReceiver
Changed signature (made const)
	core::rect<s32> getAbsolutePosition() const

IGUIEnvironment.h
Changed signature (added param)
 	virtual IGUIButton* addButton(const core::rect<s32>& rectangle,
		IGUIElement* parent=0, s32 id=-1, const wchar_t* text=0, const wchar_t* tooltiptext = 0) = 0;

IGUIListBox.h
Removed method (Using sprite bank now)
	virtual void setIconFont(IGUIFont* font) = 0;
Change signature (changed types, due to sprite bank)
	virtual s32 addItem(const wchar_t* text, s32 icon) = 0;

IGUISkin.h
Changed inheritance
	class IGUISkin : public virtual io::IAttributeExchangingObject

IGUIToolbar.h
Changed signature (Added param for tooltips)
	virtual IGUIButton* addButton(s32 id=-1, const wchar_t* text=0, const wchar_t* tooltiptext=0,
		video::ITexture* img=0, video::ITexture* pressedimg=0,
		bool isPushButton=false, bool useAlphaChannel=false) = 0;

IImage.h
Changed signature (made const)
	virtual u32 getPitch() const = 0;

IImageWriter.h
Changed signature (additional param)
	virtual bool writeImage(io::IWriteFile *file, IImage *image, u32 param = 0) = 0;

IMeshBuffer.h
Changed signature (changed return type)
	virtual u32 getVertexCount() const = 0;
	virtual u32 getIndexCount() const = 0;
Removed method (use setBoundingBox instead)
	virtual core::aabbox3df& getBoundingBox() = 0;

IMesh.h
Changed signature (changed types, made const)
	virtual u32 getMeshBufferCount() const = 0;
	virtual IMeshBuffer* getMeshBuffer(u32 nr) const = 0;
Removed method (use setBoundingBox instead)
	virtual core::aabbox3d<f32>& getBoundingBox() = 0;

IReadFile.h
Changed signature (changed types)
	virtual s32 read(void* buffer, u32 sizeToRead) = 0;

irrArray.h
Changed signature (made const)
	s32 binary_search(const T& element, s32 left, s32 right) const

irrMath.h
Constant changed
	const f32 PI			= 3.14159265359f;
Constants removed (use RADTODEG64 or DEGTORAD64 instead)
	const f64 GRAD_PI		= 180.0 / PI64;
	const f64 GRAD_PI2		= PI64 / 180.0;
Changed signature (added tolerance parameter)
	inline bool equals(const f32 a, const f32 b, const f32 tolerance = ROUNDING_ERROR_32)

irrString.h
Changed signature (const param)
 	template <class B> string(const B* const c, u32 length);
 	template <class B> string(const B* const c);
 	template <class B> string<T>& operator=(const B* const c);
 	template <class B> string<T> operator+(const B* const c) const
	bool operator ==(const T* const str) const
	bool operator !=(const T* const str) const
	bool equalsn(const T* const str, int len) const
	void append(const T* const other);
	s32 findFirstChar(const T* const c, u32 count) const
 	template <class B> s32 findFirstCharNotInList(const B* const c, u32 count) const
 	template <class B> s32 findLastCharNotInList(const B* const c, u32 count) const
 	template <class B> s32 find(const B* const str) const
	void operator += (const T* const c);
Changed signature (changed type from signed)
	T& operator [](const u32 index) const
	u32 size() const
	void append(const string<T>& other, u32 length);
	void reserve(u32 count);
	s32 findNext(T c, u32 startPos) const
	string<T> subString(u32 begin, s32 length) const
	void erase(u32 index);
	void reallocate(u32 new_size);
Changed signature (added param)
	s32 findLast(T c, s32 start = -1) const

ISceneManager.h
Changed signature (changed default param from 128 minimalPolysPerNode)
 	virtual ISceneNode* addOctTreeSceneNode(IAnimatedMesh* mesh, ISceneNode* parent=0,
		s32 id=-1, s32 minimalPolysPerNode=256, bool alsoAddIfMeshPointerZero=false) = 0;
 	virtual ISceneNode* addOctTreeSceneNode(IMesh* mesh, ISceneNode* parent=0,
		s32 id=-1, s32 minimalPolysPerNode=256, bool alsoAddIfMeshPointerZero=false) = 0;
Changed signature (added param)
	virtual ICameraSceneNode* addCameraSceneNodeFPS(ISceneNode* parent = 0,
		f32 rotateSpeed = 100.0f, f32 moveSpeed = 500.0f, s32 id=-1,
		SKeyMap* keyMapArray=0, s32 keyMapSize=0, bool noVerticalMovement=false,
		f32 jumpSpeed = 0.f) = 0;

	virtual IBillboardSceneNode* addBillboardSceneNode(ISceneNode* parent = 0,
		const core::dimension2d<f32>& size = core::dimension2d<f32>(10.0f, 10.0f),
		const core::vector3df& position = core::vector3df(0,0,0), s32 id=-1,
		video::SColor shade_top = 0xFFFFFFFF, video::SColor shade_down = 0xFFFFFFFF) = 0;

	virtual ITerrainSceneNode* addTerrainSceneNode(
		const c8* heightMapFileName,
		ISceneNode* parent=0, s32 id=-1,
		const core::vector3df& position = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& rotation = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& scale = core::vector3df(1.0f,1.0f,1.0f),
		video::SColor vertexColor = video::SColor(255,255,255,255),
		s32 maxLOD=5, E_TERRAIN_PATCH_SIZE patchSize=ETPS_17, s32 smoothFactor=0) = 0;

	virtual ITerrainSceneNode* addTerrainSceneNode(
		io::IReadFile* heightMapFile,
		ISceneNode* parent=0, s32 id=-1,
		const core::vector3df& position = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& rotation = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& scale = core::vector3df(1.0f,1.0f,1.0f),
		video::SColor vertexColor = video::SColor(255,255,255,255),
		s32 maxLOD=5, E_TERRAIN_PATCH_SIZE patchSize=ETPS_17, s32 smoothFactor=0) = 0;
Changed signature (changed return type)
	virtual u32 registerNodeForRendering(ISceneNode* node,
		E_SCENE_NODE_RENDER_PASS pass = ESNRP_AUTOMATIC) = 0;

ISceneNodeAnimatorCollisionResponse.h
Changed signature (made const)
	virtual void setEllipsoidTranslation(const core::vector3df &translation) = 0;

ISceneNode.h
Renamed method (from OnPreRender)
	virtual void OnRegisterSceneNode();
Renamed method (from OnPostRender)
	virtual void OnAnimate(u32 timeMs);
Changed signature (made const)
	virtual const core::aabbox3d<f32> getTransformedBoundingBox() const
	const core::matrix4& getAbsoluteTransformation() const
	virtual bool isVisible() const
	virtual s32 getID() const
	scene::ISceneNode* getParent() const
	virtual ESCENE_NODE_TYPE getType() const
Changed signature (changed type)
	virtual video::SMaterial& getMaterial(u32 num);
	void setMaterialTexture(u32 textureLayer, video::ITexture* texture);
	void setAutomaticCulling( E_CULLING_TYPE state);
	virtual void setDebugDataVisible(E_DEBUG_SCENE_TYPE visible);
Changed signature (changed return type)
	virtual u32 getMaterialCount();
	virtual const core::vector3df& getRotation() const
	E_CULLING_TYPE getAutomaticCulling() const
Changed signature (changed return type, made const)
	E_DEBUG_SCENE_TYPE isDebugDataVisible() const

ITerrainSceneNode.h
Changed signature (changed return type)
	virtual u32 getIndexCount() = 0;

ITexture.h
Changed signature (changed return type, made const)
	virtual u32 getPitch() const = 0;
Removed method (Available in SMaterial now)
	core::matrix4& getTransformation();

IVideoDriver.h
Changed signature (changed types)
	virtual ITexture* getTextureByIndex(u32 index) = 0;
	virtual void drawVertexPrimitiveList(const void* vertices, u32 vertexCount, const u16* indexList, u32 triangleCount, E_VERTEX_TYPE vType, scene::E_PRIMITIVE_TYPE pType) = 0;
 	virtual void drawIndexedTriangleList(const S3DVertex* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount) = 0;
	virtual void drawIndexedTriangleList(const S3DVertex2TCoords* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount) = 0;
	virtual void drawIndexedTriangleList(const S3DVertexTangents* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount) = 0;
	virtual void drawIndexedTriangleFan(const S3DVertex* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount) = 0;
	virtual void drawIndexedTriangleFan(const S3DVertex2TCoords* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount) = 0;
	virtual const SLight& getDynamicLight(u32 idx) = 0;
	virtual IMaterialRenderer* getMaterialRenderer(u32 idx) = 0;
	virtual const c8* getMaterialRendererName(u32 idx) = 0;
Changed signature (const param)
	virtual void drawMeshBuffer( const scene::IMeshBuffer* mb) = 0;
	virtual io::IAttributes* createAttributesFromMaterial(const video::SMaterial& material) = 0;
Changed signature (added param)
	virtual u32 getPrimitiveCountDrawn( u32 param = 0 ) = 0;
	virtual bool writeImageToFile(IImage* image, const c8* filename, u32 param = 0) = 0;
	virtual IImage* createImageFromData(ECOLOR_FORMAT format,
		const core::dimension2d<s32>& size, void *data,
		bool ownForeignMemory=false,
		bool deleteMemory = true) = 0;
Changed signature (changed return types)
	virtual u32 getMaximalDynamicLightAmount() = 0;
	virtual u32 getDynamicLightCount() = 0;
	virtual u32 getMaximalPrimitiveCount() = 0;
	virtual u32 getMaterialRendererCount() = 0;

matrix4.h
Changed signature (added param)
	matrix4( eConstructor constructor = EM4CONST_IDENTITY );
Changed signature (const param)	
	f32& operator()(const s32 row, const s32 col);
	const f32& operator()(const s32 row, const s32 col) const
Changed signature (param order)	
	void transformVect( vector3df& out, const vector3df& in ) const;

quaternion.h
Changed signature (changed return type)
	void slerp( quaternion q1, const quaternion q2, f32 interpolate );

SColor.h
Renamed method (from getLuminance), changed types
	inline s32 getAverage(s16 color);
Changed signature (changed return types)
	inline f32 getLuminance() const
Changed signature (const param)
	inline SColorf getInterpolated(const SColorf &other, f32 d) const

SMaterial.h
Constant type changed
	const u32 MATERIAL_MAX_TEXTURES = 4;
Type changed
	class SMaterial
Public members removed (use Textures[] instead)
	ITexture* Texture1;
	ITexture* Texture2;
	ITexture* Texture3;
	ITexture* Texture4;
Public members removed (use setFlag()/getFlag() instead)
	Flags[]
Public members changed (type changed)
	u32 ZBuffer;
Changed signature (made const)
	inline bool operator!=(const SMaterial& b) const

SMeshBuffer.h
Changed signature (changed param)
	virtual u32 getVertexCount() const
	virtual u32 getIndexCount() const
Removed method (use setBoundingBox instead)
	virtual core::aabbox3d<f32>& getBoundingBox();

SMeshBufferLightMap.h
Changed signature (changed param)
	virtual u32 getVertexCount() const
	virtual u32 getIndexCount() const
Removed method (use setBoundingBox instead)
	virtual core::aabbox3d<f32>& getBoundingBox();

SMeshBufferTangents.h
Changed signature (changed param)
	virtual u32 getVertexCount() const
	virtual u32 getIndexCount() const
Removed method (use setBoundingBox instead)
	virtual core::aabbox3d<f32>& getBoundingBox();

SMesh.h
Changed signature (changed param, made const)
	virtual u32 getMeshBufferCount() const
	virtual IMeshBuffer* getMeshBuffer(u32 nr) const
Removed method (use setBoundingBox instead);
	virtual core::aabbox3d<f32>& getBoundingBox();

vector3d.h
Changed signature (changed return type)
	T getLength() const
Changed signature (changed type)
	vector3d<T> getInterpolated(const vector3d<T>& other, const T d) const

Changes for Version 1.3.1
-------------------------
Changed types:
	SMeshBuffer* types are now template typedefs from CMeshBuffer

dimension2d.h
Changed signature (const param)
	dimension2d(const T& width, const T& height);
	dimension2d<T> operator/(const T& scale);
	dimension2d<T> operator*(const T& scale);

IAnimatedMeshSceneNode.h
Changed signature (made const)
	virtual s32 getFrameNr() const = 0;
	virtual s32 getStartFrame() const = 0;
	virtual s32 getEndFrame() const = 0;
Renamed method (from getAbsoluteTransformation)
	virtual const SMD3QuaterionTag& getMD3TagTransformation( const core::stringc & tagname) = 0;

IGUIButton.h
Renamed method (from getUseAlphaChannel)
	virtual bool isAlphaChannelUsed() = 0;

IGUIElementFactory.h
Changed signature (made const)
	EGUI_ELEMENT_TYPE getType() const
	virtual const c8* getTypeName() const

IGUIEnvironment.h
Changed signature (added param)
	virtual bool saveGUI(const c8* filename, IGUIElement* start=0) = 0;
	virtual bool saveGUI(io::IWriteFile* file, IGUIElement* start=0) = 0;
	virtual bool loadGUI(const c8* filename, IGUIElement* parent=0) = 0;
	virtual bool loadGUI(io::IReadFile* file, IGUIElement* parent=0) = 0;

IGUIFontBitmap.h
Changed signature (made const)
	virtual EGUI_FONT_TYPE getType() const { return EGFT_BITMAP; }

IGUIFont.h
Changed signature (made const)
	virtual EGUI_FONT_TYPE getType() const { return EGFT_CUSTOM; }

IGUISkin.h
Changed signature (added param)
	virtual IGUIFont* getFont(EGUI_DEFAULT_FONT which=EGDF_DEFAULT) = 0;
	virtual void setFont(IGUIFont* font, EGUI_DEFAULT_FONT which=EGDF_DEFAULT) = 0;
Changed signature (made const)
	virtual EGUI_SKIN_TYPE getType() const { return EGST_UNKNOWN; };

IImage.h
Changed signature (made const)
	virtual const core::dimension2d<s32>& getDimension() const = 0;
	virtual u32 getRedMask() const = 0;
	virtual u32 getGreenMask() const = 0;
	virtual u32 getBlueMask() const = 0;
	virtual u32 getAlphaMask() const = 0;
Changed signature (changed return type, made const)
	virtual u32 getBitsPerPixel() const = 0;
	virtual u32 getBytesPerPixel() const = 0;
	virtual u32 getImageDataSizeInBytes() const = 0;
	virtual u32 getImageDataSizeInPixels() const = 0;
Changed signature (changed param type, made const)
	virtual SColor getPixel(u32 x, u32 y) const = 0;

IMeshCache.h
Changed signature (const param)
	virtual void removeMesh(const IAnimatedMesh* const mesh) = 0;
Changed signature (const param, made const)
	virtual s32 getMeshIndex(const IAnimatedMesh* const mesh) const = 0;
	virtual const c8* getMeshFilename(const IAnimatedMesh* const mesh) const = 0;
	virtual const c8* getMeshFilename(const IMesh* const mesh) const = 0;
Changed signature (changed return type, made const)
	virtual u32 getMeshCount() const = 0;
Changed signature (changed param type)
	virtual IAnimatedMesh* getMeshByIndex(u32 index) = 0;
Changed signature (made const)
	virtual const c8* getMeshFilename(u32 index) const = 0;

IParticleAffector.h
Changed signature (made const)
	virtual E_PARTICLE_AFFECTOR_TYPE getType() const = 0;

IParticleEmitter.h
Changed signature (made const)
	virtual E_PARTICLE_EMITTER_TYPE getType() const = 0;

irrString.h
Changed signature (const param)
	string(const double number);
Changed signature (changed return type)
	string<T>& operator += (T c);
	string<T>& operator += (const string<T>& other);
Changed signature (changed return type, const param)
	string<T>& operator += (const T* const c);
	string<T>& operator += (const int i);
	string<T>& operator += (const double i);

ISceneManager.h
Changed signature (added param)
	virtual ITerrainSceneNode* addTerrainSceneNode(
		const c8* heightMapFileName,
		ISceneNode* parent=0, s32 id=-1,
		const core::vector3df& position = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& rotation = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& scale = core::vector3df(1.0f,1.0f,1.0f),
		video::SColor vertexColor = video::SColor(255,255,255,255),
		s32 maxLOD=5, E_TERRAIN_PATCH_SIZE patchSize=ETPS_17, s32 smoothFactor=0,
		bool addAlsoIfHeightmapEmpty = false) = 0;
	virtual ITerrainSceneNode* addTerrainSceneNode(
		io::IReadFile* heightMapFile,
		ISceneNode* parent=0, s32 id=-1,
		const core::vector3df& position = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& rotation = core::vector3df(0.0f,0.0f,0.0f),
		const core::vector3df& scale = core::vector3df(1.0f,1.0f,1.0f),
		video::SColor vertexColor = video::SColor(255,255,255,255),
		s32 maxLOD=5, E_TERRAIN_PATCH_SIZE patchSize=ETPS_17, s32 smoothFactor=0,
		bool addAlsoIfHeightmapEmpty = false) = 0;
	virtual ISceneManager* createNewSceneManager(bool cloneContent=false) = 0;

ISceneNodeAnimator.h
Changed signature (made const)
	virtual ESCENE_NODE_ANIMATOR_TYPE getType() const

ITexture.h
Changed signature (made const)
	virtual bool hasMipMaps() const

IVideoDriver.h
Changed signature (reference param)
	virtual void draw3DBox(const core::aabbox3d<f32>& box,
		SColor color = SColor(255,255,255,255)) = 0;
Changed signature (added defaults for param)
	virtual void draw2DImage(video::ITexture* texture,
			const core::position2d<s32>& pos,
			const core::array<core::rect<s32> >& sourceRects,
			const core::array<s32>& indices,
			s32 kerningWidth=0,
			const core::rect<s32>* clipRect=0,
			SColor color=SColor(255,255,255,255),
			bool useAlphaChannelOfTexture=false) = 0;
Changed signature (changed return type)
	virtual const SExposedVideoData& getExposedVideoData() = 0;

line3d.h
Changed signature (changed return type)
	T getLength() const

matrix4.h
Changed type to template class
	template <class T> class CMatrix4
	typedef CMatrix4<f32> matrix4;
Changed signature (changed return type)
	T& operator()(const s32 row, const s32 col);
	const T& operator()(const s32 row, const s32 col) const
	T& operator[](u32 index);
	const T& operator[](u32 index) const
Changed signature (changed param type)
	inline CMatrix4<T>& operator=(const T& scalar);
	const T* pointer() const
	T* pointer();
	CMatrix4<T> operator*(const T& scalar) const;
	CMatrix4<T>& operator*=(const T& scalar);
	void transformVect(T *out,const core::vector3df &in) const;
	void rotateVect(T *out,const core::vector3df &in) const;
	void multiplyWith1x4Matrix(T* matrix) const;
	CMatrix4<T> interpolate(const core::CMatrix4<T>& b, f32 time) const;

plane3d.h
Renamed method (from existsInterSection)
	bool existsIntersection(const plane3d<T>& other) const

quaternion.h
Changed signature (unconst param)
	void slerp( quaternion q1, quaternion q2, f32 interpolate );

SExposedVideoData.h
Removed public member (replaced by X11Display and X11Window)
 	OpenGLLinux.Window;

SIrrCreationParameters.h
Changed public member (changed type for 64bit system support)
	void* WindowId;

triangle3d.h
Changed method to private
	bool isOnSameSide(const vector3d<T>& p1, const vector3d<T>& p2,
		const vector3d<T>& a, const vector3d<T>& b) const

vector2d.h
Changed signature (changed return value)
	T getLength() const
	T getDistanceFrom(const vector2d<T>& other) const

vector3d.h
Changed signature (changed return value)
	T getDistanceFrom(const vector3d<T>& other) const

Changes for Version 1.4
-----------------------
This release had many changes in API method signatures. Many methods have been
made const, also several parameter types were changed. The two most noticeable
changes (which almost every user of the Irrlicht API will come across) are the
renaming of IUnknown to IReferenceCounted and const-ref change of the SEvent
structure of the OnEvent method. Another important change: DirectX8 support is
now by default disabled, enable the define in IrrCompileConfig.h to restore the
old behavior.

IReferenceCounted.h
Renamed Type (from IUnknown). This changed most classes in Irrlicht
	class IReferenceCounted

IEventReceiver.h
Changed signature (made const)
	virtual bool OnEvent(const SEvent& event) = 0;

IrrCompileConfig.h
DirectX8 support is now by default disabled

CMeshBuffer.h
Removed method
	virtual u32 getVertexPitch() const

fast_atof.h
Changed signature to allow optional second parameter
	u32 strtol10(const char* in, const char** out=0)

IAnimatedMesh.h
Changed inheritance (instead of IReferenceCounted)
	class IAnimatedMesh : public IMesh
Changed signature (made const)
	virtual u32 getFrameCount() const = 0;

IAnimatedMeshSceneNode.h
Changed signature (changed param type)
	virtual void setCurrentFrame(f32 frame) = 0;
Replaced methods (generalized method getJointNode available)
	virtual ISceneNode* getMS3DJointNode(const c8* jointName) = 0;
	virtual ISceneNode* getXJointNode(const c8* jointName) = 0;
	virtual ISceneNode* getB3DJointNode(const c8* jointName) = 0;
Changed signature (changed return type)
	virtual f32 getFrameNr() const = 0;
Changed signature (made const)
	virtual bool isReadOnlyMaterials() const = 0;

IAttributeExchangingObject.h
Changed signature (made const)
	virtual void serializeAttributes(io::IAttributes* out, io::SAttributeReadWriteOptions* options=0) const {}

IAttributes.h
Changed signature (made const, changed param type)
	virtual u32 getAttributeCount() const = 0;
Changed signature (added param)
	virtual bool read(io::IXMLReader* reader, bool readCurrentElementOnly=false, const wchar_t* elementName=0) = 0;
	virtual bool write(io::IXMLWriter* writer, bool writeXMLHeader=false, const wchar_t* elementName=0) = 0;
Changed signature (made const-ref param)
	virtual void addMatrix(const c8* attributeName, const core::matrix4& v) = 0;
	virtual void setAttribute(const c8* attributeName, const core::matrix4& v) = 0;
	virtual void setAttribute(s32 index, const core::matrix4& v) = 0;

IBillboardSceneNode.h
Changed signature (made const)
	virtual const core::dimension2d<f32>& getSize() const = 0;
	virtual void getColor(video::SColor & topColor, video::SColor & bottomColor) const = 0;

ICameraSceneNode.h
Changed signature (made const)
	virtual const core::matrix4& getProjectionMatrix() const = 0;
	virtual const core::matrix4& getViewMatrix() const = 0;
	virtual bool OnEvent(const SEvent& event) = 0;
	virtual f32 getNearValue() const = 0;
	virtual f32 getFarValue() const = 0;
	virtual f32 getAspectRatio() const = 0;
	virtual f32 getFOV() const = 0;
	virtual bool isInputReceiverEnabled() const = 0;
	virtual bool isOrthogonal() const 

ICursorControl.h
Changed signature (made const)
		virtual bool isVisible() const = 0;

IFileList.h
Changed signature (made const, changed param or return types)
	virtual u32 getFileCount() const = 0;
	virtual const c8* getFileName(u32 index) const = 0;
	virtual const c8* getFullFileName(u32 index) = 0;
	virtual bool isDirectory(u32 index) const = 0;

IFileSystem.h	2007-09-17 09:53:10.000000000 +0200
Changed signature (made const method and const-ref param)
	virtual core::stringc getAbsolutePath(const core::stringc& filename) const = 0;
	virtual core::stringc getFileDir(const core::stringc& filename) const = 0;
Changed signature (made const)
	virtual IFileList* createFileList() const = 0;
	virtual bool existFile(const c8* filename) const = 0;

IGUIButton.h
Changed signature (made const)
	virtual bool isPressed() const = 0;
	virtual bool isAlphaChannelUsed() const = 0;
	virtual bool isPushButton() const = 0;
	virtual bool isDrawingBorder() const = 0;

IGUICheckBox.h
Changed signature (made const)
	virtual bool isChecked() const = 0;

IGUIComboBox.h
Changed signature (made const, changed param or return types)
	virtual u32 getItemCount() const = 0;
	virtual const wchar_t* getItem(u32 idx) const = 0;
	virtual s32 getSelected() const = 0;
Changed signature (changed param or return types)
	virtual u32 addItem(const wchar_t* text) = 0;
	virtual void removeItem(u32 id) = 0;

IGUIContextMenu.h
Changed signature (changed param or return types)
	virtual u32 getItemCount() const = 0;
	virtual u32 addItem(const wchar_t* text, s32 commandId=-1, bool enabled=true, bool hasSubMenu=false, bool checked=false) = 0;
	virtual void setItemText(u32 idx, const wchar_t* text) = 0;
	virtual void setItemEnabled(u32 idx, bool enabled) = 0;
	virtual void setItemChecked(u32 idx, bool enabled) = 0;
	virtual void removeItem(u32 idx) = 0;
	virtual void setItemCommandId(u32 idx, s32 id) = 0;
Changed signature (made const, changed param or return types)
	virtual const wchar_t* getItemText(u32 idx) const = 0;
	virtual bool isItemEnabled(u32 idx) const = 0;
	virtual bool isItemChecked(u32 idx) const = 0;
	virtual s32 getSelectedItem() const = 0;
	virtual s32 getItemCommandId(u32 idx) const = 0;
	virtual IGUIContextMenu* getSubMenu(u32 idx) const = 0;

IGUIEditBox.h
Changed signature (changed param or return types)
	virtual void setMax(u32 max) = 0;
Changed signature (made const, changed param or return types)
	virtual u32 getMax() const = 0;

IGUIElementFactory.h
Changed signature (made const)
	virtual s32 getCreatableGUIElementTypeCount() const = 0;
	virtual EGUI_ELEMENT_TYPE getCreateableGUIElementType(s32 idx) const = 0;
	virtual const c8* getCreateableGUIElementTypeName(s32 idx) const = 0;
	virtual const c8* getCreateableGUIElementTypeName(EGUI_ELEMENT_TYPE type) const = 0;

IGUIElement.h
Changed signature (made const)
	bool isNotClipped() const
	virtual bool isVisible() const
	virtual bool isSubElement() const
	virtual bool isEnabled() const
	virtual const wchar_t* getText() const
	virtual s32 getID() const
	virtual void serializeAttributes(io::IAttributes* out, io::SAttributeReadWriteOptions* options=0) const
Changed signature (made const-ref param or return type)
	virtual const core::stringw& getToolTipText() const
	virtual bool OnEvent(const SEvent& event)

IGUIEnvironment.h
Changed signature (changed return type)
	virtual bool setFocus(IGUIElement* element) = 0;
	virtual bool removeFocus(IGUIElement* element) = 0;
Changed signature (made const)
	virtual IGUIElement* getFocus() const = 0;
	virtual bool hasFocus(IGUIElement* element) const = 0;
	virtual video::IVideoDriver* getVideoDriver() const = 0;
	virtual io::IFileSystem* getFileSystem() const = 0;
	virtual IOSOperator* getOSOperator() const = 0;
	virtual IGUISkin* getSkin() const = 0;
	virtual IGUIFont* getBuiltInFont() const = 0;
	virtual IGUIElementFactory* getDefaultGUIElementFactory() const = 0;
	virtual void serializeAttributes(io::IAttributes* out, io::SAttributeReadWriteOptions* options=0) const =0;
Changed signature (made const-ref param or return type)
	virtual bool postEventFromUser(const SEvent& event) = 0;
Changed signature (made const, changed param or return types)
	virtual u32 getRegisteredGUIElementFactoryCount() const = 0;
	virtual IGUIElementFactory* getGUIElementFactory(u32 index) const = 0;

IGUIFileOpenDialog.h
Changed signature (made const)
	virtual const wchar_t* getFileName() const = 0;

IGUIFontBitmap.h
Changed signature (made const)
	virtual IGUISpriteBank* getSpriteBank() const = 0;
	virtual u32 getSpriteNoFromChar(const wchar_t *c) const = 0;
	virtual s32 getKerningWidth(const wchar_t* thisLetter=0, const wchar_t* previousLetter=0) const = 0;

IGUIFont.h
Changed signature (made const)
	virtual core::dimension2d<s32> getDimension(const wchar_t* text) const = 0;
	virtual s32 getCharacterFromPos(const wchar_t* text, s32 pixel_x) const = 0;
	virtual s32 getKerningWidth(const wchar_t* thisLetter=0, const wchar_t* previousLetter=0) const = 0;
	virtual s32 getKerningHeight() const = 0;

IGUIListBox.h
Changed signature (made const, changed param or return types)
	virtual u32 getItemCount() const = 0;
	virtual const wchar_t* getListItem(u32 id) const = 0;
	virtual s32 getIcon(u32 index) const = 0;
Changed signature (changed param or return types)
	virtual u32 addItem(const wchar_t* text) = 0;
	virtual u32 addItem(const wchar_t* text, s32 icon) = 0;
	virtual void removeItem(u32 index) = 0;
Changed signature (made const)
	virtual s32 getSelected() const = 0;

IGUIMeshViewer.h
Changed signature (made const)
		virtual const video::SMaterial& getMaterial() const = 0;

IGUIScrollBar.h
Changed signature (made const)
	virtual s32 getMax() const = 0;
	virtual s32 getSmallStep() const = 0;
	virtual s32 getPos() const = 0;

IGUISkin.h
Changed signature (made const)
	virtual video::SColor getColor(EGUI_DEFAULT_COLOR color) const = 0;
	virtual s32 getSize(EGUI_DEFAULT_SIZE size) const = 0;
	virtual const wchar_t* getDefaultText(EGUI_DEFAULT_TEXT text) const = 0;
	virtual IGUIFont* getFont(EGUI_DEFAULT_FONT which=EGDF_DEFAULT) const = 0;
	virtual IGUISpriteBank* getSpriteBank() const = 0;
	virtual u32 getIcon(EGUI_DEFAULT_ICON icon) const = 0;

IGUISpriteBank.h
Changed signature (made const)
	virtual u32 getTextureCount() const = 0;
	virtual video::ITexture* getTexture(u32 index) const = 0;

IGUIStaticText.h
Changed signature (made const)
	virtual IGUIFont* getOverrideFont(void) const = 0;
	virtual video::SColor const& getOverrideColor(void) const = 0;
	virtual bool isOverrideColorEnabled(void) const = 0;
	virtual bool isWordWrapEnabled(void) const = 0;
	virtual s32 getTextHeight() const = 0;
	virtual s32 getTextWidth(void) const = 0;

IGUITabControl.h
Changed signature (made const)
	virtual s32 getNumber() const = 0;
	virtual s32 getTabCount() const = 0;
	virtual IGUITab* getTab(s32 idx) const = 0;
	virtual s32 getActiveTab() const = 0;

IGUIWindow.h
Changed signature (made const)
	virtual IGUIButton* getCloseButton() const = 0;
	virtual IGUIButton* getMinimizeButton() const = 0;
	virtual IGUIButton* getMaximizeButton() const = 0;

IImageLoader.h
Changed signature (made const)
	virtual bool isALoadableFileExtension(const c8* fileName) const = 0;
	virtual bool isALoadableFileFormat(io::IReadFile* file) const = 0;
	virtual IImage* loadImage(io::IReadFile* file) const = 0;

IImageWriter.h
Changed signature (made const)
	virtual bool isAWriteableFileExtension(const c8* fileName) const = 0;
	virtual bool writeImage(io::IWriteFile *file, IImage *image, u32 param = 0) const = 0;

ILogger.h
Changed signature (made const)
	virtual ELOG_LEVEL getLogLevel() const = 0;

IMaterialRenderer.h
Changed signature (made const-ref param)
	virtual void OnSetMaterial(const SMaterial& material, const SMaterial& lastMaterial, bool resetAllRenderstates, IMaterialRendererServices* services) {};
Changed signature (made const)
	virtual bool isTransparent() const { return false; }
	virtual s32 getRenderCapability() const { return 0; }

IMesh.h
Changed signature (made const)
		virtual IMeshBuffer* getMeshBuffer( const video::SMaterial &material) const = 0;

IMeshLoader.h
Changed signature (made const)
	virtual bool isALoadableFileExtension(const c8* fileName) const = 0;

IMeshManipulator.h
Removed method (now in IMeshBuffer)
	virtual void recalculateBoundingBox(scene::IMeshBuffer* buffer) const

IMeshSceneNode.h
Changed signature (made const)
	virtual bool isReadOnlyMaterials() const = 0;

IOSOperator.h
Changed signature (made const)
	virtual const wchar_t* getOperationSystemVersion() const = 0;
	virtual void copyToClipboard(const c8* text) const = 0;
	virtual c8* getTextFromClipboard() const = 0;	
	virtual bool getProcessorSpeedMHz(u32* MHz) const = 0;
	virtual bool getSystemMemory(u32* Total, u32* Avail) const = 0;

IParticleAffector.h
Changed signature (made const)
	virtual void serializeAttributes(io::IAttributes* out, io::SAttributeReadWriteOptions* options=0) const {}

IParticleEmitter.h
Changed signature (made const)
	virtual void serializeAttributes(io::IAttributes* out, io::SAttributeReadWriteOptions* options=0) const {}

IParticleSystemSceneNode.h
Changed signature (changed return type, changed param types)
	virtual IParticlePointEmitter* createPointEmitter(
 		const core::vector3df& direction = core::vector3df(0.0f,0.03f,0.0f), 
 		u32 minParticlesPerSecond = 5,
 		u32 maxParticlesPerSecond = 10,
		const video::SColor& minStartColor = video::SColor(255,0,0,0),
		const video::SColor& maxStartColor = video::SColor(255,255,255,255),
 		u32 lifeTimeMin=2000, u32 lifeTimeMax=4000,
 		s32 maxAngleDegrees=0) = 0;
	virtual IParticleEmitter* createBoxEmitter(
 		const core::aabbox3df& box = core::aabbox3df(-10,28,-10,10,30,10),
 		const core::vector3df& direction = core::vector3df(0.0f,0.03f,0.0f), 
 		u32 minParticlesPerSecond = 5,
 		u32 maxParticlesPerSecond = 10,
		const video::SColor& minStartColor = video::SColor(255,0,0,0),
		const video::SColor& maxStartColor = video::SColor(255,255,255,255),
 		u32 lifeTimeMin=2000, u32 lifeTimeMax=4000,
 		s32 maxAngleDegrees=0) = 0;
	virtual IParticleFadeOutAffector* createFadeOutParticleAffector(
		const video::SColor& targetColor = video::SColor(0,0,0,0),
 		u32 timeNeededToFadeOut = 1000) = 0;
	virtual IParticleGravityAffector* createGravityAffector(
 		const core::vector3df& gravity = core::vector3df(0.0f,-0.03f,0.0f),
 		u32 timeForceLost = 1000) = 0;

IQ3Shader.h
Removed method
	bool operator < ( const SVariable &other ) const

IReadFile.h
Changed param types (adapt the correct C-API for file positions)
	virtual bool seek(long finalPos, bool relativeMovement = false) = 0;
	virtual long getSize() const = 0;
	virtual long getPos() const = 0;
	IReadFile* createLimitReadFile(const c8* fileName, IReadFile* alreadyOpenedFile, long areaSize);
	IReadFile* createMemoryReadFile(void* memory, long size, const c8* fileName, bool deleteMemoryWhenDropped);
Changed signature (made const)
	virtual const c8* getFileName() const = 0;

IrrlichtDevice.h
Changed signature (made const)
	virtual bool isWindowActive() const = 0;
	virtual const c8* getVersion() const = 0;
Changed signature (made const-ref param)
	virtual void postEventFromUser(const SEvent& event) = 0;

irrList.h
Changed some structures in order to incorporate a ConstIterator class.
	Iterator begin()
	ConstIterator begin() const
	Iterator end()
	ConstIterator end() const
	Iterator getLast()
	ConstIterator getLast() const
	void insert_after(const Iterator& it, const T& element)
	void insert_before(const Iterator& it, const T& element)

irrMath.h
Changed signature (Use const references for better class handling)
	inline const T& min_(const T& a, const T& b)
	inline const T& min_(const T& a, const T& b, const T& c)
	inline const T& max_(const T& a, const T& b)
	inline const T& max_(const T& a, const T& b, const T& c)
	inline T abs_(const T& a)
	inline T lerp(const T& a, const T& b, const f32 t)
	inline const T clamp (const T& value, const T& low, const T& high) 

irrString.h
Changed signature (made proper const method)
	T& operator [](const u32 index)
	const T& operator [](const u32 index) const

irrXML.h
Changed signature (adapt the correct C-API for file positions, made const)
	virtual long getSize() const = 0;
Changed signature (changed param types)
	virtual unsigned int getAttributeCount() const = 0;

ISceneManager.h
Changed signature (changed param types)
	virtual IAnimatedMesh* addHillPlaneMesh(const c8* name,
		const core::dimension2d<f32>& tileSize, const core::dimension2d<u32>& tileCount,
		video::SMaterial* material = 0,	f32 hillHeight = 0.0f,
		const core::dimension2d<f32>& countHills = core::dimension2d<f32>(0.0f, 0.0f),
		const core::dimension2d<f32>& textureRepeatCount = core::dimension2d<f32>(1.0f, 1.0f)) = 0;
Changed signature (changed param types and order)
	virtual IAnimatedMesh* addArrowMesh(const c8* name,
			video::SColor vtxColor0=0xFFFFFFFF,
			video::SColor vtxColor1=0xFFFFFFFF,
			u32 tesselationCylinder=4, u32 tesselationCone=8,
			f32 height=1.f, f32 cylinderHeight=0.6f,
			f32 width0=0.05f, f32 width1=0.3f) = 0;
Changed signature (changed param types)
	virtual bool postEventFromUser(const SEvent& event) = 0;
	virtual ISceneNodeFactory* getSceneNodeFactory(u32 index) = 0;
	virtual ISceneNodeAnimatorFactory* getSceneNodeAnimatorFactory(u32 index) = 0;
Changed signature (made const)
	virtual E_SCENE_NODE_RENDER_PASS getSceneNodeRenderPass() const = 0;
Changed signature (changed param types, made const)
	virtual u32 getRegisteredSceneNodeFactoryCount() const = 0;
	virtual u32 getRegisteredSceneNodeAnimatorFactoryCount() const = 0;
	virtual const video::SColorf& getAmbientLight() const = 0;

ISceneNodeAnimatorCollisionResponse.h
Changed signature (made const)
	virtual bool isFalling() const = 0;

ISceneNodeAnimatorFactory.h
Changed signature (changed param types, made const)
	virtual u32 getCreatableSceneNodeAnimatorTypeCount() const = 0;
	virtual ESCENE_NODE_ANIMATOR_TYPE getCreateableSceneNodeAnimatorType(u32 idx) const = 0;
	virtual const c8* getCreateableSceneNodeAnimatorTypeName(u32 idx) const = 0;
Changed signature (made const)
	virtual const c8* getCreateableSceneNodeAnimatorTypeName(ESCENE_NODE_ANIMATOR_TYPE type) const = 0;

ISceneNodeFactory.h
Changed signature (changed param types, made const)
	virtual u32 getCreatableSceneNodeTypeCount() const = 0;
	virtual ESCENE_NODE_TYPE getCreateableSceneNodeType(u32 idx) const = 0;
	virtual const c8* getCreateableSceneNodeTypeName(u32 idx) const = 0;
Changed signature (made const)
	virtual const c8* getCreateableSceneNodeTypeName(ESCENE_NODE_TYPE type) const = 0;

ISceneNode.h
Changed signature (made const)
	virtual u32 getMaterialCount() const
	bool isDebugObject() const
	virtual void serializeAttributes(io::IAttributes* out, io::SAttributeReadWriteOptions* options=0) const

IShadowVolumeSceneNode.h
Changed signature (made const param)
	virtual void setMeshToRenderFrom(const IMesh* mesh) = 0;

ITerrainSceneNode.h
Changed signature (made const)
	virtual u32 getIndexCount() const = 0;
	virtual void getMeshBufferForLOD(SMeshBufferLightMap& mb, s32 LOD) const = 0;
	virtual s32 getCurrentLODOfPatches(core::array<s32>& LODs) const = 0;
	virtual f32 getHeight( f32 x, f32 y ) const = 0;
Changed signature (made const, made const-ref param)
	virtual const core::vector3df& getTerrainCenter() const = 0;

ITexture.h
Changed signature (made const)
	virtual const core::dimension2d<s32>& getOriginalSize() const = 0;
	virtual const core::dimension2d<s32>& getSize() const = 0;
	virtual E_DRIVER_TYPE getDriverType() const = 0;
	const core::stringc& getName() const { return Name; }

ITimer.h
Changed signature (made const)
	virtual u32 getRealTime() const = 0;
	virtual u32 getTime() const = 0;
	virtual f32 getSpeed() const = 0;
	virtual bool isStopped() const = 0;

ITriangleSelector.h
Changed signature (made const)
 	virtual void getTriangles(core::triangle3df* triangles, s32 arraySize,
		s32& outTriangleCount, const core::matrix4* transform=0) const = 0;
 	virtual void getTriangles(core::triangle3df* triangles, s32 arraySize,
 		s32& outTriangleCount, const core::aabbox3d<f32>& box, 
		const core::matrix4* transform=0) const = 0;
 	virtual void getTriangles(core::triangle3df* triangles, s32 arraySize,
 		s32& outTriangleCount, const core::line3d<f32>& line, 
		const core::matrix4* transform=0) const = 0;

IVideoDriver.h
Changed signature (made const, changed param type)
	virtual u32 getTextureCount() const = 0;
Changed signature (made const param) in all draw2DImage methods
	virtual void draw2DImage(const video::ITexture* texture,
Changed signature (made const-ref param, made const)
	virtual const core::dimension2d<s32>& getScreenSize() const = 0;
	virtual const core::dimension2d<s32>& getCurrentRenderTargetSize() const = 0;
Changed signature (made const)
	virtual bool queryFeature(E_VIDEO_DRIVER_FEATURE feature) const = 0;
	virtual const core::matrix4& getTransform(E_TRANSFORMATION_STATE state) const = 0;
	virtual ITexture* createRenderTargetTexture(const core::dimension2d<s32>& size, const c8* name = 0) = 0;
	virtual void makeColorKeyTexture(video::ITexture* texture, video::SColor color) const = 0;
	virtual void makeColorKeyTexture(video::ITexture* texture,
		core::position2d<s32> colorKeyPixelPos) const = 0;
	virtual void makeNormalMapTexture(video::ITexture* texture, f32 amplitude=1.0f) const = 0;
	virtual s32 getFPS() const = 0;
	virtual u32 getPrimitiveCountDrawn( u32 param = 0 ) const = 0;
	virtual u32 getMaximalDynamicLightAmount() const = 0;
	virtual u32 getDynamicLightCount() const = 0;
	virtual const SLight& getDynamicLight(u32 idx) const = 0;
	virtual const wchar_t* getName() const = 0;
	virtual u32 getMaximalPrimitiveCount() const = 0;
	virtual bool getTextureCreationFlag(E_TEXTURE_CREATION_FLAG flag) const = 0;
	virtual u32 getMaterialRendererCount() const = 0;
	virtual const c8* getMaterialRendererName(u32 idx) const = 0;
	virtual E_DRIVER_TYPE getDriverType() const = 0;

IWriteFile.h
Changed signature (changed param type)
	virtual s32 write(const void* buffer, u32 sizeToWrite) = 0;
	virtual bool seek(long finalPos, bool relativeMovement = false) = 0;
Changed signature (changed param type, made const)
	virtual long getPos() const = 0;
Changed signature (made const)
	virtual const c8* getFileName() const = 0;

line2d.h
Changed signature (made const)
	vector2d<T> getUnitVector() const
	f64 getAngleWith(const line2d<T>& l) const
	T getPointOrientation(const vector2d<T>& point) const
	bool isPointOnLine(const vector2d<T>& point) const

matrix4.h
Changed signature (made template param)
	void setTranslation( const vector3d<T>& translation );
	vector3d<T> getTranslation() const;
	void setInverseTranslation( const vector3d<T>& translation );
	inline void setRotationRadians( const vector3d<T>& rotation );
	void setRotationDegrees( const vector3d<T>& rotation );
	core::vector3d<T> getRotationDegrees() const;
	inline void setInverseRotationRadians( const vector3d<T>& rotation );
	void setInverseRotationDegrees( const vector3d<T>& rotation );
	void setScale( const vector3d<T>& scale );
	core::vector3d<T> getScale() const;

rect.h
Changed signature (made non-const ref param, C++ conformance)
	rect<T>& operator+=(const position2d<T>& pos)
	rect<T>& operator-=(const position2d<T>& pos)

S3DVertex.h
Changed inheritance (S3DVertex is now base class of other vertex types)
struct S3DVertex2TCoords : public S3DVertex
struct S3DVertexTangents : public S3DVertex

SAnimatedMesh.h
Changed signature (changed param type, made const)
	virtual u32 getFrameCount() const

SColor.h
Changed signature (changed param type)
	inline u32 A1R5G5B5toA8R8G8B8(u16 color)

SLight.h
Removed attribute (use LightSceneNode position instead)
	core::vector3df Position;

SMaterial.h
Changed attribute structure (texture layer properties are now in thenew TextureLayer array). This changes access to Textures, TextureMatrix, TextureWrap, and the filter settings, which are also per-layer now.
	SMaterialLayer TextureLayer[MATERIAL_MAX_TEXTURES];

vector3d.h
Changed signature (made template param)
	bool equals(const vector3d<T>& other, const T tolerance = (T)ROUNDING_ERROR_32 ) const

Changes for Version 1.4.1
-------------------------
Since this version is a backward compatible bugfix release, the API changes are only a few. None of them should result
in uncompilable code. Newly found warnings might point out wrongly used variables, additional casts or type changes in the
app should easily fix that. The only change which might go unnoticed by the compiler, but affect the application is the
changed initialization in SColorf. This was done to synchronize with other constructors from SColorf and SColor, though,
so the expectations are now much better met.
Also, OSX users have to adjust the defines in IrrCompileConfig, as we now also have OSX defines in Irrlicht style. It's now
even possible to build with X11 support under OSX without changes in the device code.

SColor.h
Changed signature (SColorf is now default initialized to alpha=1.0f)
	SColorf(f32 r=0.f, f32 g=0.f, f32 b=0.f, f32 a=1.f) : r(r), g(g), b(b), a(a) {}

IrrCompileConfig.h
Split the OSX define into platform and device (from old MACOSX define)
	_IRR_OSX_PLATFORM_ for Apple systems running OSX
	_IRR_USE_OSX_DEVICE_ for Cocoa native windowing on OSX

ISceneManager.h
Added new overload for getMesh with IReadFile instead of filename.
	virtual IAnimatedMesh* getMesh(io::IReadFile* file) = 0;

irrMath.h
Renamed method setbit
	REALINLINE void setbit_cond ( u32 &state, s32 condition, u32 mask )

ISceneNode.h
Changed signature (because the debug data enum values can be OR'ed to enable multiple debug data types)
	virtual void setDebugDataVisible(s32 state)
	s32 isDebugDataVisible() const
	s32 DebugDataVisible;

matrix4.h
Changed signature (Added return values to some methods)
	inline CMatrix4<T>& setbyproduct(const CMatrix4<T>& other_a,const CMatrix4<T>& other_b );
	CMatrix4<T>& setbyproduct_nocheck(const CMatrix4<T>& other_a,const CMatrix4<T>& other_b );
	inline CMatrix4<T>& makeIdentity();
	CMatrix4<T>& setTranslation( const vector3d<T>& translation );
	CMatrix4<T>& setInverseTranslation( const vector3d<T>& translation );
	inline CMatrix4<T>& setRotationRadians( const vector3d<T>& rotation );
	CMatrix4<T>& setRotationDegrees( const vector3d<T>& rotation );
	inline CMatrix4<T>& setInverseRotationRadians( const vector3d<T>& rotation );
	CMatrix4<T>& setInverseRotationDegrees( const vector3d<T>& rotation );
	CMatrix4<T>& setScale( const vector3d<T>& scale );
	CMatrix4<T>& buildProjectionMatrixPerspectiveFovRH(f32 fieldOfViewRadians, f32 aspectRatio, f32 zNear, f32 zFar);
	CMatrix4<T>& buildProjectionMatrixPerspectiveFovLH(f32 fieldOfViewRadians, f32 aspectRatio, f32 zNear, f32 zFar);
	CMatrix4<T>& buildProjectionMatrixPerspectiveRH(f32 widthOfViewVolume, f32 heightOfViewVolume, f32 zNear, f32 zFar);
	CMatrix4<T>& buildProjectionMatrixPerspectiveLH(f32 widthOfViewVolume, f32 heightOfViewVolume, f32 zNear, f32 zFar);
	CMatrix4<T>& buildProjectionMatrixOrthoLH(f32 widthOfViewVolume, f32 heightOfViewVolume, f32 zNear, f32 zFar);
	CMatrix4<T>& buildProjectionMatrixOrthoRH(f32 widthOfViewVolume, f32 heightOfViewVolume, f32 zNear, f32 zFar);
	CMatrix4<T>& buildCameraLookAtMatrixLH(...)
	CMatrix4<T>& buildCameraLookAtMatrixRH(...)
	CMatrix4<T>& buildShadowMatrix(const core::vector3df& light, core::plane3df plane, f32 point=1.0f);
	CMatrix4<T>& buildNDCToDCMatrix( const core::rect<s32>& area, f32 zScale);
	CMatrix4<T>& setTextureScale( f32 sx, f32 sy );
	CMatrix4<T>& setTextureRotationCenter( f32 radAngle );
	CMatrix4<T>& setTextureScaleCenter( f32 sx, f32 sy );
	CMatrix4<T>& setTextureTranslate( f32 x, f32 y );
	CMatrix4<T>& setM(const T* data);
Added overload (for one scale value for all axes)
	CMatrix4<T>& setScale( const T scale ) { return setScale(core::vector3d<T>(scale,scale,scale)); }

S3DVertex.h
Added operator
	bool operator<(const S3DVertex& other) const
	bool operator<(const S3DVertex2TCoords& other) const
	bool operator<(const S3DVertexTangents& other) const

irrString.h
Changed signature (int->u32, negative length didn't make sense)
	bool equalsn(const string<T>& other, u32 n) const
	bool equalsn(const T* const str, u32 n) const
New overload/missing method (completing the findLast... and find...Char methods)
	s32 findLastChar(const T* const c, u32 count) const
Changed signature (Added return value)
	string<T>& trim()

Changes for Version 1.4.2
-------------------------
This is once more a bugfix release of the 1.4 branch, and hence pretty API-consistent and backward compatible. The major reason to publish this release is the OpenGL bug, which made several OpenGL 2.x drivers run in SW emulation.
However, we also introduced some driver consistency fixes, which might affect your application's behavior. So read through the next points thoroughly.

SceneParameters.h (and general video driver behavior)
The way Irrlicht handles zbuffer writing with transparent materials has changed. This was an issue ever since, because the default behavior in Irrlicht is to disable writing to the z-buffer for all really transparent, i.e. blending materials. This avoids problems with intersecting faces, but can also break renderings. And this is now consistent for both OpenGL and Direct3D.
If transparent materials should use the SMaterial flag for ZWriteEnable just as other material types use the newly introduced attribute scene::ALLOW_ZWRITE_ON_TRANSPARENT like this:
SceneManager->getParameters()->setAttribute(scene::ALLOW_ZWRITE_ON_TRANSPARENT, true);
All transparent materials will henceforth work as specified by the material flag, until the scenemanager attribute is set to false.

SMaterialLayer.h
The texture matrix now uses irrAllocator for memory handling. This shouldn't be noticeable from the user application (besides fixed heap corruptions on Windows machines), but is still mentioned for completeness.

ISceneNode.h
Documentation error. The docs said that children of a scene node are not visible if the node itself is set to visible. This is of course wrong, children inherit non-visibility of the parent and are hence invisible if the parent is. If the parent is visible, the visibility flag of the child determines its status.

SColor.h
Removed methods (use the unsigned versions and cast in your app if necessary)
	inline s32 getRedSigned(u16 color)
	inline s32 getGreenSigned(u16 color)
	inline s32 getBlueSigned(u16 color)

IParticleSystemSceneNode.h
Changed default values (the old direction default was no real direction)
 	virtual IParticleAnimatedMeshSceneNodeEmitter* createAnimatedMeshSceneNodeEmitter(...)
	virtual IParticleCylinderEmitter* createCylinderEmitter(...)
 	virtual IParticleMeshEmitter* createMeshEmitter(...)

IBoneSceneNode.h
Changed signature (Made const)
	virtual E_BONE_SKINNING_SPACE getSkinningSpace() const=0;

IrrlichtDevice.h
Changed signature (Return value bool instead of void). Returns whether the event has been handled somewhere.
	virtual bool postEventFromUser(const SEvent& event) = 0;

Changes for Version 1.5
-----------------------
Another major release, so expect API breaks at several places. The changes
herein are described as a difference to Irrlicht 1.4.2.

The most noticeable changes are the speed factor of the FPS camera (now units/ms
instead of units/s, so divide the parameter by 1000.f) and the new interfaces
of the camera nodes, based on scene node animators. Custom camera nodes should
be adpated to this new scheme, although they might still work. Also, particle
sizes are now set and handled by the emitters, which requires a change of the
particle system constructor call or adaption of the setParticleSize method to
work on the emitters. A deprecation method is issued if the old scheme is used.
Light setting has also changed, the SLight struct is used in even less
situations than before, instead use methods in ILightSceneNode.

Other changes did change major parts of the underlying structures, but might go
unnoticed on the user level. This includes 32bit indices and Vertex Buffer
Objects. However, VBOs require the user to call setDirty on Meshes or
MeshBuffers after changes to the vertex or index data. The all need only to be
done once before the next render call, but again after subsequent changes later
on.


All Mesh types and MeshBuffers:
New methods for VBO support. Once VBOs are enabled for a meshbuffer, changes
will only be effective after a call to setDirty(). VBOs are enabled by default
for some scene nodes.
	virtual void setDirty(E_BUFFER_TYPE buffer=EBT_VERTEX_AND_INDEX);

All MeshBuffers:
Due to the 32bit support, it might happen that indices are stored as 32bit integers. The actual index type can be queried from a mesh buffer.
	virtual video::E_INDEX_TYPE getIndexType() const

IrrCompileConfig.h
Some new defines for configuring Irrlicht
_IRR_USE_WINDOWS_CE_DEVICE_ for Windows CE API based device
_IRR_COMPILE_WITH_JOYSTICK_EVENTS_ to enable joystick support (enabled by default)
_IRR_COMPILE_WITH_LWO_LOADER_ to enable the LWO mesh loader (enabled by default)
_IRR_COMPILE_WITH_OBJ_WRITER_ to enable the OBJ mesh writer (enabled by default)
_IRR_COMPILE_WITH_WAL_LOADER_ to enable the WAL image loader (enabled by default)
_IRR_USE_NVIDIA_PERFHUD_ for support of the PerfHUD tool (disabled by default)

SceneParameters.h
New parameter scene::OBJ_LOADER_IGNORE_GROUPS, which allows to ignore the group structure of obj files. It's disabled by default, meaning obj groups will be represented by separate meshbuffers.

SColor.h
Renamed method names of the SColorHSL class
	void fromRGB(const SColor &color);
	void toRGB(SColor &color) const;

ITexture.h
Added new parameter
	virtual void* lock(bool readOnly = false) = 0;

IMeshManipulator.h
Renamed methods (the old ones still exist, but are deprecated). The new methods also work on meshbuffers, not just meshes.
(renamed from scaleMesh)
	virtual void scale(IMesh* mesh, const core::vector3df& factor) const = 0;
(renamed from transformMesh)
	virtual void transform(IMesh* mesh, const core::matrix4& m) const = 0;
Changed signature (Added new parameters to adjust the algorithm)
	virtual IMesh* createMeshWithTangents(IMesh* mesh, bool recalculateNormals=false, bool smooth=false, bool angleWeighted=false) const = 0;

IBillboardTextSceneNode.h
New interface replacing the multiple inheritance from bliiboard and text scene node previously used by the billboard text scene node.

IParticleSystemSceneNode.h
All emitters have minStartSize and maxStartSize parameters now, since partice size is handled by the emitters now.
Default value added
	virtual void setParticlesAreGlobal(bool global=true) = 0;

fast_atof.h
Signature change (return value changed from u32)
inline s32 strtol10(const char* in, const char** out=0)
Signature change (parameter changed from float)
inline const char* fast_atof_move( const char * in, f32 & out)

IAnimatedMeshSceneNode.h
Added new parameter (dummy node used for simplifying shadow calculation)
	virtual IShadowVolumeSceneNode* addShadowVolumeSceneNode(const IMesh* shadowMesh=0,
		s32 id=-1, bool zfailmethod=true, f32 infinity=10000.0f) = 0;
 
ISceneManager.h
Removed extra render passes for quake shaders
Changed scene node from ISceneNode to IMeshSceneNode
	virtual IMeshSceneNode* addCubeSceneNode(f32 size=10.0f, ISceneNode* parent=0, s32 id=-1, ...)
	virtual IMeshSceneNode* addSphereSceneNode(f32 radius=5.0f, s32 polyCount=16, ...)
Changed default value (from 256 to 512, for efficiency on common gfx hardware)
 	virtual ISceneNode* addOctTreeSceneNode(IAnimatedMesh* mesh, ISceneNode* parent=0,
		s32 id=-1, s32 minimalPolysPerNode=512, bool alsoAddIfMeshPointerZero=false) = 0;
Changed default value (from 500.f, to adapt the changed speed scale) 
 	virtual ICameraSceneNode* addCameraSceneNodeFPS(ISceneNode* parent = 0,
		f32 rotateSpeed = 100.0f, f32 moveSpeed = .5f, s32 id=-1, ...)
Added default values 
 	virtual ISceneNode* addSkyDomeSceneNode(video::ITexture* texture,
		u32 horiRes=16, u32 vertRes=8,
		f64 texturePercentage=0.9, f64 spherePercentage=2.0,
		ISceneNode* parent=0, s32 id=-1) = 0;
Changed return value (from ITextSceneNode, due to changed inheritance) 
	virtual IBillboardTextSceneNode* addBillboardTextSceneNode( gui::IGUIFont* font, const wchar_t* text, ...)
Changed default value (gravity, from -100.f)
 	virtual ISceneNodeAnimatorCollisionResponse* createCollisionResponseAnimator(
 		ITriangleSelector* world, ISceneNode* sceneNode,
 		const core::vector3df& ellipsoidRadius = core::vector3df(30,60,30),
		const core::vector3df& gravityPerSecond = core::vector3df(0,-10.0f,0),
 		const core::vector3df& ellipsoidTranslation = core::vector3df(0,0,0),
 		f32 slidingValue = 0.0005f) = 0;
 
ISceneNodeAnimator.h
Changed inheritance (for interactive animators)
	class ISceneNodeAnimator : public io::IAttributeExchangingObject, public IEventReceiver
Changed to pure virtual (bug fix)
	virtual ISceneNodeAnimator* createClone(ISceneNode* node, ISceneManager* newManager=0) = 0;

IVideoModeList.h
Changed return value (constification)
	virtual const core::dimension2d<s32>& getDesktopResolution() const = 0;

IBoneSceneNode.h
Deprecation: Use getName instead.
	virtual const c8* getBoneName() const;

vector3d.h
Changed return value (return *this)
	vector3d<T>& set(const T nx, const T ny, const T nz) {X=nx; Y=ny; Z=nz; return *this;}
	vector3d<T>& set(const vector3d<T>& p) {X=p.X; Y=p.Y; Z=p.Z;return *this;}
	vector3d<T>& setLength(T newlength)
	vector3d<T>& invert()
Added default value
	void rotateXZBy(f64 degrees, const vector3d<T>& center=vector3d<T>())
	void rotateXYBy(f64 degrees, const vector3d<T>& center=vector3d<T>())
	void rotateYZBy(f64 degrees, const vector3d<T>& center=vector3d<T>())
Changed parameter type (interpolation factor must not be integral)
	vector3d<T> getInterpolated(const vector3d<T>& other, f64 d) const
	vector3d<T> getInterpolated_quadratic(const vector3d<T>& v2, const vector3d<T>& v3, f64 d) const
Method made const 
	vector3d<T> getHorizontalAngle() const
 
SLight.h
Attenuation can be overridden by ILightSceneMethod setRadius() Attenuation will
change to (0,1.f/radius,0). Can be overridden after radius was set.
The following members are read-only now: 
	f32 Radius;
 	E_LIGHT_TYPE Type;
 	bool CastShadows;

ITerrainSceneNode.h
Parameter type changed (diue to possible 32bit indices)
	virtual void getMeshBufferForLOD(IDynamicMeshBuffer& mb, s32 LOD=0) const =0;
Added dafault value (highest detail) 
	virtual void setLODOfPatch(s32 patchX, s32 patchZ, s32 LOD=0) =0;

SExposedVideoData.h
Changed member attributes (from s32, to fix 64bit architecture problems)
	void* HWnd;
	void* HDc;
	void* HRc;
	void* HWnd;

IAnimatedMeshMD3.h
Changed return value (constification)
	const SMD3QuaterionTag& operator[](u32 index) const

IQ3Shader.h
Changed default q3 shader values (from LIGHTMAP_M2)
	const video::E_MATERIAL_TYPE defaultMaterialType = video::EMT_LIGHTMAP_M4;
	const video::E_MODULATE_FUNC defaultModulate = video::EMFN_MODULATE_4X;

ISceneNode.h
Method made virtual
	virtual const core::matrix4& getAbsoluteTransformation() const
Changed return value (constified)
	virtual const core::vector3df& getScale() const
	virtual const core::vector3df& getPosition() const

IEventReceiver.h
Removed member from UserEvent
	f32 UserData3;
 
SMaterial.h
Changed member type (from u32)
	char ZBuffer;

IGUISkin.h
Added parameter (for alignment)
 	virtual void draw3DTabButton(IGUIElement* element, bool active,
		const core::rect<s32>& rect, const core::rect<s32>* clip=0, gui::EGUI_ALIGNMENT alignment=EGUIA_UPPERLEFT) = 0;
 	virtual void draw3DTabBody(IGUIElement* element, bool border, bool background,
		const core::rect<s32>& rect, const core::rect<s32>* clip=0, s32 tabHeight=-1, gui::EGUI_ALIGNMENT alignment=EGUIA_UPPERLEFT ) = 0;

quaternion.h
Renamed method (from getDotProduct)
	inline f32 dotProduct(const quaternion& other) const;
Changed return value (return *this)
	quaternion& set(f32 x, f32 y, f32 z, f32 w);
	quaternion& set(f32 x, f32 y, f32 z);
	quaternion& set(const core::vector3df& vec);
	quaternion& makeInverse();
	quaternion& slerp( quaternion q1, quaternion q2, f32 interpolate );
	quaternion& fromAngleAxis (f32 angle, const vector3df& axis);
	quaternion& makeIdentity();
	quaternion& rotationFromTo(const vector3df& from, const vector3df& to);

IVideoDriver.h
Added parameters (moved from endScene) and added default values
	virtual bool beginScene(bool backBuffer=true, bool zBuffer=true,
		SColor color=SColor(255,0,0,0), void* windowId=0,
		core::rect<s32>* sourceRect=0) = 0;
Removed parameter (move to beginScene)
	virtual bool endScene() = 0;
Renamed method (note, also affects ReferenceCount behavior!)
Use addRenderTargetTexture instead of createRenderTargetTexture
	virtual ITexture* addRenderTargetTexture(const core::dimension2d<s32>& size,
		const c8* name=0) =0;
Changed parameters (for 32bit index support)
 	virtual void drawVertexPrimitiveList(const void* vertices, u32 vertexCount,
		const void* indexList, u32 primCount, E_VERTEX_TYPE vType,
		scene::E_PRIMITIVE_TYPE pType, E_INDEX_TYPE iType) = 0;
Changed parameter (colors are const pointers now) 
 	virtual void draw2DImage(const video::ITexture* texture, const core::rect<s32>& destRect,
 		const core::rect<s32>& sourceRect, const core::rect<s32>* clipRect = 0,
		const video::SColor * const colors=0, bool useAlphaChannelOfTexture=false) = 0;

IQ3LevelMesh.h
Added default value
	virtual const quake3::SShader* getShader( const c8* filename, bool fileNameIsValid=true ) = 0;

ICameraSceneNode.h
Added method parameter (required to set orthogonal together with projection to avoid inconsistencies)
	virtual void setProjectionMatrix(const core::matrix4& projection, bool isOrthogonal = false) = 0;
Removed method (use new parameter in setProjectionMatrix)
	void setIsOrthogonal( bool orthogonal )
Constified return value 
	virtual const core::vector3df& getTarget() const = 0;
	virtual const core::vector3df& getUpVector() const = 0;
 
matrix4.h
Removed method (use transformPlane)
	void transformPlane_new( core::plane3d<f32> &plane) const;
Changed qulifications (to enable use under Win32 systems, too)
	IRRLICHT_API extern const matrix4 IdentityMatrix;

SIrrCreationParameters.h
Changed member attribute types
	u8 Bits;
	const c8* const SDK_version_do_not_use;

IGUIElement.h
Renamed method from setRelativePosition (to distinguish rather different parameter interpretation)
	void setRelativePositionProportional(const core::rect<f32>& r) 

irrString.h
Constructors made explicit (use core::stringc(var) in places where var was used before)
	explicit string(const double number)
	explicit string(int number)
	explicit string(unsigned int number)
Added parameter (allows use of method for stringw, and other things)
	string<T>& trim(const string<T> & whitespace = " \t\n\r")

vector2d.h
Changed return value (return *this)
	vector2d<T>& set(T nx, T ny) {X=nx; Y=ny; return *this; }
	vector2d<T>& set(const vector2d<T>& p) { X=p.X; Y=p.Y; return *this; }
Added default value
	vector2d<T>& rotateBy(f64 degrees, const vector2d<T>& center=vector2d<T>())
Changed parameter type (interpolation factor must not be int)
	vector2d<T> getInterpolated(const vector2d<T>& other, f64 d) const
	vector2d<T> getInterpolated_quadratic(const vector2d<T>& v2, const vector2d<T>& v3, f64 d) const
	vector2d<T>& interpolate(const vector2d<T>& a, const vector2d<T>& b, f64 d)

Changes for Version 1.5.1
-------------------------
This release is a pure bugfixes release, with almost no visible API changes. All changes should be backward compatible (as it's just a minor release), but you have to recompile the app due to changes in the virtual method tables.

dimension2d.h
Fixed a bug in the operator+=, added operator-= and changed comparison to equal() method.
	dimension2d<T>& operator-=(const dimension2d<T>& other)

IrrCompileConfig.h
Added defines to check for the Irrlicht version in the code.
	IRRLICHT_VERSION_MAJOR
	IRRLICHT_VERSION_MINOR
	IRRLICHT_VERSION_REVISION
	IRRLICHT_VERSION_SVN // only defined if you're using a version from SVN, i.e. not officially released one

IrrlichtDevice.h
Added static method isDriverSupported which checks the driver support of the library
	static bool isDriverSupported(video::E_DRIVER_TYPE driver)

irrMath.h
Added iszero specialization for f64
	bool iszero(const f64 a, const f64 tolerance = ROUNDING_ERROR_64)

irrXML.h
Added deleteCallback flag for cleanup of the ReadCallback.
	IrrXMLReader* createIrrXMLReader(IFileReadCallBack* callback, bool deleteCallback = false);
	IrrXMLReaderUTF16* createIrrXMLReaderUTF16(IFileReadCallBack* callback, bool deleteCallback = false);
	IrrXMLReaderUTF32* createIrrXMLReaderUTF32(IFileReadCallBack* callback, bool deleteCallback = false);

ISceneNode.h
Added getSceneManager to get the currently used scene manager of the node.
	ISceneManager* getSceneManager(void) const

IVideoDriver.h
Added default values for vType, pType, and iType
	virtual void drawVertexPrimitiveList(const void* vertices, u32 vertexCount, const void* indexList, u32 primCount,
						E_VERTEX_TYPE vType=EVT_STANDARD, scene::E_PRIMITIVE_TYPE pType=scene::EPT_TRIANGLES, E_INDEX_TYPE iType=EIT_16BIT)
Added method to draw 2d rectangle outline
	void draw2DRectangleOutline(const core::recti& pos, SColor color=SColor(255,255,255,255))

matrix4.h
Added method to get transposedInverse
	CMatrix4<T> transposedInverse(*this, EM4CONST_INVERSE_TRANSPOSED)

rect.h
Added typedefs
	typedef rect<f32> rectf;
	typedef rect<s32> recti;

SSharedMeshBuffer.h
Split hardware mapping hint into vertex and index part
	E_HARDWARE_MAPPING getHardwareMappingHint_Vertex() const
	E_HARDWARE_MAPPING getHardwareMappingHint_Index() const
	void setHardwareMappingHint( E_HARDWARE_MAPPING NewMappingHint, E_BUFFER_TYPE buffer=EBT_VERTEX_AND_INDEX )

vector2d.h
Fix angle calculation for integer vectors

Changes for Version 1.5.2
-------------------------
Even less visible changes have been made in this version. Only the automatic Solaris OS recognition has changed, so make sure you have all things defined properly if you compile for Solaris. And the float parser bugfix is a visible change, though non-interfering for existing code.

Changes for Version 1.6.0
-------------------------
This releases has many changes in method signatures. The most obvious ones are signedness changes from s32 to u32. Since many templates won't accept both types, you need to change the types manually in your code. The other major change is from many different types of strings to the new class io::path. These changes should be transparent to the app, unless you need proper overrides in derived classes.
Finally, some deprecated methods have been removed, and some were simply renamed. Just check the API if some methods is not found anymore.

IMeshSceneNode.h
Added default parameters for identity transformation
	IMeshSceneNode(ISceneNode* parent, ISceneManager* mgr, s32 id,
		const core::vector3df& position = core::vector3df(0,0,0),
		const core::vector3df& rotation = core::vector3df(0,0,0),
		const core::vector3df& scale = core::vector3df(1,1,1))

path.h
This is a new type, which handles stuff with UTF file systems.
typedef core::string<fschar_t> io::path;

ESceneNodeTypes.h
New scene node identifiers
	ESNT_SKY_DOME       = MAKE_IRR_ID('s','k','y','d'),
	ESNT_Q3SHADER_SCENE_NODE  = MAKE_IRR_ID('q','3','s','h'),
	ESNT_VOLUME_LIGHT  = MAKE_IRR_ID('v','o','l','l'),

IGUIListBox.h
New methods
	virtual void setSelected(const wchar_t *item) = 0;
	virtual void setItemHeight( s32 height ) = 0;
	virtual void setDrawBackground(bool draw) = 0;

ITexture.h
New texture generation flag for burnings video driver
	//! Allow the Driver to use Non-Power-2-Textures
	ETCF_ALLOW_NON_POWER_2 = 0x00000040,
Parameter change (now using path type instead of C-strings)
	ITexture(const io::path& name)
Signedness change
	virtual const core::dimension2d<u32>& getOriginalSize() const = 0;
	virtual const core::dimension2d<u32>& getSize() const = 0;
New method
	virtual bool hasAlpha() const
Parameter change (now using path type instead of stringc)
	const io::path& getName() const

ILightManager.h
This is a new interface for the light manager
	class ILightManager : public IReferenceCounted

IGUIEditBox.h
Signedness change
	virtual core::dimension2du getTextDimension() = 0;

ITriangleSelector.h
New method
	virtual const ISceneNode* getSceneNodeForTriangle(u32 triangleIndex) const = 0;

IMeshManipulator.h
New methods
	virtual void makePlanarTextureMapping(scene::IMeshBuffer* meshbuffer, f32 resolution=0.001f) const =0;
	virtual void makePlanarTextureMapping(scene::IMeshBuffer* buffer, f32 resolutionS, f32 resolutionT, u8 axis, const core::vector3df& offset) const =0;
	virtual IMesh* createMeshWith1TCoords(IMesh* mesh) const = 0;

SceneParameters.h
Removed parameter
	const c8* const DMF_USE_MATERIALS_DIRS = "DMF_MaterialsDir";
New parameters
	const c8* const DMF_IGNORE_MATERIALS_DIRS = "DMF_IgnoreMaterialsDir";
	const c8* const OBJ_LOADER_IGNORE_MATERIAL_FILES = "OBJ_IgnoreMaterialFiles";
	const c8* const B3D_LOADER_IGNORE_MIPMAP_FLAG = "B3D_IgnoreMipmapFlag";
	const c8* const DEBUG_NORMAL_LENGTH = "DEBUG_Normal_Length";
	const c8* const DEBUG_NORMAL_COLOR = "DEBUG_Normal_Color";

SViewFrustum.h
Removed method (use getTransform)
	void setTransformState( video::E_TRANSFORMATION_STATE state);
New methods
	core::matrix4& getTransform( video::E_TRANSFORMATION_STATE state);
	const core::matrix4& getTransform( video::E_TRANSFORMATION_STATE state) const;
	bool clipLine(core::line3d<f32>& line) const;

IFileList.h
Changed parameters (to io::path)
	virtual const io::path& getFileName(u32 index) const = 0;
	virtual const io::path& getFullFileName(u32 index) const = 0;
New methods
	virtual u32 getFileSize(u32 index) const = 0;
	virtual s32 findFile(const io::path& filename, bool isFolder=false) const = 0;
	virtual const io::path& getPath() const = 0;

coreutil.h
New methods
	s32 isFileExtension(const io::path& filename,
		const io::path& ext0, const io::path& ext1, const io::path& ext2)
	bool hasFileExtension(const io::path& filename,
		const io::path& ext0, const io::path& ext1 = "", const io::path& ext2 = "")
	stringw& cutFilenameExtension ( stringw &dest, const stringw &source )
	core::stringw& deletePathFromFilename(core::stringw& filename)
	core::stringc& deletePathFromFilename(core::stringc& filename)
	io::path& deletePathFromPath(io::path& filename, s32 pathCount)
	s32 isInSameDirectory ( const io::path& path, const io::path& file )

IGUIComboBox.h
New methods
	virtual u32 getItemData(u32 idx) const = 0;
	virtual s32 getIndexForItemData(u32 data ) const = 0;
New parameter
	virtual u32 addItem(const wchar_t* text, u32 data = 0) = 0;

irrArray.h
New allocation scheme member
	array()
Use overload instead of different name
	s32 binary_search(const T& element) const
New method
	void setAllocStrategy ( eAllocStrategy newStrategy = ALLOC_STRATEGY_DOUBLE )
	s32 binary_search_multi(const T& element, s32 &last)

IrrCompileConfig.h
New compiler flags
	#define _IRR_MATERIAL_MAX_TEXTURES_ 4
	//! Define _IRR_D3D_USE_LEGACY_HLSL_COMPILER to enable the old HLSL compiler in recent DX SDKs
	#define BURNINGVIDEO_RENDERER_CE
	#define IGNORE_DEPRECATED_WARNING
	#define _IRR_COMPILE_WITH_PLY_LOADER_
	#define _IRR_COMPILE_WITH_PLY_WRITER_
	#define _IRR_COMPILE_WITH_RGB_LOADER_
	#define __IRR_COMPILE_WITH_ZIP_ARCHIVE_LOADER_
	#define __IRR_COMPILE_WITH_MOUNT_ARCHIVE_LOADER_
	#define __IRR_COMPILE_WITH_PAK_ARCHIVE_LOADER_
	#define __IRR_COMPILE_WITH_TAR_ARCHIVE_LOADER_
	//! _IRR_WINDOWS_CE_PLATFORM_ for Windows CE
	//! _IRR_COMPILE_WITH_WINDOWS_DEVICE_ for Windows API based device
	//! _IRR_COMPILE_WITH_WINDOWS_CE_DEVICE_ for Windows CE API based device
	//! _IRR_COMPILE_WITH_OSX_DEVICE_ for Cocoa native windowing on OSX
	//! _IRR_COMPILE_WITH_X11_DEVICE_ for Linux X11 based device
	//! _IRR_COMPILE_WITH_SDL_DEVICE_ for platform independent SDL framework
	//! _IRR_COMPILE_WITH_CONSOLE_DEVICE_ for no windowing system, used as a fallback
Removed compiler flags
	//! _IRR_USE_SDL_DEVICE_ for platform independent SDL framework
	//! _IRR_USE_WINDOWS_DEVICE_ for Windows API based device
	//! _IRR_USE_WINDOWS_CE_DEVICE_ for Windows CE API based device
	//! _IRR_USE_LINUX_DEVICE_ for X11 based device
	//! _IRR_USE_OSX_DEVICE_ for Cocoa native windowing on OSX
Old compilers rejected
	#  error "Only Microsoft Visual Studio 7.0 and later are supported."
Force symbol export in shared libraries built with gcc.
	#define IRRLICHT_API __attribute__ ((visibility("default")))

IGUIFileOpenDialog.h
New method
	virtual const io::path& getDirectoryName() = 0;

EDeviceTypes.h
New enum for multi-device support
	enum E_DEVICE_TYPE

IMeshLoader.h
Changed parameter to use io::path instead of C strings
	virtual bool isALoadableFileExtension(const io::path& filename) const = 0;

IAnimatedMeshSceneNode.h
Changed return value to pointer type
	virtual const SMD3QuaternionTag* getMD3TagTransformation( const core::stringc & tagname) = 0;

ISceneManager.h
New enum values and numbering
	enum E_SCENE_NODE_RENDER_PASS
		ESNRP_NONE =0,
		ESNRP_TRANSPARENT =16,
		ESNRP_TRANSPARENT_EFFECT =32,
Changed parameter to use io::path instead of C strings
	virtual IAnimatedMesh* getMesh(const io::path& filename) = 0;
New methods
	virtual io::IFileSystem* getFileSystem() = 0;
	virtual ITriangleSelector* createTriangleSelector(IAnimatedMeshSceneNode* node) = 0;
	virtual const c8* getAnimatorTypeName(ESCENE_NODE_ANIMATOR_TYPE type) = 0;
	virtual ISkinnedMesh* createSkinnedMesh() = 0;
	virtual void setLightManager(ILightManager* lightManager) = 0;
	virtual const IGeometryCreator* getGeometryCreator(void) const = 0;
	virtual bool isCulled(const ISceneNode* node) const =0;
Changed return type to IMeshSceneNode
	virtual IMeshSceneNode* addOctTreeSceneNode(IAnimatedMesh* mesh, ISceneNode* parent=0,
			s32 id=-1, s32 minimalPolysPerNode=512, bool alsoAddIfMeshPointerZero=false) = 0;
	virtual IMeshSceneNode* addOctTreeSceneNode(IMesh* mesh, ISceneNode* parent=0,
			s32 id=-1, s32 minimalPolysPerNode=256, bool alsoAddIfMeshPointerZero=false) = 0;
	virtual IMeshSceneNode* addQuake3SceneNode(IMeshBuffer* meshBuffer, const quake3::IShader * shader,
			ISceneNode* parent=0, s32 id=-1) = 0;
New parameter invertMouse
	virtual ICameraSceneNode* addCameraSceneNodeFPS(ISceneNode* parent = 0,
			f32 rotateSpeed = 100.0f, f32 moveSpeed = 0.5f, s32 id=-1,
			SKeyMap* keyMapArray=0, s32 keyMapSize=0, bool noVerticalMovement=false,
			f32 jumpSpeed = 0.f, bool invertMouse=false) = 0;
New parameter radius
	virtual ISceneNode* addSkyDomeSceneNode(video::ITexture* texture,
			u32 horiRes=16, u32 vertRes=8,
			f32 texturePercentage=0.9, f32 spherePercentage=2.0,f32 radius = 1000.f,
			ISceneNode* parent=0, s32 id=-1) = 0;
Changed to use io::path instead of C strings
	virtual ITerrainSceneNode* addTerrainSceneNode(
			const io::path& heightMapFileName,
			ISceneNode* parent=0, s32 id=-1,
	virtual IAnimatedMesh* addHillPlaneMesh(const io::path& name,
			const core::dimension2d<f32>& tileSize, const core::dimension2d<u32>& tileCount,
			video::SMaterial* material = 0, f32 hillHeight = 0.0f,
			const core::dimension2d<f32>& countHills = core::dimension2d<f32>(0.0f, 0.0f),
			const core::dimension2d<f32>& textureRepeatCount = core::dimension2d<f32>(1.0f, 1.0f)) = 0;
	virtual IAnimatedMesh* addArrowMesh(const io::path& name,
				video::SColor vtxColor0=0xFFFFFFFF,
				video::SColor vtxColor1=0xFFFFFFFF,
				u32 tesselationCylinder=4, u32 tesselationCone=8,
	virtual IAnimatedMesh* addSphereMesh(const io::path& name,
				f32 radius=5.f, u32 polyCountX = 16,
				u32 polyCountY = 16) = 0;
	virtual bool saveScene(const io::path& filename, ISceneUserDataSerializer* userDataSerializer=0) = 0;
	virtual bool loadScene(const io::path& filename, ISceneUserDataSerializer* userDataSerializer=0) = 0;
Changed to use io::path instead of C strings and signedness change
	virtual IAnimatedMesh* addTerrainMesh(const io::path& meshname,
			video::IImage* texture, video::IImage* heightmap,
			const core::dimension2d<f32>& stretchSize = core::dimension2d<f32>(10.0f,10.0f),
			f32 maxHeight=200.0f,
			const core::dimension2d<u32>& defaultVertexBlockSize = core::dimension2d<u32>(64,64)) = 0;
New method
	virtual IAnimatedMesh* addVolumeLightMesh(const io::path& name,
			const u32 SubdivideU = 32, const u32 SubdivideV = 32,
			const video::SColor FootColor = video::SColor(51, 0, 230, 180),
			const video::SColor TailColor = video::SColor(0, 0, 0, 0)) = 0;
Constification of method
	virtual ICameraSceneNode* getActiveCamera() const =0;
New parameters
	virtual ISceneNodeAnimator* createFlyCircleAnimator(
				const core::vector3df& center=core::vector3df(0.f,0.f,0.f),
				f32 radius=100.f, f32 speed=0.001f,
				const core::vector3df& direction=core::vector3df(0.f, 1.f, 0.f),
				f32 startPosition = 0.f,
				f32 radiusEllipsoid = 0.f) = 0;
	virtual ISceneNodeAnimator* createFlyStraightAnimator(const core::vector3df& startPoint,
			const core::vector3df& endPoint, u32 timeForWay, bool loop=false, bool pingpong = false) = 0;

ISceneNodeAnimatorCollisionResponse.h
New interface
	class ICollisionCallback : public virtual IReferenceCounted
New methods for ISceneNodeAnimatorCollisionResponse
	virtual void setAnimateTarget ( bool enable ) = 0;
	virtual bool getAnimateTarget () const = 0;
	virtual void setTargetNode(ISceneNode * node) = 0;
	virtual ISceneNode* getTargetNode(void) const = 0;
	virtual bool collisionOccurred() const = 0;
	virtual const core::vector3df & getCollisionPoint() const = 0;
	virtual const core::triangle3df & getCollisionTriangle() const = 0;
	virtual const core::vector3df & getCollisionResultPosition(void) const = 0;
	virtual const ISceneNode* getCollisionNode(void) const = 0;
	virtual void setCollisionCallback(ICollisionCallback* callback) = 0;

ILightSceneNode.h
New methods
	virtual void setVisible(bool isVisible) = 0;

EMeshWriterEnums.h
New enums
	EMWT_PLY          = MAKE_IRR_ID('p','l','y',0)
	EMWF_WRITE_BINARY = 0x4

ISceneNodeAnimator.h
New method
	virtual bool hasFinished(void) const

SMaterialLayer.h
Changed types
	u8 TextureWrap;
	bool BilinearFilter:1;
	bool TrilinearFilter:1;
	u8 AnisotropicFilter;
New member
	s8 LODBias;

IVideoModeList.h
Signedness change
	virtual core::dimension2d<u32> getVideoModeResolution(s32 modeNumber) const = 0;
	virtual core::dimension2d<u32> getVideoModeResolution(const core::dimension2d<u32>& minSize, const core::dimension2d<u32>& maxSize) const = 0;
	virtual const core::dimension2d<u32>& getDesktopResolution() const = 0;

EMaterialFlags.h
Enum values changed (all renumbered)

ISkinnedMesh.h
Renamed methods (was create... before, but these methods grab the things they create)
	virtual SSkinMeshBuffer* addMeshBuffer() = 0;
	virtual SJoint* addJoint(SJoint *parent=0) = 0;
	virtual SWeight* addWeight(SJoint *joint) = 0;
	virtual SPositionKey* addPositionKey(SJoint *joint) = 0;
	virtual SScaleKey* addScaleKey(SJoint *joint) = 0;
	virtual SRotationKey* addRotationKey(SJoint *joint) = 0;

SLight.h
Type change
	bool CastShadows:1;

IGUITreeView.h
New element
// written by Reinhard Ostermeier, reinhard@nospam.r-ostermeier.de
	class IGUITreeView : public IGUIElement

IAnimatedMeshMD3.h
Renamed class (from SMD3QuaterionTag)
	struct SMD3QuaternionTag

IGUIEnvironment.h
New methods
	virtual IGUIImageList* createImageList( video::ITexture* texture,
			core::dimension2d<s32>	imageSize, bool useAlphaChannel ) = 0;
	virtual IGUITreeView* addTreeView(const core::rect<s32>& rectangle,
		IGUIElement* parent=0, s32 id=-1, bool drawBackground=false,
		bool scrollBarVertical = true, bool scrollBarHorizontal = false) = 0;
Changed parameters to use io::path (instead of C strings)
	virtual IGUIFont* getFont(const io::path& filename) = 0;
	virtual IGUISpriteBank* getSpriteBank(const io::path& filename) = 0;
	virtual IGUISpriteBank* addEmptySpriteBank(const io::path& name) = 0;
	virtual bool saveGUI(const io::path& filename, IGUIElement* start=0) = 0;
	virtual bool loadGUI(const io::path& filename, IGUIElement* parent=0) = 0;
New parameter "border"
	virtual IGUISpinBox* addSpinBox(const wchar_t* text, const core::rect<s32>& rectangle,
		bool border=true,IGUIElement* parent=0, s32 id=-1) = 0;

IQ3Shader.h
Made non-const
	static core::stringc irrEmptyStringc("");
New enum values
	enum eQ3MeshIndex
		E_Q3_MESH_FOG,
		E_Q3_MESH_UNRESOLVED,

IGeometryCreator.h
New interface
	class IGeometryCreator : public IReferenceCounted

IFileArchive.h
New interfaces
	class IFileArchive : public virtual IReferenceCounted
	class IArchiveLoader : public virtual IReferenceCounted

IFileSystem.h
Changed parameters to use io::path (instead of C strings/stringc)
	virtual IReadFile* createAndOpenFile(const path& filename) =0;
	virtual IReadFile* createMemoryReadFile(void* memory, s32 len, const path& fileName, bool deleteMemoryWhenDropped=false) =0;
	virtual IWriteFile* createAndWriteFile(const path& filename, bool append=false) =0;
	virtual const path& getWorkingDirectory() =0;
	virtual bool changeWorkingDirectoryTo(const path& newDirectory) =0;
	virtual path getAbsolutePath(const path& filename) const =0;
	virtual path getFileDir(const path& filename) const =0;
	virtual path getFileBasename(const path& filename, bool keepExtension=true) const =0;
	virtual bool existFile(const path& filename) const =0;
	virtual IXMLReader* createXMLReader(const path& filename) =0;
	virtual IXMLReaderUTF8* createXMLReaderUTF8(const path& filename) =0;
	virtual IXMLWriter* createXMLWriter(const path& filename) =0;
New methods
	virtual IReadFile* createLimitReadFile(const path& fileName,
			IReadFile* alreadyOpenedFile, long pos, long areaSize) =0;
	virtual IWriteFile* createMemoryWriteFile(void* memory, s32 len, const path& fileName, bool deleteMemoryWhenDropped=false) =0;
	virtual bool addFileArchive(const path& filename, bool ignoreCase=true, bool ignorePaths=true,
		E_FILE_ARCHIVE_TYPE archiveType=EFAT_UNKNOWN) =0;
	virtual void addArchiveLoader(IArchiveLoader* loader) =0;
	virtual u32 getFileArchiveCount() const =0;
	virtual bool removeFileArchive(u32 index) =0;
	virtual bool removeFileArchive(const path& filename) =0;
	virtual bool moveFileArchive(u32 sourceIndex, s32 relative) =0;
	virtual IFileArchive* getFileArchive(u32 index) =0;
	virtual path& flattenFilename(path& directory, const path& root="/") const =0;
	virtual EFileSystemType setFileListSystem(EFileSystemType listType) =0;
Deprecate methods
	virtual bool addZipFileArchive(const c8* filename, bool ignoreCase=true, bool ignorePaths=true)
	virtual bool addFolderFileArchive(const c8* filename, bool ignoreCase=true, bool ignorePaths=true)
	virtual bool addPakFileArchive(const c8* filename, bool ignoreCase=true, bool ignorePaths=true)
Constification of method
	virtual IFileList* createFileList() =0;

IrrlichtDevice.h
Renamed method (from setResizeAble)
	virtual void setResizable(bool resize=false) = 0;
New methods
	virtual void minimizeWindow() =0;
	virtual void maximizeWindow() =0;
	virtual void restoreWindow() =0;
	virtual bool setGammaRamp(f32 red, f32 green, f32 blue,
			f32 relativebrightness, f32 relativecontrast) =0;
	virtual bool getGammaRamp(f32 &red, f32 &green, f32 &blue,
			f32 &brightness, f32 &contrast) =0;
	virtual E_DEVICE_TYPE getType() const = 0;

irrMath.h
Renamed from ROUNDING_ERROR_32
	const f32 ROUNDING_ERROR_f32 = 0.000001f;
Renamed from ROUNDING_ERROR_64
	const f64 ROUNDING_ERROR_f64 = 0.00000001;
New constant
	const s32 ROUNDING_ERROR_S32 = 1;
New methods
	bool isnotzero(const f32 a, const f32 tolerance = ROUNDING_ERROR_f32)
	u16 if_c_a_else_b ( const s16 condition, const u16 a, const u16 b )
	f32 squareroot(const f32 f)
	f64 squareroot(const f64 f)
	s32 squareroot(const s32 f)
	f64 reciprocal_squareroot(const f64 x)
	s32 reciprocal_squareroot(const s32 x)
	f64 reciprocal ( const f64 f )

IGPUProgrammingServices.h
Changed parameters to use io::path
	virtual s32 addHighLevelShaderMaterialFromFiles(
		const io::path& vertexShaderProgramFileName,
		const c8* vertexShaderEntryPointName = "main",
		E_VERTEX_SHADER_TYPE vsCompileTarget = EVST_VS_1_1,
		const io::path& pixelShaderProgramFileName = "",
		const c8* pixelShaderEntryPointName = "main",
		E_PIXEL_SHADER_TYPE psCompileTarget = EPST_PS_1_1,
		IShaderConstantSetCallBack* callback = 0,
	virtual s32 addShaderMaterialFromFiles(const io::path& vertexShaderProgramFileName,
		const io::path& pixelShaderProgramFileName,
		IShaderConstantSetCallBack* callback = 0,
		E_MATERIAL_TYPE baseMaterial = video::EMT_SOLID,
		s32 userData = 0) = 0;

ISceneNode.h
New method
	virtual bool isTrulyVisible() const

IEventReceiver.h
New enum values
	EMIE_MOUSE_DOUBLE_CLICK,
	EMIE_MOUSE_TRIPLE_CLICK,
	EGET_DIRECTORY_SELECTED,
	EGET_EDITBOX_CHANGED,
	EGET_EDITBOX_MARKING_CHANGED,
	EGET_TREEVIEW_NODE_DESELECT,
	EGET_TREEVIEW_NODE_SELECT,
	EGET_TREEVIEW_NODE_EXPAND,
	EGET_TREEVIEW_NODE_COLLAPS,
	EGET_COUNT
New enum
	enum E_MOUSE_BUTTON_STATE_MASK
New members
	bool Shift:1;
	bool Control:1;
	u32 ButtonStates;
New methods
	bool isLeftPressed() const { return 0 != ( ButtonStates & EMBSM_LEFT ); }
	bool isRightPressed() const { return 0 != ( ButtonStates & EMBSM_RIGHT ); }
	bool isMiddlePressed() const { return 0 != ( ButtonStates & EMBSM_MIDDLE ); }
Types changed
	bool PressedDown:1;
	bool Shift:1;
	bool Control:1;

IGUISpriteBank.h
New method
	virtual void draw2DSpriteBatch(const core::array<u32>& indices, const core::array<core::position2di>& pos,
		const core::rect<s32>* clip=0,
		const video::SColor& color= video::SColor(255,255,255,255),
		u32 starttime=0, u32 currenttime=0,
		bool loop=true, bool center=false) = 0;

SMaterial.h
New enums
	enum E_COMPARISON_FUNC
	enum E_COLOR_PLANE
	enum E_ALPHA_SOURCE
	enum E_ANTI_ALIASING_MODE
	enum E_COLOR_MATERIAL
New parameters
	inline f32 pack_texureBlendFunc ( const E_BLEND_FACTOR srcFact, const E_BLEND_FACTOR dstFact, const E_MODULATE_FUNC modulate=EMFN_MODULATE_1X, const u32 alphaSource=EAS_TEXTURE )
	inline void unpack_texureBlendFunc ( E_BLEND_FACTOR &srcFact, E_BLEND_FACTOR &dstFact,
		E_MODULATE_FUNC &modulo, u32& alphaSource, const f32 param )
New methods
	inline bool textureBlendFunc_hasAlpha ( const E_BLEND_FACTOR factor )
Default value set elsewhere now (see IrrCompileConfig.h)
	const u32 MATERIAL_MAX_TEXTURES = _IRR_MATERIAL_MAX_TEXTURES_;
Types changed
		u8 ZBuffer;
		bool Wireframe:1;
		bool PointCloud:1;
		bool GouraudShading:1;
		bool Lighting:1;
		bool ZWriteEnable:1;
		bool BackfaceCulling:1;
		bool FrontfaceCulling:1;
		bool FogEnable:1;
		bool NormalizeNormals:1;
New members
		u8 AntiAliasing;
		u8 ColorMask:4;
		u8 ColorMaterial:3;
New constant
	IRRLICHT_API extern SMaterial IdentityMaterial;

IGUISkin.h
New enum values
	EGDS_TITLEBARTEXT_DISTANCE_X,
	EGDS_TITLEBARTEXT_DISTANCE_Y,

quaternion.h
New parameters
	void getMatrix( matrix4 &dest, const vector3df &translation ) const;
New method
	void getMatrixCenter( matrix4 &dest, const vector3df &center, const vector3df &translation ) const;

ISceneNodeAnimatorCameraFPS.h
New method
	virtual void setInvertMouse(bool invert) = 0;

IImage.h
New enum values
	/** Floating Point formats. The following formats may only be used for render target textures. */
	ECF_R16F,
	ECF_G16R16F,
	ECF_A16B16G16R16F,
	ECF_R32F,
	ECF_G32R32F,
	ECF_A32B32G32R32F,
	ECF_UNKNOWN
Signedness change
	virtual const core::dimension2d<u32>& getDimension() const = 0;
	virtual void copyToScaling(void* target, u32 width, u32 height, ECOLOR_FORMAT format=ECF_A8R8G8B8, u32 pitch=0) =0;
New parameter
	virtual void setPixel(u32 x, u32 y, const SColor &color, bool blend = false ) = 0;
New method
	virtual void copyToScalingBoxFilter(IImage* target, s32 bias = 0, bool blend = false) = 0;
	static u32 getBitsPerPixelFromFormat(const ECOLOR_FORMAT format)
	static bool isRenderTargetOnlyFormat(const ECOLOR_FORMAT format)

IVideoDriver.h
New enum values (only existing if _IRR_MATERIAL_MAX_TEXTURES_ large enough)
	ETS_TEXTURE_4
	ETS_TEXTURE_5
	ETS_TEXTURE_6
	ETS_TEXTURE_7
New enums
	enum E_RENDER_TARGET
	enum E_FOG_TYPE
New type
	struct SOverrideMaterial
New methods
	virtual u32 getImageLoaderCount() const = 0;
	virtual IImageLoader* getImageLoader(u32 n) = 0;
	virtual u32 getImageWriterCount() const = 0;
	virtual IImageWriter* getImageWriter(u32 n) = 0;
	virtual bool setRenderTarget(E_RENDER_TARGET target, bool clearTarget=true,
		bool clearZBuffer=true, SColor color=video::SColor(0,0,0,0)) =0;
	virtual void draw2DVertexPrimitiveList(const void* vertices, u32 vertexCount,
		const void* indexList, u32 primCount,
		E_VERTEX_TYPE vType=EVT_STANDARD,
		scene::E_PRIMITIVE_TYPE pType=scene::EPT_TRIANGLES,
		E_INDEX_TYPE iType=EIT_16BIT) =0;
	virtual void draw2DImageBatch(const video::ITexture* texture,
		const core::array<core::position2d<s32> >& positions,
		const core::array<core::rect<s32> >& sourceRects,
		const core::rect<s32>* clipRect=0,
		SColor color=SColor(255,255,255,255),
		bool useAlphaChannelOfTexture=false) =0;
	virtual void turnLightOn(s32 lightIndex, bool turnOn) =0;
	virtual bool writeImageToFile(IImage* image, io::IWriteFile* file, u32 param =0) =0;
	virtual IImage* createImage(ITexture* texture,
		const core::position2d<s32>& pos, const core::dimension2d<u32>& size) =0;
	virtual void setMinHardwareBufferVertexCount(u32 count) =0;
	virtual SOverrideMaterial& getOverrideMaterial() =0;
Changed parameters to use io::path
	virtual ITexture* getTexture(const io::path& filename) = 0;
	virtual void renameTexture(ITexture* texture, const io::path& newName) = 0;
	virtual ITexture* addTexture(const io::path& name, IImage* image) = 0;
	virtual IImage* createImageFromFile(const io::path& filename) = 0;
	virtual bool writeImageToFile(IImage* image, const io::path& filename, u32 param = 0) = 0;
	virtual video::ITexture* findTexture(const io::path& filename) = 0;
Changed signedness
	virtual ITexture* addTexture(const core::dimension2d<u32>& size,
		const io::path& name, ECOLOR_FORMAT format = ECF_A8R8G8B8) = 0;
	virtual const core::dimension2d<u32>& getScreenSize() const =0;
	virtual const core::dimension2d<u32>& getCurrentRenderTargetSize() const =0;
	virtual IImage* createImageFromData(ECOLOR_FORMAT format,
		const core::dimension2d<u32>& size, void *data,
		bool ownForeignMemory=false,
		bool deleteMemory = true) =0;
	virtual IImage* createImage(ECOLOR_FORMAT format, const core::dimension2d<u32>& size) =0;
	virtual IImage* createImage(IImage* imageToCopy,
		const core::position2d<s32>& pos,
		const core::dimension2d<u32>& size) =0;
	virtual void OnResize(const core::dimension2d<u32>& size) =0;
Changed signedness and usage of io::path
	virtual ITexture* addRenderTargetTexture(const core::dimension2d<u32>& size,
		const io::path& name = "rt", const ECOLOR_FORMAT format = ECF_UNKNOWN) =0;
Removed deprecated method
	virtual ITexture* createRenderTargetTexture(const core::dimension2d<s32>& size,
		const c8* name=0) =0;
New parameter
	virtual void makeColorKeyTexture(video::ITexture* texture,
		video::SColor color, bool zeroTexels = false) const =0;
	virtual void makeColorKeyTexture(video::ITexture* texture,
		core::position2d<s32> colorKeyPixelPos, bool zeroTexels = false) const =0;
Changed parameters
	virtual void setFog(SColor color=SColor(0,255,255,255),
		E_FOG_TYPE fogType=EFT_FOG_LINEAR,
		f32 start=50.0f, f32 end=100.0f, f32 density=0.01f,
		bool pixelFog=false, bool rangeFog=false) =0;
Changed return types
	virtual s32 addDynamicLight(const SLight& light) =0;

EDriverFeatures.h
New enum values
	EVDF_ALPHA_TO_COVERAGE,
	EVDF_COLOR_MASK,

IGUIScrollBar.h
New methods
	virtual void setMin(s32 max) = 0;
	virtual s32 getMin() const = 0;

IQ3LevelMesh.h
Removed method
	virtual void releaseMesh(s32 index) = 0;
Made return value non-const
	virtual quake3::tQ3EntityList& getEntityList() = 0;

ISceneCollisionManager.h
New parameter
	virtual bool getCollisionPoint(const core::line3d<f32>& ray,
		ITriangleSelector* selector, core::vector3df& outCollisionPoint,
		core::triangle3df& outTriangle, const ISceneNode*& outNode) =0;
	virtual core::vector3df getCollisionResultPosition(
		ITriangleSelector* selector,
		const core::vector3df &ellipsoidPosition,
		const core::vector3df& ellipsoidRadius,
		const core::vector3df& ellipsoidDirectionAndSpeed,
		core::triangle3df& triout,
		core::vector3df& hitPosition,
		bool& outFalling,
		const ISceneNode*& outNode,
		f32 slidingSpeed = 0.0005f,
		const core::vector3df& gravityDirectionAndSpeed = core::vector3df(0.0f, 0.0f, 0.0f)) = 0;
Made parameter const&
	virtual core::line3d<f32> getRayFromScreenCoordinates(
		const core::position2d<s32> & pos, ICameraSceneNode* camera = 0) = 0;
	virtual core::position2d<s32> getScreenCoordinatesFrom3DPosition(
		const core::vector3df & pos, ICameraSceneNode* camera=0) = 0;
Made parameter const& and added new parameter
	virtual ISceneNode* getSceneNodeFromScreenCoordinatesBB(const core::position2d<s32>& pos,
		s32 idBitMask=0, bool bNoDebugObjects=false, ISceneNode* root=0) =0;
	virtual ISceneNode* getSceneNodeFromRayBB(const core::line3d<f32>& ray,
		s32 idBitMask=0, bool bNoDebugObjects=false, ISceneNode* root=0) =0;
New method
	virtual ISceneNode* getSceneNodeAndCollisionPointFromRay(
		core::line3df ray, core::vector3df & outCollisionPoint,
		core::triangle3df & outTriangle, s32 idBitMask = 0,
		ISceneNode * collisionRootNode = 0, bool noDebugObjects = false) = 0;

irrlicht.h
Changed interface of method (qualifiers and signedness)
	extern "C" IRRLICHT_API IrrlichtDevice* IRRCALLCONV createDevice(
		video::E_DRIVER_TYPE deviceType = video::EDT_SOFTWARE,
		// parantheses are necessary for some compilers
		const core::dimension2d<u32>& windowSize = (core::dimension2d<u32>(640,480)),
		u32 bits = 16,
		bool fullscreen = false,
		bool stencilbuffer = false,
		bool vsync = false,
		IEventReceiver* receiver = 0);
	extern "C" IRRLICHT_API IrrlichtDevice* IRRCALLCONV createDeviceEx(
		const SIrrlichtCreationParameters& parameters);

IImageLoader.h
Changed parameters to use io::path
	virtual bool isALoadableFileExtension(const io::path& filename) const = 0;

IGUIWindow.h
New methods
	virtual bool isDraggable() const = 0;
	virtual void setDraggable(bool draggable) = 0;
	virtual void setDrawBackground(bool draw) = 0;
	virtual bool getDrawBackground() const = 0;
	virtual void setDrawTitlebar(bool draw) = 0;
	virtual bool getDrawTitlebar() const = 0;

ICameraSceneNode.h
New methods
	virtual void setViewMatrixAffector(const core::matrix4& affector) =0;
	virtual const core::matrix4& getViewMatrixAffector() const =0;

EGUIElementTypes.h
New enum value
	EGUIET_TREE_VIEW,

IImageWriter.h
Changed parameters to use io::path
	virtual bool isAWriteableFileExtension(const io::path& filename) const = 0;

SIrrCreationParameters.h
Added members
	E_DEVICE_TYPE DeviceType;
	bool Doublebuffer;
	bool Stereobuffer;
Changed signedness
	core::dimension2d<u32> WindowSize;
Changed type (from bool)
	u8 AntiAlias;

matrix4.h
New methods
	bool isOrthogonal() const;
	CMatrix4<T>& buildRotateFromTo(const core::vector3df& from, const core::vector3df& to);
	void setRotationCenter(const core::vector3df& center, const core::vector3df& translate);
	void buildAxisAlignedBillboard(	const core::vector3df& camPos,
		const core::vector3df& center, const core::vector3df& translation,
		const core::vector3df& axis, const core::vector3df& from);

IWriteFile.h
Changed parameters to use io::path
	virtual const path& getFileName() const = 0;

IGUITable.h
New methods
	virtual void setSelected( s32 index ) = 0;
Changed type (from wide c string)
	virtual void setCellText(u32 rowIndex, u32 columnIndex, const core::stringw& text) = 0;
	virtual void setCellText(u32 rowIndex, u32 columnIndex, const core::stringw& text, video::SColor color) = 0;

SKeyMap.h
New enum value
	EKA_CROUCH,

IGUIFont.h
Changed type (from wide c string)
	virtual void draw(const core::stringw& text, const core::rect<s32>& position,
		video::SColor color, bool hcenter=false, bool vcenter=false,
		const core::rect<s32>* clip=0) = 0;
Changed signedness
	virtual core::dimension2d<u32> getDimension(const wchar_t* text) const = 0;
New method
	virtual void setInvisibleCharacters( const wchar_t *s ) = 0;

IMeshCache.h
Changed parameters to use io::path
	virtual void addMesh(const io::path& filename, IAnimatedMesh* mesh) = 0;
	virtual IAnimatedMesh* getMeshByFilename(const io::path& filename) = 0;
	virtual const io::path& getMeshFilename(u32 index) const = 0;
	virtual const io::path& getMeshFilename(const IAnimatedMesh* const mesh) const = 0;
	virtual const io::path& getMeshFilename(const IMesh* const mesh) const = 0;
	virtual bool setMeshFilename(u32 index, const io::path& filename) = 0;
	virtual bool setMeshFilename(const IAnimatedMesh* const mesh, const io::path& filename) = 0;
	virtual bool setMeshFilename(const IMesh* const mesh, const io::path& filename) = 0;
	virtual bool isMeshLoaded(const io::path& filename) = 0;

IGUIButton.h
Added default value
	virtual void setImage(video::ITexture* image=0) = 0;
	virtual void setPressedImage(video::ITexture* image=0) = 0;
	virtual void setSpriteBank(IGUISpriteBank* bank=0) = 0;
	virtual void setIsPushButton(bool isPushButton=true) = 0;
	virtual void setPressed(bool pressed=true) = 0;
	virtual void setUseAlphaChannel(bool useAlphaChannel=true) = 0;
	virtual void setDrawBorder(bool border=true) = 0;
New methods
	virtual void setScaleImage(bool scaleImage=true) = 0;
	virtual bool isScalingImage() const = 0;

position2d.h
Replaced by vector2d

IGUIImageList.h
New interface
	class IGUIImageList : public virtual IReferenceCounted

rect.h
Added second template parameter to allow mismatched signedness
	template <class U>
	rect(const position2d<T>& pos, const dimension2d<U>& size)

IParticleEmitter.h
Removed wrong overrides
	virtual void serializeAttributes(io::IAttributes* out,
		io::SAttributeReadWriteOptions* options=0) const {}
	virtual s32 deserializeAttributes(s32 startIndex, io::IAttributes* in,
		io::SAttributeReadWriteOptions* options=0) { return 0; }

IOSOperator.h
Return const string
	virtual const c8* getTextFromClipboard() const = 0;

IGUIElement.h
Signedness change
	void setMaxSize(core::dimension2du size)
	void setMinSize(core::dimension2du size)

IReadFile.h
Changed parameters to use io::path
	virtual const io::path& getFileName() const = 0;
	IReadFile* createReadFile(const io::path& fileName);
	IReadFile* createLimitReadFile(const io::path& fileName, IReadFile* alreadyOpenedFile, long pos, long areaSize);
	IReadFile* createMemoryReadFile(void* memory, long size, const io::path& fileName, bool deleteMemoryWhenDropped);

IGUITabControl.h
New methods
	virtual void setTabMaxWidth(s32 width ) = 0;
	virtual s32 getTabMaxWidth() const = 0;

IParticleAffector.h
Removed wrong overrides
	virtual void serializeAttributes(io::IAttributes* out, io::SAttributeReadWriteOptions* options=0) const {}
	virtual s32 deserializeAttributes(s32 startIndex, io::IAttributes* in, io::SAttributeReadWriteOptions* options=0) { return 0; }

ILogger.h
New method
	virtual void log(const c8* text, const wchar_t* hint, ELOG_LEVEL ll=ELL_INFORMATION) = 0;

vector2d.h
New methods
	vector2d(const dimension2d<T>& other) : X(other.Width), Y(other.Height) {}
	vector2d<T>& operator=(const dimension2d<T>& other) { X = other.Width; Y = other.Height; return *this; }
	vector2d<T> operator+(const dimension2d<T>& other) const { return vector2d<T>(X + other.Width, Y + other.Height); }
	vector2d<T>& operator+=(const dimension2d<T>& other) { X += other.Width; Y += other.Height; return *this;  }
	vector2d<T> operator-(const dimension2d<T>& other) const { return vector2d<T>(X - other.Width, Y - other.Height); }
	vector2d<T>& operator-=(const dimension2d<T>& other) { X -= other.Width; Y -= other.Height; return *this;  }
	// These methods are declared in dimension2d, but need definitions of vector2d
	template<class T>
	dimension2d<T>::dimension2d(const vector2d<T>& other) : Width(other.X), Height(other.Y) { }
	template<class T>
	bool dimension2d<T>::operator==(const vector2d<T>& other) const { return Width == other.X && Height == other.Y; }

Changes for Version 1.6.1
-------------------------
This is again just a bugfix release. However, some minor API changes have happened. The most important one is the removal of lins anti-aliasing from SMaterial's default values. Please add that line smoothing flag to the materials you want to be smoothed. But note that this may lead to drastically reduced performance, if no multi-sampling is active.

IFileList.h
new methods
	virtual u32 getID(u32 index) const = 0;
	virtual u32 addItem(const io::path& fullPath, u32 size, bool isDirectory, u32 id=0) = 0;
	virtual void sort() = 0;

IrrCompileConfig.h
Removed auto recognition of Solaris OS, please define the setting on your own if you need it
	_IRR_SOLARIS_PLATFORM_

IGUITreeView.h
removed methods (use automatically generated versions)
	IGUITreeViewNode() {}
	virtual ~IGUITreeViewNode() {}
	virtual ~IGUITreeView() {}

IFileSystem.h
new method
	virtual IFileList* createEmptyFileList(const io::path& path, bool ignoreCase, bool ignorePaths) =0;

SMaterial.h
Removed default value (EAAM_LINE_SMOOTH from AntiAliasing)
	ZBuffer(ECFN_LESSEQUAL), AntiAliasing(EAAM_SIMPLE), ColorMask(ECP_ALL),

IGUISkin.h
new enum value
	EGST_COUNT


Changes for Version 1.7
-------------------------
This version has less API-breaking changes than the previous major changes. It has many new features, which simply add methods. All those changes, which affect old methods or structures are mostly put in parallel to the old (and now deprecated) methods. Only a few things are changed without backward compatibility: The texture wrap mode is split into separate U and V modes. The beginScene void* parameter has been replaced by an SExposedVideoData. Simply wrap the pointer with this struct and it should work again.
EMIE_LMOUSE_DOUBLE_CLICK replaces EMIE_MOUSE_DOUBLE_CLICK and EMIE_LMOUSE_TRIPLE_CLICK replaces EMIE_MOUSE_TRIPLE_CLICK
Elements used in the array container need now to have an operator= 
Here comes the full list:

path.h
New type
struct SNamedPath
 
triangle3d.h
New method
bool isTotalOutsideBox(const aabbox3d<T>& box) const

ESceneNodeTypes.h
Changed enum value (from octt)
ESNT_OCTREE         = MAKE_IRR_ID('o','c','t','r'),
 
SColor.h
New method
f32 getLightness() const

driverChoice.h
New method
static irr::video::E_DRIVER_TYPE driverChoiceConsole(bool allDrivers=true)

ITexture.h
New parameter
virtual void regenerateMipMapLevels(void* mipmapData=0) = 0;
Changed return value (from io:path) 
const io::SNamedPath& getName() const { return NamedPath; }
 
SceneParameters.h
New scene parameters
const c8* const OBJ_TEXTURE_PATH = "OBJ_TexturePath";
const c8* const B3D_TEXTURE_PATH = "B3D_TexturePath";
 
IMeshManipulator.h
Not virtual anymore
void setVertexColorAlpha(IMesh* mesh, s32 alpha) const
void setVertexColors(IMesh* mesh, video::SColor color) const
void scale(IMeshBuffer* buffer, const core::vector3df& factor) const
void scaleMesh(IMesh* mesh, const core::vector3df& factor) const
void scaleTCoords(scene::IMesh* mesh, const core::vector2df& factor, u32 level=1) const
void scaleTCoords(scene::IMeshBuffer* buffer, const core::vector2df& factor, u32 level=1) const
void transform(IMesh* mesh, const core::matrix4& m) const
void transform(IMeshBuffer* buffer, const core::matrix4& m) const
New method
template <typename Functor>
bool apply(const Functor& func, IMeshBuffer* buffer, bool boundingBoxUpdate=false) const
template <typename Functor>
bool apply(const Functor& func, IMesh* mesh, bool boundingBoxUpdate=false) const
virtual void recalculateTangents(IMesh* mesh, bool recalculateNormals=false,
		bool smooth=false, bool angleWeighted=false) const=0;
void scale(IMesh* mesh, const core::vector3df& factor) const
New parameter 
virtual IMesh* createMeshWithTangents(IMesh* mesh, bool recalculateNormals=false, bool smooth=false, bool angleWeighted=false, bool recalculateTangents=true) const = 0;
 
coreutil.h
Changed return type and parameters (from stringc/w)
inline io::path& cutFilenameExtension ( io::path &dest, const io::path &source )
inline io::path& getFileNameExtension ( io::path &dest, const io::path &source )
inline io::path& deletePathFromFilename(io::path& filename)
Fixed behavior
inline io::path& deletePathFromPath(io::path& filename, s32 pathCount)
 
ICursorControl.h
Return const-ref
virtual const core::position2d<s32>& getPosition() = 0;
 
irrArray.h
Fixed allocator template usage
array(const array<T, TAlloc>& other) : data(0)
const array<T, TAlloc>& operator=(const array<T, TAlloc>& other)
bool operator == (const array<T, TAlloc>& other) const
bool operator != (const array<T, TAlloc>& other) const
Changed behavior for free_when_destroyed
void set_pointer(T* newPointer, u32 size, bool _is_sorted=false, bool _free_when_destroyed=true)
void set_free_when_destroyed(bool f)
 
irrMap.h
Renamed method (from isEmpty)
bool empty() const
New method
void swap(map<KeyType, ValueType>& other)

IAnimatedMesh.h
virtual f32 getAnimationSpeed() const =0;

IAttributes.h
Made parameters const-ref
virtual void addArray(const c8* attributeName, const core::array<core::stringw>& value) = 0;
virtual void setAttribute(const c8* attributeName, const core::array<core::stringw>& value) = 0;
virtual void setAttribute(s32 index, const core::array<core::stringw>& value) = 0;

ISceneManager.h
Renamed method (from OctTree)
virtual IMeshSceneNode* addOctreeSceneNode(IAnimatedMesh* mesh, ISceneNode* parent=0,
 			s32 id=-1, s32 minimalPolysPerNode=512, bool alsoAddIfMeshPointerZero=false) = 0;
virtual IMeshSceneNode* addOctreeSceneNode(IMesh* mesh, ISceneNode* parent=0,
 			s32 id=-1, s32 minimalPolysPerNode=256, bool alsoAddIfMeshPointerZero=false) = 0;
virtual ITriangleSelector* createOctreeTriangleSelector(IMesh* mesh,
 		ISceneNode* node, s32 minimalPolysPerNode=32) = 0;
New parameter (makeActive)
virtual ICameraSceneNode* addCameraSceneNode(ISceneNode* parent = 0,
		const core::vector3df& position = core::vector3df(0,0,0),
		const core::vector3df& lookat = core::vector3df(0,0,100),
		s32 id=-1, bool makeActive=true) = 0;
virtual ICameraSceneNode* addCameraSceneNodeMaya(ISceneNode* parent = 0,
 		f32 rotateSpeed = -1500.0f, f32 zoomSpeed = 200.0f,
		f32 translationSpeed = 1500.0f, s32 id=-1,
		bool makeActive=true) = 0;
virtual ICameraSceneNode* addCameraSceneNodeFPS(ISceneNode* parent = 0,
		f32 rotateSpeed = 100.0f, f32 moveSpeed = 0.5f, s32 id=-1,
 		SKeyMap* keyMapArray=0, s32 keyMapSize=0, bool noVerticalMovement=false,
		f32 jumpSpeed = 0.f, bool invertMouse=false,
		bool makeActive=true) = 0;
Make parameter const 
virtual IMeshSceneNode* addQuake3SceneNode(const IMeshBuffer* meshBuffer, const quake3::IShader * shader,
		ISceneNode* parent=0, s32 id=-1) = 0;
New parameter (loop, pingpong)
virtual ISceneNodeAnimator* createFollowSplineAnimator(s32 startTime,
		const core::array< core::vector3df >& points,
		f32 speed = 1.0f, f32 tightness = 0.5f, bool loop=true, bool pingpong=false) = 0;

SMaterialLayer.h
New clamp modes
ETC_MIRROR_CLAMP, ETC_MIRROR_CLAMP_TO_EDGE, ETC_MIRROR_CLAMP_TO_BORDER
New material layer modes (replaces TextureWrap)
TextureWrapU(ETC_REPEAT), TextureWrapV(ETC_REPEAT)

vector3d.h
Use tolerance to compare, changed order function to total order
bool operator<=(const vector3d<T>&other) const
bool operator>=(const vector3d<T>&other) const
bool operator<(const vector3d<T>&other) const
bool operator>(const vector3d<T>&other) const
New method 
vector3d<T> getSphericalCoordinateAngles()
New method specializations
template <>
inline vector3d<s32> vector3d<s32>::operator /(s32 val) const {return core::vector3d<s32>(X/val,Y/val,Z/val);}
template <>
inline vector3d<s32>& vector3d<s32>::operator /=(s32 val) {X/=val;Y/=val;Z/=val; return *this;}
 
SExposedVideoData.h
New constructors
SExposedVideoData() {OpenGLWin32.HDc=0; OpenGLWin32.HRc=0; OpenGLWin32.HWnd=0;}
explicit SExposedVideoData(void* Window) {OpenGLWin32.HDc=0; OpenGLWin32.HRc=0; OpenGLWin32.HWnd=Window;}

IGUIEnvironment.h
New method
virtual IGUIFont* addFont(const io::path& name, IGUIFont* font) = 0;
New parameter (image)
virtual IGUIWindow* addMessageBox(const wchar_t* caption, const wchar_t* text=0,
		bool modal = true, s32 flags = EMBF_OK, IGUIElement* parent=0, s32 id=-1, video::ITexture* image=0) = 0;
 
IGeometryCreator.h
New method
IMesh* createPlaneMesh(const core::dimension2d<f32>& tileSize,
			const core::dimension2d<u32>& tileCount,
			video::SMaterial* material,
			const core::dimension2d<f32>& textureRepeatCount) const

IFileArchive.h
New archive type
EFAT_NPK     = MAKE_IRR_ID('N','P','K', 0),
New member for storing the password of AES-encrypted archives
core::stringc Password;
 
IFileSystem.h
New parameter (password)
virtual bool addFileArchive(const path& filename, bool ignoreCase=true,
		bool ignorePaths=true,
		E_FILE_ARCHIVE_TYPE archiveType=EFAT_UNKNOWN,
		const core::stringc& password="") =0;

IrrlichtDevice.h
New method
virtual void clearSystemMessages() = 0;

irrMath.h
Changed constant (from 1)
const s32 ROUNDING_ERROR_S32 = 0;
New method
template <class T>
inline void swap(T& a, T& b)

IGPUProgrammingServices.h
New parameters (for geometry shaders)
virtual s32 addHighLevelShaderMaterial
virtual s32 addHighLevelShaderMaterialFromFiles
virtual s32 addHighLevelShaderMaterialFromFiles
New overload (for calling with geometry shaders)
s32 addHighLevelShaderMaterial
s32 addHighLevelShaderMaterialFromFiles
s32 addHighLevelShaderMaterialFromFiles

ISceneNode.h
New types
	typedef core::list<ISceneNode*> ISceneNodeList;
	typedef core::list<ISceneNodeAnimator*> ISceneNodeAnimatorList;
 
IEventReceiver.h
Renamed events (split from EMIE_MOUSE_*)
EMIE_LMOUSE_DOUBLE_CLICK,
EMIE_RMOUSE_DOUBLE_CLICK,
EMIE_MMOUSE_DOUBLE_CLICK,
EMIE_LMOUSE_TRIPLE_CLICK,
EMIE_RMOUSE_TRIPLE_CLICK,
EMIE_MMOUSE_TRIPLE_CLICK,
 
IGUISpriteBank.h
New method
virtual s32 addTextureAsSprite(video::ITexture* texture) = 0;
virtual void clear() = 0;

SMaterial.h
Changed binary packing (non-visible from user calls)
inline f32 pack_texureBlendFunc ( const E_BLEND_FACTOR srcFact, const E_BLEND_FACTOR dstFact, const E_MODULATE_FUNC modulate=EMFN_MODULATE_1X, const u32 alphaSource=EAS_TEXTURE )

IGUISkin.h
New values
EGDS_MESSAGE_BOX_GAP_SPACE,
EGDS_MESSAGE_BOX_MIN_TEXT_WIDTH,
EGDS_MESSAGE_BOX_MAX_TEST_WIDTH,
EGDS_MESSAGE_BOX_MIN_TEXT_HEIGHT,
EGDS_MESSAGE_BOX_MAX_TEXT_HEIGHT,
New parameter (checkClientArea)
virtual core::rect<s32> draw3DWindowBackground(IGUIElement* element,
			bool drawTitleBar, video::SColor titleBarColor,
			const core::rect<s32>& rect,
			const core::rect<s32>* clip=0,
			core::rect<s32>* checkClientArea=0) = 0;
 
quaternion.h
New operator
bool operator!=(const quaternion& other) const;
New method
inline quaternion& set(const core::quaternion& quat);
inline bool equals(const quaternion& other,
		const f32 tolerance = ROUNDING_ERROR_f32 ) const;

irrList.h
New method
u32 size() const
void swap(list<T>& other)
 
IVideoDriver.h
New render targets
ERT_MULTI_RENDER_TEXTURES
New class 
struct IRenderTarget
Changed parameter (from void*)
virtual bool beginScene(bool backBuffer=true, bool zBuffer=true,
		SColor color=SColor(255,0,0,0),
		const SExposedVideoData& videoData=SExposedVideoData(),
		core::rect<s32>* sourceRect=0) =0;
New parameter (mipmapData)
virtual ITexture* addTexture(const io::path& name, IImage* image, void* mipmapData=0) = 0;
New method
virtual bool setRenderTarget(const core::array<video::IRenderTarget>& texture,
		bool clearBackBuffer=true, bool clearZBuffer=true,
		SColor color=video::SColor(0,0,0,0)) =0;
void drawIndexedTriangleFan(const S3DVertexTangents* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount)
virtual void getFog(SColor& color, E_FOG_TYPE& fogType,
		f32& start, f32& end, f32& density,
		bool& pixelFog, bool& rangeFog) = 0;
virtual SMaterial& getMaterial2D() =0;
virtual void enableMaterial2D(bool enable=true) =0;
virtual core::dimension2du getMaxTextureSize() const =0;
Made non-virtual
void drawIndexedTriangleList(const S3DVertex* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount)
void drawIndexedTriangleList(const S3DVertex2TCoords* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount)
void drawIndexedTriangleList(const S3DVertexTangents* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount)
void drawIndexedTriangleFan(const S3DVertex* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount)
void drawIndexedTriangleFan(const S3DVertex2TCoords* vertices,
		u32 vertexCount, const u16* indexList, u32 triangleCount)
 
EDriverFeatures.h
New driver feature enums
EVDF_MULTIPLE_RENDER_TARGETS,
EVDF_MRT_BLEND,
EVDF_MRT_COLOR_MASK,
EVDF_MRT_BLEND_FUNC,
EVDF_GEOMETRY_SHADER,

IGUIWindow.h
New method
virtual core::rect<s32> getClientRect() const = 0;
 
IGUIContextMenu.h
New enum
enum ECONTEXT_MENU_CLOSE
New method
virtual void setCloseHandling(ECONTEXT_MENU_CLOSE onClose) = 0;
virtual ECONTEXT_MENU_CLOSE getCloseHandling() const = 0;
virtual u32 insertItem(u32 idx, const wchar_t* text, s32 commandId=-1, bool enabled=true,
		bool hasSubMenu=false, bool checked=false, bool autoChecking=false) = 0;
virtual s32 findItemWithCommandId(s32 commandId, u32 idxStartSearch=0) const = 0;
virtual void setItemAutoChecking(u32 idx, bool autoChecking) = 0;
virtual bool getItemAutoChecking(u32 idx) const = 0;
virtual void setEventParent(IGUIElement *parent) = 0;
New parameter 
virtual u32 addItem(const wchar_t* text, s32 commandId=-1, bool enabled=true,
		bool hasSubMenu=false, bool checked=false, bool autoChecking=false) = 0;
 
SIrrCreationParameters.h
New parameter (LoggingLevel)
createDevice
 
matrix4.h
New method
bool equals(const core::CMatrix4<T>& other, const T tolerance=(T)ROUNDING_ERROR_f64) const;

SSkinMeshBuffer.h
Renamed method (from MoveTo_2TCoords)
virtual void convertTo2TCoords()
Renamed method (from MoveTo_Tangents)
virtual void convertToTangents()

SVertexManipulator.h
New classes (for vertex manipulation)
class SVertexColorSetManipulator : public IVertexManipulator
class SVertexColorSetAlphaManipulator : public IVertexManipulator
class SVertexColorInvertManipulator : public IVertexManipulator
class SVertexColorThresholdManipulator : public IVertexManipulator
class SVertexColorBrightnessManipulator : public IVertexManipulator
class SVertexColorContrastManipulator : public IVertexManipulator
class SVertexColorContrastBrightnessManipulator : public IVertexManipulator
class SVertexColorGammaManipulator : public IVertexManipulator
;
class SVertexColorScaleManipulator : public IVertexManipulator
class SVertexColorDesaturateToLightnessManipulator : public IVertexManipulator
class SVertexColorDesaturateToAverageManipulator : public IVertexManipulator
class SVertexColorDesaturateToLuminanceManipulator : public IVertexManipulator
class SVertexColorInterpolateLinearManipulator : public IVertexManipulator
class SVertexColorInterpolateQuadraticManipulator : public IVertexManipulator
class SVertexPositionScaleManipulator : public IVertexManipulator
;
class SVertexPositionScaleAlongNormalsManipulator : public IVertexManipulator
class SVertexPositionTransformManipulator : public IVertexManipulator
class SVertexTCoordsScaleManipulator : public IVertexManipulator

IMeshCache.h
Renamed method (from getMeshByFilename)
virtual IAnimatedMesh* getMeshByName(const io::path& name) = 0;
Renamed method and changed return type (from getMeshFilename/io::path) 
virtual const io::SNamedPath& getMeshName(u32 index) const = 0;
virtual const io::SNamedPath& getMeshName(const IAnimatedMesh* const mesh) const = 0;
virtual const io::SNamedPath& getMeshName(const IMesh* const mesh) const = 0;
Renamed method (from setMeshFilename)
virtual bool renameMesh(u32 index, const io::path& name) = 0;
virtual bool renameMesh(const IAnimatedMesh* const mesh, const io::path& name) = 0;
virtual bool renameMesh(const IMesh* const mesh, const io::path& name) = 0;
 
IGUIElement.h
Changed parameter (to const-ref)
 IGUIElement(EGUI_ELEMENT_TYPE type, IGUIEnvironment* environment, IGUIElement* parent,
s32 id, const core::rect<s32>& rectangle)
New method
virtual bool hasType(EGUI_ELEMENT_TYPE type) const
 
irrString.h
Changed parameter (to template with allocator) in all methods with templates
Made destructor non-virtual
~string()
Added parameter 
s32 find(const B* const str, const u32 start = 0) const
New method
void remove(T c)
void remove(const string<T,TAlloc> toRemove)
void removeChars(const string<T,TAlloc> & characters)
template<class container>
u32 split(container& ret, const T* const c, u32 count=1, bool ignoreEmptyTokens=true, bool keepSeparators=false) const
 
vector2d.h
Use tolerance to compare, changed order function to total order
bool operator<=(const vector2d<T>&other) const
bool operator>=(const vector2d<T>&other) const
bool operator<(const vector2d<T>&other) const
bool operator>(const vector2d<T>&other) const
 
